[{"title":"探索Drawable","url":"https://grooters.github.io/2018/12/19/探索Drawable/","content":"<p><strong><font size=\"5sp\"><a href=\"https://developer.android.google.cn/reference/android/graphics/drawable/Drawable\" target=\"_blank\" rel=\"noopener\">Drawable</a></font></strong></p>\n<p>Drawable的分类：</p>\n<p><img src=\"/img/Android/探索Drawable/Drawable类型.jpg\" alt=\"Drawable的分类\"></p>\n<p><strong><font size=\"4sp\"><li><a href=\"https://developer.android.google.cn/reference/android/graphics/drawable/BitmapDrawable\" target=\"_blank\" rel=\"noopener\">BitmapDrawable</a></li></font></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bitmap</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:antialias</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:dither</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:filter</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:mipMap</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:src</span>=<span class=\"string\">\"@drawable/drawable_test\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:tileMode</span>=<span class=\"string\">\"clamp\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>antialias:</em> 是否开启抗锯齿，若开启则会使图片更平滑，但图片清晰度会有所下降，建议开启</p>\n<p><em>dither：</em>是否开启防抖动，当手机像素和屏幕像素不一致时，开启防抖动可以保持较好的显示效果，建议开启</p>\n<p><em>filter：</em> 是否开启过滤，当图片被拉伸或者被压缩时，开启过滤会有较好的显示效果，建议开启</p>\n<p><em>mipMap：</em>是否开启纹理映射，不常被用到，默认为false</p>\n<p><em>gravity：</em>用于定位图片，具体属性可查看api文档：<a href=\"https://developer.android.google.cn/reference/android/graphics/drawable/BitmapDrawable.html#attr_android:gravity\" target=\"_blank\" rel=\"noopener\">gravity</a></p>\n<p><em>tileMode：</em> 平铺模式，包括disable，clamp，repeat，mirror四种，其中disable是正常平铺，repeat是重复平铺，mirror是特殊的重复平铺，新的一行会反向显示类似于镜子</p>\n<p><strong><font size=\"4sp\"><li> <a href=\"https://developer.android.google.cn/reference/android/graphics/drawable/ShapeDrawable\" target=\"_blank\" rel=\"noopener\">ShapeDrawable</a></li></font></strong></p>\n<p>shape有五个形状，包括：rectangle(矩形), oval（圆形）, line(横线), ring(圆环)，其中line和ring要通过<strong>stroke</strong>标签来指定宽度和颜色。</p>\n<p><strong><font size=\"4sp\">stroke</font></strong></p>\n<p>常用属性为：width（宽度）, color（颜色）, dashWidth（虚线宽度，0则为实现）, dashGap（虚线间隔）</p>\n<p><strong><font size=\"4sp\">gradient</font></strong></p>\n<blockquote>\n<p>与sodlid互相排斥，用于实现渐变效果</p>\n</blockquote>\n<p>type：渐变类别，有linear(线性)，radius(径向)，sweep(扫描)</p>\n<p>angle: 渐变角度，默认为0（表示从左到右，90表示从上到下），值必须是45的倍数，只有在type为linear（线性）才有效</p>\n<p>centX，centY：渐变中心点的横纵坐标，如：0.5表示在中间</p>\n<p>startColor，centerColor，endColor：渐变颜色</p>\n<p>gradientRadius：渐变半径，只有在type为radius(径向渐变)才有效</p>\n<p>userLevel：一般为false，当Drawable作为StateListDrawable使用时才为true</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:shape</span>=<span class=\"string\">\"oval\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">gradient</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:angle</span>=<span class=\"string\">\"90\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:startColor</span>=<span class=\"string\">\"@color/colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:centerColor</span>=<span class=\"string\">\"@color/colorAccent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:endColor</span>=<span class=\"string\">\"@android:color/holo_red_dark\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:centerX</span>=<span class=\"string\">\"0.5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:centerY</span>=<span class=\"string\">\"0.5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:type</span>=<span class=\"string\">\"radial\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:gradientRadius</span>=<span class=\"string\">\"500\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/Android/探索Drawable/gradient效果展示.PNG\" alt=\"gradient效果展示\"></p>\n<p><strong><font size=\"4sp\">solid</font></strong></p>\n<p>color：指要填充的颜色</p>\n<p><strong><font size=\"4sp\">pading</font></strong></p>\n<p>包含的属性为：left, top, right, bottom</p>\n<p><strong><font size=\"4sp\">size</font></strong></p>\n<p>指shape的固有宽高，但当作为View的背景时仍然会被拉伸或缩小为View的大小，但getIntrinsicWidth和getIntrinsicHeight会得到这两个固定大小，若没有设置size则这两个方法会返回<strong>-1</strong></p>\n<p><strong><font size=\"4sp\">corner</font></strong></p>\n<p>表示四个角的角度，适用于shap为rectangle时</p>\n<p><em>radius：</em>为四个角设置相同的角度，优先级低，会被以下四个属性覆盖</p>\n<p><em>topLeftRadius：</em> 设置左上角的角度</p>\n<p><em>topRightRadius：</em> 设置右上角的角度</p>\n<p><em>bottomLeftRadius：</em> 设置左下角的角度</p>\n<p><em>bottomRightRadius：</em> 设置右下角的角度</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">corners</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:radius</span>=<span class=\"string\">\"50dp\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">solid</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:color</span>=<span class=\"string\">\"@android:color/holo_red_dark\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">stroke</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:width</span>=<span class=\"string\">\"1dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:color</span>=<span class=\"string\">\"@android:color/black\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"4sp\"><li> <a href=\"https://developer.android.google.cn/reference/android/graphics/drawable/LayerDrawable\" target=\"_blank\" rel=\"noopener\">LayerDrawable</a></li></font></strong></p>\n<p>将不同的Drawable防止在不同的层上面，产生一种叠加效果，eg：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layer-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@android:color/black\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:bottom</span>=<span class=\"string\">\"6dp\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@android:color/white\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:bottom</span>=<span class=\"string\">\"1dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:left</span>=<span class=\"string\">\"1dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:right</span>=<span class=\"string\">\"1dp\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"#ffffff\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>具体属性参见LayerDrawable的API文档</p>\n<p><strong><font size=\"4sp\"><li> <a href=\"https://developer.android.google.cn/reference/android/graphics/drawable/StateListDrawable\" target=\"_blank\" rel=\"noopener\">StateListDrawable</a></li></font></strong></p>\n<p><em>constantSize：</em> 固有大小是否随着其状态的改变而改变，因为不同的drawable有不同的固有大小，true为随着改变而改变，默认为false</p>\n<p><em>variablePadding：</em> StateListDrawable的padding是否随着状态的改变而改变，true为随着改变而改变，false表示StateListDrawable的padding的大小是内部Drawable的padding总和，默认为false，建议不开启</p>\n<p>其包含的item标签属性有：</p>\n<p><em>state_pressed：</em> 按下状态</p>\n<p><em>state_focused：</em> 获取焦点状态</p>\n<p><em>state_checked：</em> 选择状态，常适用于CheckBox这类View</p>\n<p><em>state_enabled：</em> 可用状态</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:constantSize</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:variablePadding</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorPrimary\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorAccent\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"4sp\"><li> <a href=\"https://developer.android.google.cn/reference/android/graphics/drawable/LevelListDrawable\" target=\"_blank\" rel=\"noopener\">LevelListDrawable</a></li></font></strong></p>\n<p>通过设置level选择展示对应的Drawable</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">level-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:maxLevel</span>=<span class=\"string\">\"2\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorAccent\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:maxLevel</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorPrimary\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">level-list</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>minLevel，maxLevel分别指最小等级和最大等级，取值范围为<strong>0~10000</strong>，0为最小等级，同时也是默认值</p>\n<p>可通过Drawable的setLevel方法来设置等级大小，ImageView也可以通过setImageLevel来设置等级大小</p>\n<p><strong><font size=\"4sp\"><li><a href=\"https://developer.android.com/reference/android/graphics/drawable/TransitionDrawable\" target=\"_blank\" rel=\"noopener\">TransitionDrawable</a></li></font></strong></p>\n<p>TransitionDrawable可实现渐变效果</p>\n<p><em>bitmap_test.xml和activity_main.xml:</em></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/transition1\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:top</span>=<span class=\"string\">\"10dp\"</span> &gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@android:color/holo_red_dark\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/text_hello\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/bitmap_test\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>MainActivity：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextView textView=findViewById(R.id.text_hello);</span><br><span class=\"line\">TransitionDrawable drawable=(TransitionDrawable) textView.getBackground();</span><br><span class=\"line\">drawable.startTransition(<span class=\"number\">3000</span>);</span><br></pre></td></tr></table></figure>\n<p>其中item标签的主要属性top,start等和之前的一样都是偏移量，需要注意的是不论添加多少个item有效的都只是前两个</p>\n<p><strong><font size=\"4sp\"><li><a href=\"https://developer.android.com/reference/android/graphics/drawable/InsetDrawable\" target=\"_blank\" rel=\"noopener\">InsetDrawable</a></li></font></strong></p>\n<p>实现自身大小小于控件背景大小，通过layerDrawable也可以实现</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">inset</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:insetTop</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:insetBottom</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:insetLeft</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:insetRight</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/transition1\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"4sp\"><li><a href=\"https://developer.android.com/reference/android/graphics/drawable/ScaleDrawable\" target=\"_blank\" rel=\"noopener\">ScaleDrawable</a></li></font></strong></p>\n<p>根据设定的缩放等级实现按比例缩放</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scale</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:scaleWidth</span>=<span class=\"string\">\"90%\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:scaleHeight</span>=<span class=\"string\">\"90%\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:scaleGravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/drawable_test\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>需要在java代码中设置等级：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextView textView=findViewById(R.id.text_hello);</span><br><span class=\"line\">ScaleDrawable drawable=(ScaleDrawable)textView.getBackground();</span><br><span class=\"line\">drawable.setLevel(<span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>在ScaleDrawabel方法中的onBoundChange方法中有以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//MAX_LEVEL = 10000</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (mState.mScaleWidth &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> iw = min ? d.getIntrinsicWidth() : <span class=\"number\">0</span>;</span><br><span class=\"line\">    w -= (<span class=\"keyword\">int</span>) ((w - iw) * (MAX_LEVEL - level) * mState.mScaleWidth / MAX_LEVEL);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">int</span> h = bounds.height();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (mState.mScaleHeight &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ih = min ? d.getIntrinsicHeight() : <span class=\"number\">0</span>;</span><br><span class=\"line\">    h -= (<span class=\"keyword\">int</span>) ((h - ih) * (MAX_LEVEL - level) * mState.mScaleHeight / MAX_LEVEL);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由此可见<strong>level越大缩放程度就越低</strong>，而<strong>scaleWidth/scaleHeight越大则缩放程度越大</strong>，当level为10000即最大值时则不缩放</p>\n<p><strong><font size=\"4sp\"><li><a href=\"https://developer.android.com/reference/android/graphics/drawable/ClipDrawable\" target=\"_blank\" rel=\"noopener\">ClipDrawable</a></li></font></strong></p>\n<p>实现对图片的裁剪，由level决定裁剪大小，以下为gravity的属性值：</p>\n<p><img src=\"/img/Android/探索Drawable/ClipDrawable的gravity属性值.PNG\" alt=\"ClipDrawable的gravity属性值\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">clip</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:clipOrientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"bottom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/drawable_test\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>在java代码中设置level：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TextView textView=findViewById(R.id.text_hello);</span><br><span class=\"line\">ClipDrawable drawable=(ClipDrawable) textView.getBackground();</span><br><span class=\"line\">Log.d(TAG,<span class=\"string\">\"\"</span>+drawable.getIntrinsicWidth());</span><br><span class=\"line\">drawable.setLevel(<span class=\"number\">9000</span>);</span><br></pre></td></tr></table></figure>\n<p>其中<strong>level越小裁剪范围越大</strong>，内部规定等级范围为0~10000</p>\n","categories":["Android"],"tags":[]},{"title":"RemoteViews分析","url":"https://grooters.github.io/2018/12/17/RemoteViews分析/","content":"<p><font size=\"5sp\"><a href=\"https://developer.android.google.cn/reference/android/widget/RemoteViews\" target=\"_blank\" rel=\"noopener\">RemoteViews</a></font></p>\n<p>远程视图，通过该类可实现跨进程更新视图</p>\n<p><strong>RemoteViews(String packageName, int layoutId)</strong></p>\n<p><li> packageName</li></p>\n<p>当前进程包名，用于生成ApplicationInfo实例对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RemoteViews</span><span class=\"params\">(String packageName, <span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>(getApplicationInfo(packageName, UserHandle.myUserId()), layoutId);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在该构造方法中调用以下构造方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">RemoteViews</span><span class=\"params\">(ApplicationInfo application, <span class=\"keyword\">int</span> layoutId)</span> </span>&#123;</span><br><span class=\"line\">    mApplication = application;</span><br><span class=\"line\">    mLayoutId = layoutId;</span><br><span class=\"line\">    mBitmapCache = <span class=\"keyword\">new</span> BitmapCache();</span><br><span class=\"line\">    mClassCookies = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><li> layoutId</li></p>\n<p>通过该id让其它进程获取该进程的View：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">apply</span><span class=\"params\">(Context context, ViewGroup parent, OnClickHandler handler)</span> </span>&#123;</span><br><span class=\"line\">    RemoteViews rvToApply = getRemoteViewsToApply(context);</span><br><span class=\"line\">    View result = inflateView(context, rvToApply, parent);</span><br><span class=\"line\">    loadTransitionOverride(context, handler);</span><br><span class=\"line\">    rvToApply.performApply(result, parent, handler);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>先获得RemoteViews，然后调用inflateView方法获取视图View，inflateView方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> View <span class=\"title\">inflateView</span><span class=\"params\">(Context context, RemoteViews rv, ViewGroup parent)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// RemoteViews may be built by an application installed in another</span></span><br><span class=\"line\">    <span class=\"comment\">// user. So build a context that loads resources from that user but</span></span><br><span class=\"line\">    <span class=\"comment\">// still returns the current users userId so settings like data / time formats</span></span><br><span class=\"line\">    <span class=\"comment\">// are loaded without requiring cross user persmissions.</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Context contextForResources = getContextForResources(context);</span><br><span class=\"line\">    Context inflationContext = <span class=\"keyword\">new</span> RemoteViewsContextWrapper(context, contextForResources);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If mApplyThemeResId is not given, Theme.DeviceDefault will be used.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mApplyThemeResId != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        inflationContext = <span class=\"keyword\">new</span> ContextThemeWrapper(inflationContext, mApplyThemeResId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LayoutInflater inflater = (LayoutInflater)</span><br><span class=\"line\">            context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Clone inflater so we load resources from correct context and</span></span><br><span class=\"line\">    <span class=\"comment\">// we don't add a filter to the static version returned by getSystemService.</span></span><br><span class=\"line\">    inflater = inflater.cloneInContext(inflationContext);</span><br><span class=\"line\">    inflater.setFilter(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    View v = inflater.inflate(rv.getLayoutId(), parent, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">    v.setTagInternal(R.id.widget_frame, rv.getLayoutId());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过getLayoutId()获取layoutId：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLayoutId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mLayoutId;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在RemoteViews中的apply方法中有一个performApply方法，该方法源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">performApply</span><span class=\"params\">(View v, ViewGroup parent, OnClickHandler handler)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mActions != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        handler = handler == <span class=\"keyword\">null</span> ? DEFAULT_ON_CLICK_HANDLER : handler;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> count = mActions.size();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            Action a = mActions.get(i);</span><br><span class=\"line\">            a.apply(v, parent, handler);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法会遍历每一个Action并调用对应action的apply方法，对View进行更新处理，而该apply方法是属于Action类的抽象方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(View root, ViewGroup rootParent,OnClickHandler handler)</span> <span class=\"keyword\">throws</span> ActionException</span>;</span><br></pre></td></tr></table></figure>\n<p>而该Action有很多用于操作View的子类，例如操作Text的ReflectionAction类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setTextViewText</span><span class=\"params\">(<span class=\"keyword\">int</span> viewId, CharSequence text)</span> </span>&#123;</span><br><span class=\"line\">    setCharSequence(viewId, <span class=\"string\">\"setText\"</span>, text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCharSequence</span><span class=\"params\">(<span class=\"keyword\">int</span> viewId, String methodName, CharSequence value)</span> </span>&#123;</span><br><span class=\"line\">    addAction(<span class=\"keyword\">new</span> ReflectionAction(viewId, methodName, ReflectionAction.CHAR_SEQUENCE, value));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>viewId为视图（根据layoutId得出的）中的具体控件id，methodName为方法名（这里是setText），text为要设置的内容，addAction表明每进行一次对远程视图的操作都会封装成一个Action并添加到一个Action容器中，每一个操作都是一个Action的子类，该子类重写了Action的apply方法，并在内部通过反射机制调用View的具体方法，如setText。</p>\n<p><strong><font size=\"4sp\">通过RemoteViews更新不同线程的UI例子</font></strong></p>\n<p><em>MainActivity.class:</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,RemoteActivity.class);</span><br><span class=\"line\">        startActivity(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">notifyRemote</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        RemoteViews remoteViews=<span class=\"keyword\">new</span> RemoteViews(getPackageName(),R.layout.view_notification);</span><br><span class=\"line\">        remoteViews.setTextViewText(R.id.text_notify_custom,<span class=\"string\">\"remote\"</span>);</span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"string\">\"ACTION_NOTIFY_REMOTE_ACTIVITY\"</span>);</span><br><span class=\"line\">        intent.putExtra(<span class=\"string\">\"REMOTE_VIEWS\"</span>,remoteViews);</span><br><span class=\"line\">        sendBroadcast(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStop</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStop();</span><br><span class=\"line\">        notifyRemote();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>RemoteActivity.class:</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.grooters.fifth;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.BroadcastReceiver;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.IntentFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.LinearLayout;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.RemoteViews;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by 李林浪 in 2018/12/17</span></span><br><span class=\"line\"><span class=\"comment\"> * Elegant Code...</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">\"RemoteActivity_debug\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LinearLayout content;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_remote);</span><br><span class=\"line\">        initView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BroadcastReceiver receiver=<span class=\"keyword\">new</span> BroadcastReceiver() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">            Log.d(TAG,<span class=\"string\">\"onReceive\"</span>);</span><br><span class=\"line\">            RemoteViews remoteViews=intent.getParcelableExtra(<span class=\"string\">\"REMOTE_VIEWS\"</span>);</span><br><span class=\"line\">            updateUI(remoteViews);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateUI</span><span class=\"params\">(RemoteViews remoteViews)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(remoteViews!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            Log.d(TAG,<span class=\"string\">\"remoteViews!=null\"</span>);</span><br><span class=\"line\">            View view=remoteViews.apply(<span class=\"keyword\">this</span>,content);</span><br><span class=\"line\">            content.addView(view);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        IntentFilter filter=<span class=\"keyword\">new</span> IntentFilter(<span class=\"string\">\"ACTION_NOTIFY_REMOTE_ACTIVITY\"</span>);</span><br><span class=\"line\">        registerReceiver(receiver,filter);</span><br><span class=\"line\">        content=findViewById(R.id.linear_content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        unregisterReceiver(receiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>AndroidManifest.xml:</em><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".RemoteActivity\"</span>  <span class=\"attr\">android:process</span>=<span class=\"string\">\":remote\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>其它RemoteViews的使用还有通知和桌面小部件，具体使用参照：</p>\n<p><a href=\"https://grooters.github.io/2018/12/16/Android%E6%A1%8C%E9%9D%A2%E5%B0%8F%E9%83%A8%E4%BB%B6/\">Android桌面小部件</a></p>\n<p><a href=\"https://grooters.github.io/2018/12/16/%E9%80%9A%E7%9F%A5%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%9F%A5/\">通知与自定义通知</a></p>\n","categories":["Android"],"tags":[]},{"title":"Android桌面小部件","url":"https://grooters.github.io/2018/12/16/Android桌面小部件/","content":"<p><strong><font size=\"4sp\">小部件创建步骤</font></strong></p>\n<p><strong><li> 小部件布局</li></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/butt_click\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"小部件\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong><li> 小部件配置文件</li></strong></p>\n<p>在res-xml资源目录下创建配置文件widget_app.xml:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">appwidget-provider</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:initialKeyguardLayout</span>=<span class=\"string\">\"@layout/widget\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:minHeight</span>=<span class=\"string\">\"84dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:minWidth</span>=<span class=\"string\">\"84dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:updatePeriodMillis</span>=<span class=\"string\">\"86400000\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">appwidget-provider</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong><li> 小部件实现类</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.grooters.fifth;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.PendingIntent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.appwidget.AppWidgetManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.RemoteViews;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by 李林浪 in 2018/12/16</span></span><br><span class=\"line\"><span class=\"comment\"> * Elegant Code...</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppWidgetProvider</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">appwidget</span>.<span class=\"title\">AppWidgetProvider</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String CLICK_ACTION=<span class=\"string\">\"click\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">\"AppWidgetProvider_debug\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onReceive(context, intent);</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"onReceive\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(intent.getAction().equals(CLICK_ACTION))&#123;</span><br><span class=\"line\">            Log.d(TAG,<span class=\"string\">\"intent.getAction().equals(CLICK_ACTION)\"</span>);</span><br><span class=\"line\">            Toast.makeText(context,<span class=\"string\">\"你点击了小部件\"</span>,Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onUpdate</span><span class=\"params\">(Context context, AppWidgetManager appWidgetManager, <span class=\"keyword\">int</span>[] appWidgetIds)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onUpdate(context, appWidgetManager, appWidgetIds);</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"onUpdate\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> appWidgetId:appWidgetIds)&#123;</span><br><span class=\"line\">            updateWidget(context,appWidgetManager,appWidgetId);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateWidget</span><span class=\"params\">(Context context,AppWidgetManager manager,<span class=\"keyword\">int</span> appWidgetId)</span></span>&#123;</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"updateWidget\"</span>);</span><br><span class=\"line\">        RemoteViews remoteViews=<span class=\"keyword\">new</span> RemoteViews(context.getPackageName(),R.layout.widget);</span><br><span class=\"line\">        Intent intent=<span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">        intent.setAction(CLICK_ACTION);</span><br><span class=\"line\">        intent.setClass(context,AppWidgetProvider.class);</span><br><span class=\"line\">        PendingIntent pendingIntent=PendingIntent.getBroadcast(context,<span class=\"number\">0</span>,intent,<span class=\"number\">0</span>);</span><br><span class=\"line\">        remoteViews.setOnClickPendingIntent(R.id.butt_click,pendingIntent);</span><br><span class=\"line\">        manager.updateAppWidget(appWidgetId,remoteViews);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>intent.setClass(context,AppWidgetProvider.class);</strong>必须要有，否则无法接收到该广播</p>\n<p><strong><li> 声明小部件</li></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".AppWidgetProvider\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.appwidget.provider\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/widget_app\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"click\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.appwidget.action.APPWIDGET_UPDATE\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>action android:name=”click” 是自己定义的点击动作<br>action android:name=”android.appwidget.action.APPWIDGET_UPDATE”是指定该receiver为小部件</p>\n<p><strong><font size=\"4sp\">AppWidgetProvider</font></strong></p>\n<p><strong><li> onEnable</li></strong></p>\n<p>当小部件第一次添加到桌面时会调用该方法</p>\n<p><strong><li> onUpdate</li></strong></p>\n<p>小部件被添加时或者每次更新时都会调用该方法</p>\n<p><strong><li> onDeleted</li></strong></p>\n<p>每删除一次桌面小部件就调用一次该方法</p>\n<p><strong><li> onDisabled</li></strong></p>\n<p>当<strong>最后一个</strong>该类型的桌面小部件被删除时调用该方法</p>\n","categories":["Android"],"tags":[]},{"title":"通知与自定义通知","url":"https://grooters.github.io/2018/12/16/通知与自定义通知/","content":"<blockquote>\n<p>奥利奥添加了通知渠道</p>\n</blockquote>\n<h1 id=\"系统默认通知\"><a href=\"#系统默认通知\" class=\"headerlink\" title=\"系统默认通知\"></a>系统默认通知</h1><p><li> <a href=\"https://developer.android.google.cn/reference/android/app/Notification\" target=\"_blank\" rel=\"noopener\">Notification</a></li></p>\n<p><li> <a href=\"https://developer.android.google.cn/reference/android/app/NotificationManager\" target=\"_blank\" rel=\"noopener\">NotificationManager</a></li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String CHANNEL_ID=<span class=\"string\">\"channelId_1\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String CHANNEL_NAME=<span class=\"string\">\"channelName_1\"</span>;</span><br><span class=\"line\">NotificationCompat.Builder builder=<span class=\"keyword\">new</span> NotificationCompat.Builder(<span class=\"keyword\">this</span>,channelId);</span><br><span class=\"line\">Notification notification=builder</span><br><span class=\"line\">                            .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">                            .setWhen(System.currentTimeMillis())</span><br><span class=\"line\">                            .setContentTitle(<span class=\"string\">\"title\"</span>)</span><br><span class=\"line\">                            .setContentText(<span class=\"string\">\"content\"</span>)</span><br><span class=\"line\">                            .setCustomContentView(remoteViews)</span><br><span class=\"line\">                            .setChannelId(channelId)</span><br><span class=\"line\">                            .build();</span><br><span class=\"line\">NotificationManager manager= (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);</span><br><span class=\"line\">manager.createNotificationChannel(<span class=\"keyword\">new</span> NotificationChannel(channelId,channelName,NotificationManager.IMPORTANCE_DEFAULT));</span><br><span class=\"line\">manager.notify(<span class=\"number\">0</span>,notification);</span><br></pre></td></tr></table></figure>\n<p>在Android Version &gt;= 26时需要加入渠道，否则无法弹出通知：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">manager.createNotificationChannel(<span class=\"keyword\">new</span> NotificationChannel(channelId,channelName,NotificationManager.IMPORTANCE_DEFAULT));</span><br></pre></td></tr></table></figure>\n<p><br></p>\n<blockquote>\n<p>NotificationChannel(String id, CharSequence name, int importance)</p>\n</blockquote>\n<p>id为渠道Id，name为渠道名称，importance为通知优先级，分为以下几个：</p>\n<ol>\n<li>IMPORTANCE_UNSPECIFIED</li>\n<li>IMPORTANCE_NONE</li>\n<li>IMPORTANCE_MIN</li>\n<li>IMPORTANCE_LOW</li>\n<li>IMPORTANCE_DEFAULT</li>\n<li>IMPORTANCE_HIGH</li>\n</ol>\n<p>当创建不同渠道的通知时会将通知如下分类：</p>\n<p><img src=\"/img/Android/通知与自定义通知/通道.jpg\" alt=\"渠道\"></p>\n<blockquote>\n<p>public void notify (int id, Notification notification)</p>\n</blockquote>\n<p>id为通知ID，是该app中该通知的唯一标识，即id相同则代表同一个通知，不弹出新通知</p>\n<p>对于其它丰富通知功能的方法，参照<a href=\"https://developer.android.google.cn/reference/android/app/Notification.Builder\" target=\"_blank\" rel=\"noopener\">Notification.Builder</a>中的方法</p>\n<h1 id=\"自定义通知\"><a href=\"#自定义通知\" class=\"headerlink\" title=\"自定义通知\"></a>自定义通知</h1><p><li> <a href=\"https://developer.android.google.cn/reference/android/widget/RemoteViews\" target=\"_blank\" rel=\"noopener\">RemoteViews</a></li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RemoteViews remoteViews=<span class=\"keyword\">new</span> RemoteViews(getPackageName(),R.layout.view_notification);</span><br><span class=\"line\">remoteViews.setTextColor(R.id.text_notify_custom,getResources().getColor(R.color.colorAccent,<span class=\"keyword\">null</span>));</span><br><span class=\"line\">PendingIntent pendingIntent=PendingIntent.getActivity(<span class=\"keyword\">this</span>,<span class=\"number\">0</span>,<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,TestActivity.class),PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class=\"line\">remoteViews.setOnClickPendingIntent(R.id.butt_notify_custom,pendingIntent);</span><br><span class=\"line\">Notification notification=builder</span><br><span class=\"line\">                            .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class=\"line\">                            .setWhen(System.currentTimeMillis())</span><br><span class=\"line\">                            .setContentTitle(<span class=\"string\">\"title\"</span>)</span><br><span class=\"line\">                            .setContentText(<span class=\"string\">\"content\"</span>)</span><br><span class=\"line\">                            .setCustomContentView(remoteViews)</span><br><span class=\"line\">                            .setChannelId(channelId)</span><br><span class=\"line\">                            .build();</span><br></pre></td></tr></table></figure>\n<p><strong>setCustomContentView(remoteViews)</strong></p>\n<p><em>view_notification.xml：</em><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"80dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/butt_notify_custom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"跳转\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/text_notify_custom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:text</span>=<span class=\"string\">\"自定义通知\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><p><li> 这里有一个大坑，那就是自定义通知视图的布局不能是<strong>约束布局</strong>，否则报错!!!</li></p>\n<p><li> Android 8.0及以上的操作系统需要添加通知渠道才能弹出通知否则无效！</li></p>\n","categories":["Android"],"tags":[]},{"title":"Retrofit的使用","url":"https://grooters.github.io/2018/12/12/Retrofit的使用/","content":"<p>Retrofit是一个基于okhttp，通过注解配置请求参数，支持图片链接和上传，支持同步异步和RxJava的请求框架</p>\n<p>Retrofit的使用步骤：</p>\n<ol>\n<li>创建Retrofit实例</li>\n<li>根据Retrofit对象获得接口请求类</li>\n<li>调用对应的请求方法，获取返回的Call</li>\n<li>通过call调用enqueue处理结果</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'io.reactivex.rxjava2:rxjava:2.1.0'</span></span><br><span class=\"line\">implementation <span class=\"string\">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></span><br><span class=\"line\">implementation <span class=\"string\">'com.squareup.retrofit2:retrofit:2.4.0'</span></span><br><span class=\"line\">implementation <span class=\"string\">'com.squareup.okhttp3:okhttp:3.11.0'</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Api</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"top250\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Call&lt;ResponseBody&gt; <span class=\"title\">getTop250</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Call&lt;ResponseBody&gt; call= <span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">         .baseUrl(<span class=\"string\">\"https://api.douban.com/v2/movie/\"</span>)</span><br><span class=\"line\">         .build()</span><br><span class=\"line\">         .create(Api.class)</span><br><span class=\"line\">         .getTop250();</span><br><span class=\"line\">call.enqueue(<span class=\"keyword\">new</span> Callback&lt;ResponseBody&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;ResponseBody&gt; call, Response&lt;ResponseBody&gt; response)</span> </span>&#123;</span><br><span class=\"line\">      Log.d(TAG,<span class=\"string\">\"json:\"</span>+reponse.body().string());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</span><br><span class=\"line\">      Log.d(TAG,<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><li> addConverterFactory</li></p>\n<p>添加Json解析器，可以将Json数据映射为Java对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Api</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GET</span>(<span class=\"string\">\"top250\"</span>)</span><br><span class=\"line\">    <span class=\"function\">Call&lt;MovieBean&gt; <span class=\"title\">getTop250</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Call&lt;MovieBean&gt; call= <span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">         .baseUrl(<span class=\"string\">\"https://api.douban.com/v2/movie/\"</span>)</span><br><span class=\"line\">         .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">         .build()</span><br><span class=\"line\">call.enqueue(<span class=\"keyword\">new</span> Callback&lt;MovieBean&gt;() &#123;</span><br><span class=\"line\">         <span class=\"meta\">@Override</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(Call&lt;MovieBean&gt; call, Response&lt;MovieBean&gt; response)</span> </span>&#123;</span><br><span class=\"line\">           Log.d(TAG,<span class=\"string\">\"json:\"</span>+reponse.body().getName());</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"meta\">@Override</span></span><br><span class=\"line\">         <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(Call&lt;ResponseBody&gt; call, Throwable t)</span> </span>&#123;</span><br><span class=\"line\">           Log.d(TAG,<span class=\"string\">\"error\"</span>);</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>其中MovieBean是要解析成的java对象</p>\n<p>Gson解析器需要添加依赖</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'com.squareup.retrofit2:converter-gson:2.4.0'</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/Android/Retrofit的使用/Json解析器.PNG\" alt=\"Json解析器\"></p>\n<h1 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"top250\"</span>)</span><br><span class=\"line\"><span class=\"function\">Call&lt;ResponseBody&gt; <span class=\"title\">getTop250</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>将访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.douban.com/v2/movie/top250</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"top250/&#123;action&#125;\"</span>)</span><br><span class=\"line\"><span class=\"function\">Call&lt;ResponseBody&gt; <span class=\"title\">getTop250</span><span class=\"params\">(@path(<span class=\"string\">\"action\"</span>)</span>String action)</span>;</span><br></pre></td></tr></table></figure>\n<p>url中的{action}将会被参数action代替</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"top250\"</span>)</span><br><span class=\"line\"><span class=\"function\">Call&lt;ResponseBody&gt; <span class=\"title\">getTop250</span><span class=\"params\">(@Query(<span class=\"string\">\"start\"</span>)</span>String start,<span class=\"params\">(@Query(<span class=\"string\">\"count\"</span>)</span>String count)</span>;</span><br></pre></td></tr></table></figure>\n<p>使用方法：</p>\n<p>getTop(1,30)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GET</span>(<span class=\"string\">\"top250\"</span>)</span><br><span class=\"line\"><span class=\"function\">Call&lt;ResponseBody&gt; <span class=\"title\">getTop250</span><span class=\"params\">(@QueryMap Map&lt;String,String&gt; map)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>使用方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.put(<span class=\"string\">\"start\"</span>,<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">\"count\"</span>,<span class=\"string\">\"30\"</span>);</span><br><span class=\"line\">getTop250(map);</span><br></pre></td></tr></table></figure>\n<p>将访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://api.douban.com/v2/movie/top250?start=1&amp;count=30</span><br></pre></td></tr></table></figure>\n<h1 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FormUrlEncoded</span></span><br><span class=\"line\"><span class=\"meta\">@POST</span>(<span class=\"string\">\"top250\"</span>)</span><br><span class=\"line\"><span class=\"function\">Call&lt;ResponseBody&gt; <span class=\"title\">getTop250</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<p>传参：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FormUrlEncoded</span></span><br><span class=\"line\"><span class=\"meta\">@POST</span>(<span class=\"string\">\"top250\"</span>)</span><br><span class=\"line\"><span class=\"function\">Call&lt;ResponseBody&gt; <span class=\"title\">getTop250</span><span class=\"params\">(@Field(<span class=\"string\">\"start\"</span>)</span>String start,@<span class=\"title\">Field</span><span class=\"params\">(<span class=\"string\">\"count\"</span>)</span>String count)</span>;</span><br></pre></td></tr></table></figure>\n<p>其中Field类似于Query</p>\n<p>传一个body对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FormUrlEncoded</span></span><br><span class=\"line\"><span class=\"meta\">@POST</span>(<span class=\"string\">\"top250\"</span>)</span><br><span class=\"line\"><span class=\"function\">Call&lt;ResponseBody&gt; <span class=\"title\">getTop250</span><span class=\"params\">(@Body MovieBean body)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>替换Url中的参数@path与GET请求相同</p>\n<h1 id=\"结合RxJava\"><a href=\"#结合RxJava\" class=\"headerlink\" title=\"结合RxJava\"></a>结合RxJava</h1><p>添加支持RxJava的依赖：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"string\">'com.squareup.retrofit2:adapter-rxjava2:2.4.0'</span></span><br></pre></td></tr></table></figure>\n<p>添加该依赖后可获得RxJava2CallAdapterFactory类，通过addCallAdapterFactory方法可使Retrofit支持RxJava</p>\n<p>需要将Api.class中的<strong>Call</strong><moviebean> getTop250();更改为<strong>Observable</strong><moviebean> getTop250()</moviebean></moviebean></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Retrofit.Builder()</span><br><span class=\"line\">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">        .baseUrl(<span class=\"string\">\"https://api.douban.com/v2/movie/\"</span>)</span><br><span class=\"line\">        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class=\"line\">        .build()</span><br><span class=\"line\">        .create(Api.class)</span><br><span class=\"line\">        .getTop250()</span><br><span class=\"line\">        .subscribeOn(Schedulers.io())</span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">        .subscribe(<span class=\"keyword\">new</span> Observer&lt;ResponseBody&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(ResponseBody responseBody)</span> </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;&#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"探索自定义View","url":"https://grooters.github.io/2018/12/07/探索自定义View/","content":"<h1 id=\"Paint\"><a href=\"#Paint\" class=\"headerlink\" title=\"Paint\"></a><a href=\"https://developer.android.google.cn/reference/android/graphics/Paint\" target=\"_blank\" rel=\"noopener\">Paint</a></h1><p><li> 构造函数</li></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Paint()</span><br><span class=\"line\"></span><br><span class=\"line\">Paint(int flags)</span><br><span class=\"line\"></span><br><span class=\"line\">Paint(Paint paint)</span><br></pre></td></tr></table></figure>\n<p>flags包括： <strong>ANTI_ALIAS_FLAG</strong> （使用抗锯齿功能），其它常量请查阅API</p>\n<p><li> 主要方法</li></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setFlags (int flags)</span><br><span class=\"line\"></span><br><span class=\"line\">setStrokeWidth (float width)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setStyle (Paint.Style style)</span><br></pre></td></tr></table></figure>\n<p>设置View的风格，比如有无边框，<a href=\"https://developer.android.google.cn/reference/android/graphics/Paint.Style\" target=\"_blank\" rel=\"noopener\">Paint.Style</a>值为：FILL（颜色填充），FILL_AND_STROKE（颜色填充且有边框），STROKE（有边框）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setStrokeCap (Paint.Cap cap)</span><br></pre></td></tr></table></figure>\n<p>参数可为：<strong>Paint.Cap.BUTT</strong>，<strong>Paint.CapL.ROUND</strong>和<strong>Paint.Cap.SQUARE</strong></p>\n<p><strong><font size=\"4sp\">我的第一个自定义View：</font></strong></p>\n<p><em>自定义布局：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLayouTer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">\"MyLayouTer\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> totalWidth,totalHeight;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> marginSpace;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLayouTer</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLayouTer</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        marginSpace=<span class=\"number\">50</span>;</span><br><span class=\"line\">        totalWidth=<span class=\"number\">0</span>;</span><br><span class=\"line\">        totalHeight=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"getChildCount():\"</span>+getChildCount());</span><br><span class=\"line\">        View view;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;getChildCount();i++)&#123;</span><br><span class=\"line\">            view=getChildAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> width=view.getMeasuredWidth();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> height=view.getMeasuredHeight();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mLeft=marginSpace;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mTop=marginSpace;</span><br><span class=\"line\">            totalHeight=totalHeight+height;</span><br><span class=\"line\">            totalWidth=totalWidth+width;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(getMeasuredWidth()&lt;totalWidth)&#123;</span><br><span class=\"line\">                mTop=mTop+height;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mLeft=mLeft+width;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            view.layout(mLeft,mTop,mLeft+width,mTop+height);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;getChildCount();i++)&#123;</span><br><span class=\"line\">            View view=getChildAt(i);</span><br><span class=\"line\">            measureChild(view,widthMeasureSpec,heightMeasureSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>自定义View1：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVieWer</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">\"MyVieWer\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyVieWer</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyVieWer</span><span class=\"params\">(Context context,AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSize=MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthMode=MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSize=MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightMode=MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(widthMode==MeasureSpec.AT_MOST&amp;&amp;heightMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">500</span>,<span class=\"number\">800</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(widthMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">700</span>,heightSize);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">            setMeasuredDimension(widthSize,<span class=\"number\">800</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(widthMode==MeasureSpec.UNSPECIFIED)&#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">800</span>,<span class=\"number\">800</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>自定义View2：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCircle</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">\"MyCircle\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCircle</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCircle</span><span class=\"params\">(Context context,AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        mPaint=<span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\">        TypedArray array=context.obtainStyledAttributes(attrs,R.styleable.MyCircle);</span><br><span class=\"line\">        mColor=array.getColor(R.styleable.MyCircle_circle_color, Color.GREEN);</span><br><span class=\"line\">        array.recycle();</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        mPaint.setColor(mColor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyCircle</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSize=MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthMode=MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSize=MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightMode=MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(widthMode==MeasureSpec.AT_MOST&amp;&amp;heightMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">500</span>,<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(widthMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">500</span>,heightSize);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(heightMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">            setMeasuredDimension(widthSize,<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> top, <span class=\"keyword\">int</span> right, <span class=\"keyword\">int</span> bottom)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onLayout(changed, left, top, right, bottom);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> paddingStart=getPaddingStart();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> paddingEnd=getPaddingEnd();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> paddingTop=getPaddingTop();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> paddingBottom=getPaddingBottom();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width=getWidth()-paddingStart-paddingEnd;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height=getHeight()-paddingTop-paddingBottom;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r=Math.min(width,height)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        canvas.drawCircle(paddingStart+width/<span class=\"number\">2</span>,paddingTop+height/<span class=\"number\">2</span>,r,mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.ConstraintLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">io.github.grooters.practicer.viewer.MyLayouTer</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">io.github.grooters.practicer.viewer.MyVieWer</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_my\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/holo_red_dark\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">io.github.grooters.practicer.viewer.MyVieWer</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_my_Two\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/black\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">io.github.grooters.practicer.viewer.MyCircle</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingStart</span>=<span class=\"string\">\"30dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingEnd</span>=<span class=\"string\">\"30dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingTop</span>=<span class=\"string\">\"20dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:paddingBottom</span>=<span class=\"string\">\"20dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_marginStart</span>=<span class=\"string\">\"20dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/holo_red_dark\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">io.github.grooters.practicer.viewer.MyLayouTer</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由上可知自定义控件主要在onMeasure，onLayout和onDraw方法上实现。</p>\n<p>在自定义布局中的onMeasure中测量出每个子View的测量宽高，然后在onLayout上确定子View的位置最后调用子View的layout方法通知子View应该在布局的哪个地方。</p>\n<p>在自定义View中的onMeasure方法中先根据xml中的宽高设定设置控件的测量宽高，然后在onDraw方法中将自己绘制到布局上</p>\n","categories":["Android"],"tags":[]},{"title":"View的工作原理","url":"https://grooters.github.io/2018/12/05/View的工作原理/","content":"<h1 id=\"View的测量\"><a href=\"#View的测量\" class=\"headerlink\" title=\"View的测量\"></a>View的测量</h1><p><strong><font size=\"4sp\">MeasureSpec</font></strong></p>\n<p><strong><li> UNSPECIFIED</li></strong></p>\n<p><strong><li> EXACTLY</li></strong></p>\n<p>父容器已经检测出View所需要的精确大小，此时View的最终大小即为SpecSize所指定的值。</p>\n<blockquote>\n<p>对应于LayoutParam中的<strong>match_parent</strong>和<strong>具体的数值</strong>这两种模式</p>\n</blockquote>\n<p><strong><li> AT_MOST</li></strong></p>\n<p>父容器指定了一个可用大小即SpecSize，View的大小不能大于该值，而具体是什么值还需要看不同View的不同实现。</p>\n<blockquote>\n<p>对应于LayoutParam中的wrap_content</p>\n</blockquote>\n<p><em>从以下代码可看出：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getChildMeasureSpec</span><span class=\"params\">(<span class=\"keyword\">int</span> spec, <span class=\"keyword\">int</span> padding, <span class=\"keyword\">int</span> childDimension)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(spec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(spec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = Math.max(<span class=\"number\">0</span>, specSize - padding);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> resultSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> resultMode = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Parent has imposed an exact size on us</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            resultSize = childDimension;</span><br><span class=\"line\">            resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child wants to be our size. So be it.</span></span><br><span class=\"line\">            resultSize = size;</span><br><span class=\"line\">            resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child wants to determine its own size. It can't be</span></span><br><span class=\"line\">            <span class=\"comment\">// bigger than us.</span></span><br><span class=\"line\">            resultSize = size;</span><br><span class=\"line\">            resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Parent has imposed a maximum size on us</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child wants a specific size... so be it</span></span><br><span class=\"line\">            resultSize = childDimension;</span><br><span class=\"line\">            resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child wants to be our size, but our size is not fixed.</span></span><br><span class=\"line\">            <span class=\"comment\">// Constrain child to not be bigger than us.</span></span><br><span class=\"line\">            resultSize = size;</span><br><span class=\"line\">            resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child wants to determine its own size. It can't be</span></span><br><span class=\"line\">            <span class=\"comment\">// bigger than us.</span></span><br><span class=\"line\">            resultSize = size;</span><br><span class=\"line\">            resultMode = MeasureSpec.AT_MOST;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Parent asked to see how big we want to be</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childDimension &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child wants a specific size... let him have it</span></span><br><span class=\"line\">            resultSize = childDimension;</span><br><span class=\"line\">            resultMode = MeasureSpec.EXACTLY;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.MATCH_PARENT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child wants to be our size... find out how big it should</span></span><br><span class=\"line\">            <span class=\"comment\">// be</span></span><br><span class=\"line\">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</span><br><span class=\"line\">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (childDimension == LayoutParams.WRAP_CONTENT) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Child wants to determine its own size.... find out how</span></span><br><span class=\"line\">            <span class=\"comment\">// big it should be</span></span><br><span class=\"line\">            resultSize = View.sUseZeroUnspecifiedMeasureSpec ? <span class=\"number\">0</span> : size;</span><br><span class=\"line\">            resultMode = MeasureSpec.UNSPECIFIED;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//noinspection ResourceType</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> MeasureSpec.makeMeasureSpec(resultSize, resultMode);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>getChildMeasureSpec在measureChild和measureChildWithMargins会被用到：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">measureChild</span> <span class=\"params\">(View child, <span class=\"keyword\">int</span> parentWidthMeasureSpec,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">       <span class=\"keyword\">int</span> parentHeightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">final</span> LayoutParams lp = child.getLayoutParams();</span><br><span class=\"line\">   <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidthMeasureSpec = getChildMeasureSpec(parentWidthMeasureSpec,</span><br><span class=\"line\">           mPaddingLeft + mPaddingRight, lp. width);</span><br><span class=\"line\">   <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childHeightMeasureSpec = getChildMeasureSpec(parentHeightMeasureSpec,</span><br><span class=\"line\">           mPaddingTop + mPaddingBottom, lp. height);</span><br><span class=\"line\">   child.measure(childWidthMeasureSpec, childHeightMeasureSpec);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由上可知父控件会根据其MeasureSpec和子控件的LayoutParam获得子控件的MeasureSpec，最后调用子控件的measure方法并将子控件的MeasureSpec传过去。</p>\n<p><em>在measure方法中会调用onMeasure方法：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//View.java</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">    setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">            getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">getDefaultSize</span><span class=\"params\">(<span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> measureSpec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> specMode = MeasureSpec.getMode(measureSpec);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> specSize = MeasureSpec.getSize(measureSpec);</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (specMode) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.UNSPECIFIED:</span><br><span class=\"line\">        result = size;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.AT_MOST:</span><br><span class=\"line\">    <span class=\"keyword\">case</span> MeasureSpec.EXACTLY:</span><br><span class=\"line\">        result = specSize;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在onMeasure方法中设置了View的测量宽高，而宽高又通过getDefaultSize方法获得。</p>\n<p>根据如下图可得出结论：</p>\n<p><img src=\"/img/Android/View的工作原理/普通View的MeasureSpec的创建规则.jpg\" alt=\"普通View的MeasureSpec的创建规则\"></p>\n<blockquote>\n<p>直接继承View的自定义控件需要重写onMeasure并设置wrap_content时的自身大小，否则在布局中使用wrap_content就相当于使用match_content</p>\n</blockquote>\n<p><em>example：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyVieWer</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">\"MyVieWer\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyVieWer</span><span class=\"params\">(Context context)</span> </span>&#123;<span class=\"keyword\">super</span>(context);&#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyVieWer</span><span class=\"params\">(Context context,AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"MeasureSpec.AT_MOST:\"</span>+MeasureSpec.AT_MOST+<span class=\"string\">\" MeasureSpec.EXACTLY:\"</span>+MeasureSpec.EXACTLY+<span class=\"string\">\" MeasureSpec.UNSPECIFIED:\"</span>+MeasureSpec.UNSPECIFIED);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSize=MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthMode=MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSize=MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightMode=MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"widthSize:\"</span>+widthSize+<span class=\"string\">\" widthMode:\"</span>+widthMode+<span class=\"string\">\" heightSize:\"</span>+heightSize+<span class=\"string\">\" heightMode:\"</span>+heightMode);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(widthMode==MeasureSpec.AT_MOST&amp;&amp;heightMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">            Log.d(TAG,<span class=\"string\">\"widthMode==MeasureSpec.AT_MOST&amp;&amp;heightMode==MeasureSpec.AT_MOST\"</span>);</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">500</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(widthMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">            Log.d(TAG,<span class=\"string\">\"widthMode==MeasureSpec.AT_MOST\"</span>);</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">500</span>,heightSize);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightMode==MeasureSpec.AT_MOST)&#123;</span><br><span class=\"line\">            Log.d(TAG,<span class=\"string\">\"heightMode==MeasureSpec.AT_MOST\"</span>);</span><br><span class=\"line\">            setMeasuredDimension(widthSize,<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(widthMode==MeasureSpec.UNSPECIFIED)&#123;</span><br><span class=\"line\">            Log.d(TAG,<span class=\"string\">\"widthMode==MeasureSpec.UNSPECIFIED\"</span>);</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">1000</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;io.github.grooters.practicer.viewer.MyVieWer</span><br><span class=\"line\">    android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">    android:background=<span class=\"string\">\"@android:color/holo_red_dark\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyVieWer: MeasureSpec.AT_MOST:-2147483648 MeasureSpec.EXACTLY:1073741824 MeasureSpec.UNSPECIFIED:0</span><br></pre></td></tr></table></figure>\n<p>当layout_width和layout_height均为wrap_content：</p>\n<blockquote>\n<p>MyVieWer: widthSize:1440 widthMode:-2147483648 heightSize:2096 heightMode:-2147483648<br><br><br>MyVieWer: widthMode==MeasureSpec.AT_MOST&amp;&amp;heightMode==MeasureSpec.AT_MOST</p>\n</blockquote>\n<p>当layout_width为wrap_content,layout_height为match_parent：</p>\n<blockquote>\n<p>MyVieWer: widthSize:1440 widthMode:-2147483648 heightSize:2096 heightMode:1073741824<br><br><br>MyVieWer: widthMode==MeasureSpec.AT_MOST</p>\n</blockquote>\n<p>当layout_width为wrap_content,layout_height为具体值：</p>\n<blockquote>\n<p>MyVieWer: widthSize:1440 widthMode:-2147483648 heightSize:2000 heightMode:1073741824<br><br><br>MyVieWer: widthMode==MeasureSpec.AT_MOST</p>\n</blockquote>\n<p>由上可知当layout_width/height设置为<strong>wrap_content</strong>时mode为<strong>AT_MOST</strong>，并且默认为占满整个父容器。当设置为<strong>match_parent</strong>或<strong>具体值</strong>时mode将为<strong>EXACTLY</strong>。所以自定义View如果要使用wrap_content属性需要在onMeasure方法中作相应处理否则等同于match_parent</p>\n<p>注意：由于View的测量过程与Activity的生命周期并不统一，所以在onCreate，onStart等方法无法通过getMeasuredHeight/Width方法获取View的高宽度，可通过以下三种方法获取：</p>\n<p><li> onWindowFocusChanged</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onWindowFocusChanged</span><span class=\"params\">(<span class=\"keyword\">boolean</span> hasFocus)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onWindowFocusChanged(hasFocus);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(hasFocus)&#123;</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"VieWerActivity_debug:\"</span>+myVieWer.getMeasuredHeight());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该方法在Activity失去获取/失去焦点都会被调用</p>\n<p><li> view.post</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myVieWer.post(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"VieWerActivity_debug:\"</span>+myVieWer.getMeasuredHeight());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>将获取款高度的操作post到View消息队列的尾部，在执行到该操作时View就已经初始化完成了</p>\n<p><li> ViewTreeObserver</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewTreeObserver observer=myVieWer.getViewTreeObserver();</span><br><span class=\"line\">observer.addOnGlobalLayoutListener(<span class=\"keyword\">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//解决onGlobalLayout被调用多次问题</span></span><br><span class=\"line\">        myVieWer.getViewTreeObserver().removeOnGlobalLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"VieWerActivity_debug:\"</span>+myVieWer.getMeasuredHeight());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>在View树的状态或可见性发生改变时会调用onGlobalLayout方法</p>\n<p><li> measure</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> widthSpec=View.MeasureSpec.makeMeasureSpec((<span class=\"number\">1</span>&lt;&lt;<span class=\"number\">30</span>)-<span class=\"number\">1</span>,View.MeasureSpec.AT_MOST);</span><br><span class=\"line\"><span class=\"keyword\">int</span> heightSpec=View.MeasureSpec.makeMeasureSpec(dp2px(<span class=\"number\">200</span>),View.MeasureSpec.EXACTLY);</span><br><span class=\"line\">myVieWer.measure(widthSpec,heightSpec);</span><br><span class=\"line\">Log.d(TAG,<span class=\"string\">\"VieWerActivity_debug:\"</span>+myVieWer.getMeasuredWidth());</span><br></pre></td></tr></table></figure>\n<p>1&lt;&lt;30：即2^30-1也就是在AT_MOST的mode下的最大size</p>\n<h1 id=\"View的Layout\"><a href=\"#View的Layout\" class=\"headerlink\" title=\"View的Layout\"></a>View的Layout</h1><p>ViewGroup中的onLayout计算出l,r,t,b(mLeft,mRight,mTop,mBottom)，然后调用View的layout可确定出View在父容器中的位置。</p>\n<p>其中mLeft指子View左边框到父控件左边框的距离，mRight指子View右边框到父控件左边框的距离。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyLayouTer</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">\"MyLayouTer\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> totalWidth,totalHeight;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> marginSpace;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLayouTer</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyLayouTer</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        marginSpace=<span class=\"number\">50</span>;</span><br><span class=\"line\">        totalWidth=<span class=\"number\">0</span>;</span><br><span class=\"line\">        totalHeight=<span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"getChildCount():\"</span>+getChildCount());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j=<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;getChildCount();i++)&#123;</span><br><span class=\"line\">            View view=getChildAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> width=view.getMeasuredWidth();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> height=view.getMeasuredHeight();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mLeft=marginSpace;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mTop=marginSpace;</span><br><span class=\"line\">            totalHeight=totalHeight+height;</span><br><span class=\"line\">            totalWidth=totalWidth+width;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(getMeasuredWidth()&lt;totalWidth)&#123;</span><br><span class=\"line\">                Log.d(TAG,<span class=\"string\">\"getMeasuredWidth()&lt;totalWidth\"</span>);</span><br><span class=\"line\">                mTop=mTop+j*height;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                mLeft=mLeft+i*width;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Log.d(TAG,<span class=\"string\">\"width:\"</span>+width+<span class=\"string\">\"  height:\"</span>+height+<span class=\"string\">\"  mTop:\"</span>+mTop+<span class=\"string\">\"  mLeft:\"</span>+mLeft);</span><br><span class=\"line\">            view.layout(mLeft,mTop,mLeft+width,mTop+height);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"getChildCount():\"</span>+getChildCount());</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;getChildCount();i++)&#123;</span><br><span class=\"line\">            View view=getChildAt(i);</span><br><span class=\"line\">            measureChild(view,widthMeasureSpec,heightMeasureSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">io.github.grooters.practicer.viewer.MyLayouTer</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">io.github.grooters.practicer.viewer.MyVieWer</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_my\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/holo_red_dark\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">io.github.grooters.practicer.viewer.MyVieWer</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_my_Two\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/black\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">io.github.grooters.practicer.viewer.MyVieWer</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/view_my_Three\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"200dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/darker_gray\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">io.github.grooters.practicer.viewer.MyLayouTer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>以上代码编写了一个类似与水平线性布局的ViewGroup，在MyLayouTer类中的onMeasure方法先测量出所有子控件的测量宽高度，然后在onLayout中根据子控件宽高度计算出子控件在ViewGroup中的位置。</p>\n<h1 id=\"View的onDraw\"><a href=\"#View的onDraw\" class=\"headerlink\" title=\"View的onDraw\"></a>View的onDraw</h1><p>在该方法中将View绘制到布局中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//绘制一个圆到布局中</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> paddingStart=getPaddingStart();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> paddingEnd=getPaddingEnd();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> paddingTop=getPaddingTop();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> paddingBottom=getPaddingBottom();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> width=getWidth()-paddingStart-paddingEnd;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> height=getHeight()-paddingTop-paddingBottom;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> r=Math.min(width,height)/<span class=\"number\">2</span>;</span><br><span class=\"line\">    canvas.drawCircle(paddingStart+width/<span class=\"number\">2</span>,paddingTop+height/<span class=\"number\">2</span>,r,mPaint);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"Flutter初探","url":"https://grooters.github.io/2018/12/05/Flutter初探/","content":"<h1 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h1><p><strong><a href=\"https://flutter.io/\" target=\"_blank\" rel=\"noopener\">Flutter</a></strong>是谷歌的移动UI框架，可以快速在iOS和Android上构建高质量的原生用户界面</p>\n<p><em>Flutter具体信息可以参考以下文章：</em></p>\n<p><a href=\"https://blog.csdn.net/hytfly/article/details/81138393\" target=\"_blank\" rel=\"noopener\">初探Flutter，初步解析Flutter，可实现安卓ios统一开发。还有谷歌的Fuchsia系统</a></p>\n<h1 id=\"Flutter环境搭建\"><a href=\"#Flutter环境搭建\" class=\"headerlink\" title=\"Flutter环境搭建\"></a>Flutter环境搭建</h1><h2 id=\"原生搭建\"><a href=\"#原生搭建\" class=\"headerlink\" title=\"原生搭建\"></a>原生搭建</h2><p><li> 镜像搭建</li></p>\n<p>由于在编译工程的时候要下载一些必须的文件会很慢，所以google提供了代理镜像:</p>\n<blockquote>\n<p>PUB_HOSTED_URL=<a href=\"https://pub.flutter-io.cn\" target=\"_blank\" rel=\"noopener\">https://pub.flutter-io.cn</a><br> FLUTTER_STORAGE_BASE_URL=<a href=\"https://storage.flutter-io.cn\" target=\"_blank\" rel=\"noopener\">https://storage.flutter-io.cn</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">此电脑 -&gt; 高级系统设置 -&gt; 环境变量 -&gt; 系统变量</span><br></pre></td></tr></table></figure>\n<p> 分别新建变量名为PUB_HOSTED_URL和FLUTTER_STORAGE_BASE_URL，值为<a href=\"https://pub.flutter-io.cn\" target=\"_blank\" rel=\"noopener\">https://pub.flutter-io.cn</a>  和<a href=\"https://storage.flutter-io.cn的环境变量\" target=\"_blank\" rel=\"noopener\">https://storage.flutter-io.cn的环境变量</a></p>\n<p><strong>还有一种方法是打开VPN开启全局代理。</strong></p>\n<p><li> 下载SDK</li></p>\n<p><a href=\"https://flutter.io/docs/development/tools/sdk/archive#windows\" target=\"_blank\" rel=\"noopener\">SDK下载地址</a></p>\n<p>下载好后将压缩包内容解压到你想将Flutter存放的目录。</p>\n<p><li> 编译运行工程</li></p>\n<p>在根目录会看到一个叫<strong>flutter_console.bat</strong>文件，打开该文件。</p>\n<p>在根目录中会有一个examples的文件夹，里面存放有几个实例，将目录切换到对应实例工程的目录路径中：</p>\n<blockquote>\n<p>cd examples/hello_world</p>\n</blockquote>\n<p>然后执行命令编译并运行程序</p>\n<p><em>注意：需要连接手机设备并设置为开发者模式否则会提示No connected devices</em></p>\n<p>在运行完成后会有一句提示</p>\n<blockquote>\n<p>To hot reload changes while running, press “r”. To hot restart (and rebuild state), press “R”.</p>\n</blockquote>\n<p>即可以输入r可执行热加载，执行R可实现热重启</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter run</span><br></pre></td></tr></table></figure>\n<p>即可编译运行该工程</p>\n<h2 id=\"IDE搭建\"><a href=\"#IDE搭建\" class=\"headerlink\" title=\"IDE搭建\"></a>IDE搭建</h2><p>选用Android Studio</p>\n<p><li> 安装插件</li></p>\n<p>setting -&gt; plugins</p>\n<p>搜索flutter并安装，安装完成后需要配置flutter和dart的sdk path：</p>\n<p>File | Settings | Languages &amp; Frameworks</p>\n<p>只需选择flutter存放的根目录</p>\n<h1 id=\"Flutter实例\"><a href=\"#Flutter实例\" class=\"headerlink\" title=\"Flutter实例\"></a>Flutter实例</h1><p>以Android Studio作为编译工具</p>\n<p>新建Flutter工程，在新建窗口选择Flutter SDK Path同样是Flutter所在的根目录</p>\n<p><em>注意：工程名不能出现大写字母</em></p>\n<p><em>main.dart：</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:first_flutter/view/FirstPage.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">'Flutter Demo'</span>,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.green,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">'Flutter Demo Homer Page'</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\">  final <span class=\"built_in\">String</span> title;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  _MyHomePageState createState() =&gt; _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  int _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    setState(() &#123;</span><br><span class=\"line\">      Navigator.push(context,</span><br><span class=\"line\">          MaterialPageRoute(builder: <span class=\"function\">(<span class=\"params\">context</span>) =&gt;</span> FirstPage())</span><br><span class=\"line\">      );</span><br><span class=\"line\">      _counter++;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(widget.title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Widget</span>&gt;</span>[</span></span><br><span class=\"line\"><span class=\"xml\">            Text(</span></span><br><span class=\"line\"><span class=\"xml\">              'You have pushed the button this many times:',</span></span><br><span class=\"line\"><span class=\"xml\">            ),</span></span><br><span class=\"line\"><span class=\"xml\">            Text(</span></span><br><span class=\"line\"><span class=\"xml\">              '$_counter',</span></span><br><span class=\"line\"><span class=\"xml\">              style: Theme.of(context).textTheme.display1,</span></span><br><span class=\"line\"><span class=\"xml\">            ),</span></span><br><span class=\"line\"><span class=\"xml\">          ],</span></span><br><span class=\"line\"><span class=\"xml\">        ),</span></span><br><span class=\"line\"><span class=\"xml\">      ),</span></span><br><span class=\"line\"><span class=\"xml\">      floatingActionButton: FloatingActionButton(</span></span><br><span class=\"line\"><span class=\"xml\">        onPressed: _incrementCounter,</span></span><br><span class=\"line\"><span class=\"xml\">        tooltip: 'Increment',</span></span><br><span class=\"line\"><span class=\"xml\">        child: Icon(Icons.add),</span></span><br><span class=\"line\"><span class=\"xml\">      ),</span></span><br><span class=\"line\"><span class=\"xml\">    );</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>void main() =&gt; runApp(MyApp());</p>\n</blockquote>\n<p>程序入口，第一个打开的页面</p>\n<p>以上dart首先在MyApp类中定义了主题色，标题等</p>\n<p>然后需要创建两个创建widget必须有的类：分别继承了<strong>StatefulWidget</strong>和<strong>State</strong>的两个类MyHomePage和_MyHomePageState</p>\n<p>在_MyHomePageState类的重写方法中定义了appBar，body和floatingActionButton三个Widget，当用户点击了floatingActionButton按钮会调用_incrementCounter方法实现_counter自增1且跳转到FirstPage页面</p>\n<p><em>FirstPage.dart：</em><br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:english_words/english_words.dart'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'package:flutter/material.dart'</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstPage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span></span>&#123;</span><br><span class=\"line\">  BuildContext context;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.context=context;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">\"my first_page\"</span>,</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> Scaffold(</span><br><span class=\"line\">        appBar: <span class=\"keyword\">new</span> AppBar(</span><br><span class=\"line\">          title: <span class=\"keyword\">new</span> Text(<span class=\"string\">\"first_page\"</span>),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">        body: <span class=\"keyword\">new</span> Center(</span><br><span class=\"line\">            child: <span class=\"keyword\">new</span> RandomWords(),</span><br><span class=\"line\">        ),</span><br><span class=\"line\">          floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">            onPressed: _popMainPage,</span><br><span class=\"line\">            tooltip: <span class=\"string\">\"Increment\"</span>,</span><br><span class=\"line\">            child: Icon(Icons.ac_unit),</span><br><span class=\"line\">          )</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _popMainPage()&#123;</span><br><span class=\"line\">    Navigator.pop(context);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomWords</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span></span>&#123;</span><br><span class=\"line\">  @override</span><br><span class=\"line\">  createState()=&gt;<span class=\"keyword\">new</span> RandomWordsState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomWordsState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">RandomWords</span>&gt; </span>&#123;</span><br><span class=\"line\">  final _suggestions = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">WordPair</span>&gt;</span>[];</span></span><br><span class=\"line\"><span class=\"xml\">  final TextStyle _biggerFont = new TextStyle(fontSize: 18.0);</span></span><br><span class=\"line\"><span class=\"xml\">  @override</span></span><br><span class=\"line\"><span class=\"xml\">  Widget build(BuildContext context) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return new Scaffold(</span></span><br><span class=\"line\"><span class=\"xml\">      body: _buildSuggestions(),</span></span><br><span class=\"line\"><span class=\"xml\">    );</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  Widget _buildSuggestions() &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return new ListView.builder(</span></span><br><span class=\"line\"><span class=\"xml\">      padding: const EdgeInsets.all(16.0),</span></span><br><span class=\"line\"><span class=\"xml\">      itemBuilder: (context, i) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">        if (i.isOdd) return new Divider();</span></span><br><span class=\"line\"><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        final index = i ~/ 2;</span></span><br><span class=\"line\"><span class=\"xml\">        if (index &gt;= _suggestions.length) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">          _suggestions.addAll(generateWordPairs().take(10));</span></span><br><span class=\"line\"><span class=\"xml\">        &#125;</span></span><br><span class=\"line\"><span class=\"xml\">        return _buildRow(_suggestions[index]);</span></span><br><span class=\"line\"><span class=\"xml\">      &#125;,</span></span><br><span class=\"line\"><span class=\"xml\">    );</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">  Widget _buildRow(WordPair pair) &#123;</span></span><br><span class=\"line\"><span class=\"xml\">    return new ListTile(</span></span><br><span class=\"line\"><span class=\"xml\">      title: new Text(</span></span><br><span class=\"line\"><span class=\"xml\">        pair.asPascalCase,</span></span><br><span class=\"line\"><span class=\"xml\">        style: _biggerFont,</span></span><br><span class=\"line\"><span class=\"xml\">      ),</span></span><br><span class=\"line\"><span class=\"xml\">    );</span></span><br><span class=\"line\"><span class=\"xml\">  &#125;</span></span><br><span class=\"line\"><span class=\"xml\">&#125;</span></span><br></pre></td></tr></table></figure></p>\n<p>FirstPage创建了一个内容为随机字母（通过开源包<strong>english_words</strong>）的无限ListView。</p>\n<p>同上，在本页面中RandomWords继承了StatefulWidget通过重写createState方法实例化继承了State的RandomWordsState类，在该类重写方法build中调用_buildSuggestions方法创建Widget。</p>\n<p>开源包引入方法为：</p>\n<p>打开project目录下的pubspeck.yaml文件：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies:</span><br><span class=\"line\">  flutter:</span><br><span class=\"line\">    sdk: flutter</span><br><span class=\"line\">  # The following adds the Cupertino Icons font to your application.</span><br><span class=\"line\">  # Use with the CupertinoIcons class for iOS style icons.</span><br><span class=\"line\">  cupertino_icons: ^0.1.2</span><br><span class=\"line\"></span><br><span class=\"line\">  english_words: ^3.1.0</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"Java多线程","url":"https://grooters.github.io/2018/12/01/Java多线程/","content":"<p><strong>创建线程的两种方法：</strong></p>\n<p><li> extends Thread</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> MyThread().start();</span><br></pre></td></tr></table></figure>\n<p><li> implements Runable</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runable</span></span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> MyThread()).start();</span><br></pre></td></tr></table></figure>\n<p><strong>第一种和第二种的区别：</strong></p>\n<ol>\n<li>第一种扩展性不好（Java不允许多重继承）</li>\n<li>第一种是独享资源，第二种是共享资源</li>\n</ol>\n<p>当启动多个线程时，即使时同一个任务，每个任务的资源（成员变量）都是相互独立的，这会导致一些多线程不应该出现的问题，如：本来打算出售10张票，如果采用第一种方式开了3个线程，就会出售30张票，而第二种方式不会出现这种情况</p>\n<p><em>上锁无效：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createThread</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    lock=<span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)</span><br><span class=\"line\">      <span class=\"keyword\">new</span> MyThread().start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span></span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">500</span>;i++)</span><br><span class=\"line\">            MainTool.log(Thread.currentThread().getName()+<span class=\"string\">\" i:\"</span>+i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>上锁有效：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(MyThread.class)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">500</span>;i++)</span><br><span class=\"line\">        MainTool.log(Thread.currentThread().getName()+<span class=\"string\">\" i:\"</span>+i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">Object lock=<span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"><span class=\"keyword\">synchronized</span>(lock)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">500</span>;i++)</span><br><span class=\"line\">        MainTool.log(Thread.currentThread().getName()+<span class=\"string\">\" i:\"</span>+i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>每新建一个线程都会创建一个不同的对象，使用this即MyThread对象作为锁，由于不是同一把锁所以失效</strong></p>\n<p><img src=\"/img/Java/Java多线程/多线程状态.PNG\" alt=\"多线程状态\"></p>\n<p><li> Thread.yield()</li></p>\n<p>将该线程转为就绪队列，主动让CPU重新分配进入运行状态的线程</p>\n<p><li> lock.wait()</li></p>\n<p>将该线程任务置于等待队列中，直到被其它线程notify/notifyAll后才会恢复</p>\n<p><li> myThread.join()</li></p>\n<p>阻塞执行myThread.join()方法所在的线程，并让myThread线程执行到结束为止，可通过该方法将异步转换成同步</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyThread myThread1=<span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">MyThread myThread2=<span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">myThread1.start();</span><br><span class=\"line\">myThread1.join();</span><br><span class=\"line\">myThread2.start();</span><br></pre></td></tr></table></figure>\n<p><li> locak.notify()</li></p>\n<p>唤醒了处于等待队列中的线程后，该线程会处于锁定状态，并不能立即进入就绪状态，当唤醒处于等待状态的线程的线程称为唤醒线程<strong>执行完</strong>当前任务时会释放锁，让处于锁定状态的线程能进入就绪状态</p>\n<p><li> myThread.setDaemon()</li></p>\n<p>true: 使子线程成为守护线程，没有前台线程可服务时自动结束线程</p>\n<p>false： 即使主线程（前台线程结束了，该子线程仍然在执行，不受管理）</p>\n<h2 id=\"Java并发的三大概念\"><a href=\"#Java并发的三大概念\" class=\"headerlink\" title=\"Java并发的三大概念\"></a>Java并发的三大概念</h2><ol>\n<li><p>原子性</p>\n</li>\n<li><p>可见性</p>\n</li>\n</ol>\n<p>线程1修改了某个变量的值还没来得及放入到内存中，线程2就直接读取了那个还未更新的变量</p>\n<ol start=\"3\">\n<li>有序性</li>\n</ol>\n<p>处理器为了优化代码会对代码执行顺序重新排列，但会确保不影响最后的执行结果，但遇到多线程，处理器将无法保证最终结果一致，eg：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程1</span></span><br><span class=\"line\">context = init();   </span><br><span class=\"line\">inited = <span class=\"keyword\">true</span>;   </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//线程2</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(!inited )&#123;</span><br><span class=\"line\">  sleep()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">handle(context);</span><br></pre></td></tr></table></figure>\n<p>此时若线程1中的1，2条语句对换位置，在线程1中是不会影响最终结果，但考虑到由于inited=true线程2会跳出循环context还未被初始化handle方法就开始被执行。</p>\n<h2 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h2><ol>\n<li><p>使用volatile关键字会强制将修改的值立即写入主存；</p>\n</li>\n<li><p>使用volatile关键字的话，当线程2进行修改时，会导致线程1的工作内存中缓存变量stop的缓存行无效（反映到硬件层的话，就是CPU的L1或者L2缓存中对应的缓存行无效）；</p>\n</li>\n<li><p>由于线程1的工作内存中缓存变量stop的缓存行无效，所以线程1再次读取变量stop的值时会去主存读取。</p>\n</li>\n</ol>\n<p>因此volatile保证了可见性</p>\n<p><strong>volatile不能保证原子性</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">20</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> TestThread()).start();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(Thread.activeCount()&gt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">    Thread.yield();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">MainTool.log(<span class=\"string\">\"count:\"</span>+count);</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10000</span>;i++)&#123;</span><br><span class=\"line\">            MainTool.log(Thread.currentThread().getName()+<span class=\"string\">\" i:\"</span>+i);</span><br><span class=\"line\">            locKer.lock();</span><br><span class=\"line\">            MainTool.log(Thread.currentThread().getName()+<span class=\"string\">\" count:\"</span>+count);</span><br><span class=\"line\">            count=count+<span class=\"number\">4</span>*<span class=\"number\">100</span>*<span class=\"number\">108</span>/<span class=\"number\">123</span>*<span class=\"number\">9</span>;</span><br><span class=\"line\">            locKer.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>count:631800000</p>\n</blockquote>\n<p>如果不加锁输出的值&lt;=631800000，因为存在以下情况：</p>\n<p>当线程1取到count的值准备加1的时候，被线程2阻塞后线程2拿到count加了1，然后线程1开始加1，得到1，但此时count已经为1，而线程1不知道，最终结果本应该是2，却变为1。</p>\n","categories":["Java"],"tags":[]},{"title":"SpringBoot使用WebSocket","url":"https://grooters.github.io/2018/11/16/SpringBoot使用WebSocket/","content":"<p>做项目遇到了如下需求：</p>\n<blockquote>\n<p>用户扫码上座，如果遇到已被占用的座位，需要调用后台接口让管理系统页面弹出对话框询问管理员是否释放该座位</p>\n</blockquote>\n<p><em>这就涉及到了后台主动与前端页面交互</em></p>\n<p>所以考虑使用WebSocket长连接协议来实现</p>\n<p><li> 添加依赖</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><li> 创建配置类</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Bean;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.annotation.Configuration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebSocketConfig</span>  </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ServerEndpointExporter <span class=\"title\">serverEndpointExporter</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ServerEndpointExporter();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><li> 创建WebSocket连接类</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@ServerEndpoint</span>(<span class=\"string\">\"/websocket\"</span>)</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WebConnecter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Session session;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WebConnecter webConnecter;</span><br><span class=\"line\">    <span class=\"meta\">@OnOpen</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onOpen</span><span class=\"params\">(Session session)</span></span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">\"连接成功\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.session = session;</span><br><span class=\"line\">        websocket=<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@OnClose</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClose</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"连接断开\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@OnMessage</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onMessage</span><span class=\"params\">(String message, Session session)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"来自客户端的消息:\"</span> + message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@OnError</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Session session, Throwable error)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"发生错误\"</span>);</span><br><span class=\"line\">        error.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">showDialog</span><span class=\"params\">(String content)</span></span>&#123;</span><br><span class=\"line\">        webConnecter.sendMessage(content);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><li> 后端请求接口类</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> io.github.grooters.seatOccupied.tool.CheckCoder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.github.grooters.seatOccupied.dao.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.github.grooters.seatOccupied.model.Seat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.github.grooters.seatOccupied.model.User;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AdminOperations</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@RequestMapping</span>(value=&#123;<span class=\"string\">\"/showDialog\"</span>&#125;,method = RequestMethod.GET)</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">showDialog</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tWebConnecter.showDialog(<span class=\"string\">\"content\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"1\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><li> 前端页面html</li></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>WebSocketTest<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"js/WebSockeTer.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">onload</span>=<span class=\"string\">\"connect()\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><li> 前端页面js</li></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">connect</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"connect\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> webSocket=<span class=\"keyword\">new</span> WebSocket(<span class=\"string\">\"ws://localhost:8080/websocket\"</span>);</span><br><span class=\"line\">    webSocket.onopen=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// webSocket.send(\"我是前端页面\");</span></span><br><span class=\"line\">        alert(<span class=\"string\">\"连接成功\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    webSocket.onmessage=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> data=ev.data;</span><br><span class=\"line\">        alert(<span class=\"string\">\"接收的数据为：\"</span>+data);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    webSocket.onclose=<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">ev</span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">\"连接已关闭\"</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>最后只要请求接口前端页面便会弹出dialog：</p>\n<blockquote>\n<p><a href=\"http://localhost:8080/showDialog\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/showDialog</a></p>\n</blockquote>\n","categories":["后端"],"tags":[]},{"title":"后台开发问题集锦","url":"https://grooters.github.io/2018/11/12/后台开发问题集锦/","content":"<p><strong><li> SpringBoot：a different object with the same identifier value was already associated with the session</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"meta\">@Table</span>(name = <span class=\"string\">\"seat\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Seat</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Id</span></span><br><span class=\"line\">  <span class=\"meta\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"meta\">@NotNull</span></span><br><span class=\"line\">\t<span class=\"comment\">// 座位所在楼层</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> floor;</span><br><span class=\"line\">\t<span class=\"meta\">@NotNull</span></span><br><span class=\"line\">\t<span class=\"comment\">// 座位编号</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> number;</span><br><span class=\"line\">\t<span class=\"meta\">@NotNull</span></span><br><span class=\"line\">\t<span class=\"comment\">// 座位状态，0表示空闲，1表示占用</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">int</span> idle;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>只需将@GeneratedValue(strategy = GenerationType.AUTO)去掉</p>\n</blockquote>\n","categories":[],"tags":[]},{"title":"存储管理","url":"https://grooters.github.io/2018/11/09/存储管理/","content":"<h1 id=\"程序的装入与链接\"><a href=\"#程序的装入与链接\" class=\"headerlink\" title=\"程序的装入与链接\"></a>程序的装入与链接</h1><p><li> 编译</li></p>\n<blockquote>\n<p>源程序 -&gt; 目标代码</p>\n</blockquote>\n<p><li> 链接</li></p>\n<blockquote>\n<p>目标代码 + 库函数 = 装入模块</p>\n</blockquote>\n<p><li> 装入</li></p>\n<blockquote>\n<p>将装入模块装入内存，该过程也叫做地址重定位，也称地址映射</p>\n</blockquote>\n<p><strong>地址空间：</strong></p>\n<blockquote>\n<p>源程序经编译后得到的目标程序，存在于它所限定的地址范围内，此范围称地址空间。地址空间是逻辑地址的集合</p>\n</blockquote>\n<p><strong>存储空间：</strong></p>\n<blockquote>\n<p>指主存中一系列存储信息的物理单元的集合，这些单元的编号称为物理地址。存储空间是物理地址的集合</p>\n</blockquote>\n<h2 id=\"程序的装入方式\"><a href=\"#程序的装入方式\" class=\"headerlink\" title=\"程序的装入方式\"></a>程序的装入方式</h2><p><strong>重定位：</strong> 把用户程序中的相对地址（逻辑地址）转换为主存中的绝对地址（物理地址）过程。</p>\n<p><li> 静态重定位</li></p>\n<blockquote>\n<p>编译时产生相对地址，装入程序确定要装入模块的地址，并在装入时进行重定位，程序运行中不允许在内存移动</p>\n</blockquote>\n<p><li> 动态重定位</li></p>\n<blockquote>\n<p>编译时产生相对地址，装入程序在把装入模块装入内存时，不立即把装入模块中的相对地址转换为绝对地址，而是推迟到程序要真正执行时才进行</p>\n</blockquote>\n<p><img src=\"/img/操作系统/存储管理/动态重定位.PNG\" alt=\"动态重定位\"></p>\n<h2 id=\"程序的链接方式\"><a href=\"#程序的链接方式\" class=\"headerlink\" title=\"程序的链接方式\"></a>程序的链接方式</h2><p><li> 静态链接</li></p>\n<p><li> 装入时动态链接</li></p>\n<p><li> 运行时动态链接</li></p>\n<h1 id=\"连续分配存储管理方式\"><a href=\"#连续分配存储管理方式\" class=\"headerlink\" title=\"连续分配存储管理方式\"></a>连续分配存储管理方式</h1><h2 id=\"单一连续分配\"><a href=\"#单一连续分配\" class=\"headerlink\" title=\"单一连续分配\"></a>单一连续分配</h2><blockquote>\n<p>整个内存会分为系统区域和用户区域两部分，为了防止操作系统受到程序破坏，常会使用限界寄存器，程序执行的每一条指令的物理地址都会与限界寄存器的地址进行比较，当确定没有超出用户地址范围时才会执行指令</p>\n</blockquote>\n<h2 id=\"固定分区分配\"><a href=\"#固定分区分配\" class=\"headerlink\" title=\"固定分区分配\"></a>固定分区分配</h2><blockquote>\n<p>在执行固定分配时，系统都会创建一个分区说明表，当进程装入时会由内存分配程序检索该表从表中找出一个能满足要求且尚未分配的分区，若匹配不到而拒绝装入</p>\n</blockquote>\n<p><img src=\"/img/操作系统/存储管理/固定分配分区说明表.PNG\" alt=\"固定分配分区说明表\"></p>\n<h2 id=\"可变分区分配\"><a href=\"#可变分区分配\" class=\"headerlink\" title=\"可变分区分配\"></a>可变分区分配</h2><blockquote>\n<p>当程序装入内存时，系统会把内存切出一块连续的区域分给进程以适应进程大小的需要，也称动态分区</p>\n</blockquote>\n<h3 id=\"可变分区的数据结构\"><a href=\"#可变分区的数据结构\" class=\"headerlink\" title=\"可变分区的数据结构\"></a>可变分区的数据结构</h3><p><li> 空闲分区表</li></p>\n<blockquote>\n<p>该表会为内存中每个尚未分配出去的分区设置一个表项，每个表项包括：<strong>分区号，分区起始地址和分区的大小</strong></p>\n</blockquote>\n<p><li> 空闲分区链</li></p>\n<blockquote>\n<p>该链会在每个空闲分区中设置用于控制分区分配的信息及用于链接各个分区的指针，将内存中的空闲分区链接成一个链表</p>\n</blockquote>\n<h3 id=\"可变分区的分配算法\"><a href=\"#可变分区的分配算法\" class=\"headerlink\" title=\"可变分区的分配算法\"></a>可变分区的分配算法</h3><p><li> 首次适应（First Fit）算法</li></p>\n<blockquote>\n<p>空闲分区以地址递增的次序排序，对于链表结构，分配时从开始顺序进行查找，直到找到能满足进程大小要求的空闲分区，然后从空闲分区中切出一块内存空间分配给请求者</p>\n</blockquote>\n<p>该算法倾向于优先使用低地址的内存空间，从而保证了高地址有较大的内存空间，但被不断切割的低地址会留下很多内存碎片，而每次查找又都是从低地址开始，导致查找速度缓慢。</p>\n<p><li> 下次适应（Next Fit）算法</li></p>\n<blockquote>\n<p>基于首次适应算法，但每次查找不从链首开始查找而是从上一个空闲分区的下一个空闲分区开始查找</p>\n</blockquote>\n<p>该算法需要设置查询指针，用于指示下一次查询的其实位置，链表需要采用循环链表结构，即如果查到最后仍未找到合适的内存空间，就返回到链表的头部继续查找。</p>\n<p><li> 最佳适应（Best Fit）算法</li></p>\n<blockquote>\n<p>首先将空闲分区按分区大小递增的顺序排序形成空闲分区链，当进程需要分配内存时，其第一次找到的满足要求的空闲区必然时最优的</p>\n</blockquote>\n<p>该算法能保证当系统中有一空闲分区大小和要求大小一致能必然选中该空闲分区，且可保留系统中较大的空闲分区，但会导致链表头部留下许多难以利用的小空间区。</p>\n<p><li> 最坏适应（Worst Fit）算法</li></p>\n<blockquote>\n<p>该算法与最佳适应算法相反。顺序从小到大排序</p>\n</blockquote>\n<p>该算法基本不会留下小空闲分区，不易形成碎片，但大空闲分区被切割导致一些要求大内存空间的进程无法装入。</p>\n<h3 id=\"可变分区内存的回收\"><a href=\"#可变分区内存的回收\" class=\"headerlink\" title=\"可变分区内存的回收\"></a>可变分区内存的回收</h3><p><li> 回收分区与低地址部分的空闲分区相邻</li></p>\n<blockquote>\n<p>以空闲分区首地址为首地址，以回收分区和空闲分区大小的和作为合并后的空闲分区大小</p>\n</blockquote>\n<p><li> 回收分区与高地址部分的空闲分区相邻</li></p>\n<blockquote>\n<p>以回收分区首地址为首地址，以回收分区和空闲分区大小的和作为合并后的空闲分区大小</p>\n</blockquote>\n<p><li> 回收分区与低地址部分和高地址部分的空闲分区都相邻</li></p>\n<blockquote>\n<p>以低地址部分空闲分区的首地址为首地址，以三者分区的小之和为合并后的空闲分区大小，并去掉高地址部分空闲分区在空闲分区链表中的表项</p>\n</blockquote>\n<p><li> 回收分区不和任何空闲分区相邻</li></p>\n<blockquote>\n<p>在空闲分区链表中为该回收分区创建一个新的表项</p>\n</blockquote>\n<h2 id=\"动态重定位分区\"><a href=\"#动态重定位分区\" class=\"headerlink\" title=\"动态重定位分区\"></a>动态重定位分区</h2><blockquote>\n<p>该分区方法是通过移动分区使分散的空闲分区拼接在一起</p>\n</blockquote>\n<p>要实现进程在运行过程中在内存中移动必须采用动态重定位的方法，必须获得硬件地址变换机构得支持即在系统中增加一个重定位寄存器来存放进程在内存中的起始地址</p>\n<h1 id=\"页式存储管理\"><a href=\"#页式存储管理\" class=\"headerlink\" title=\"页式存储管理\"></a>页式存储管理</h1><blockquote>\n<p>将进程的逻辑地址空间分成若干个大小相等的片，称为<strong>页面或页</strong>，内存空间分成与页大小相等的若干个存储块，称为<strong>物理块或页框</strong>，在为进程分配内存时，以块为单位，将进程中的若干页分别装入多个可以不相邻的块中</p>\n</blockquote>\n<p><img src=\"/img/操作系统/存储管理/页式存储.PNG\" alt=\"页式存储\"></p>\n<h2 id=\"页面的大小的权衡\"><a href=\"#页面的大小的权衡\" class=\"headerlink\" title=\"页面的大小的权衡\"></a>页面的大小的权衡</h2><p><li> 页面较小</li></p>\n<p>内存碎片小，页表过长，占用较大内存空间。</p>\n<p><li>页面较大</li></p>\n<p>页表短，占用较少内存；内存碎片大。</p>\n<blockquote>\n<p>通常页面的大小要适中，在512B~4MB之间</p>\n</blockquote>\n<p>逻辑地址分为<strong>页号</strong>和<strong>页内位移</strong>两部分</p>\n<p>eg：</p>\n<p><img src=\"/img/操作系统/存储管理/页式存储地址结构.PNG\" alt=\"页式存储地址结构\"></p>\n<h2 id=\"地址转换\"><a href=\"#地址转换\" class=\"headerlink\" title=\"地址转换\"></a>地址转换</h2><p><img src=\"/img/操作系统/存储管理/页式存储地址变换.PNG\" alt=\"页式存储地址变换\"></p>\n<h2 id=\"块表\"><a href=\"#块表\" class=\"headerlink\" title=\"块表\"></a>块表</h2><blockquote>\n<p>由于页表放在内存，使得CPU存取一个数据时，要两次访问内存，为了提高速度，增设快表（高速缓存）</p>\n</blockquote>\n<p><img src=\"/img/操作系统/存储管理/快表.PNG\" alt=\"快表\"></p>\n<h2 id=\"多级页表\"><a href=\"#多级页表\" class=\"headerlink\" title=\"多级页表\"></a>多级页表</h2><p><img src=\"/img/操作系统/存储管理/两级页表结构.PNG\" alt=\"两级页表结构\"></p>\n<h1 id=\"段式存储管理\"><a href=\"#段式存储管理\" class=\"headerlink\" title=\"段式存储管理\"></a>段式存储管理</h1><blockquote>\n<p>   整个作业的地址空间被分成若干个段，每个段采用一段连续的地址空间，段的长度由相应的逻辑信息的长度决定</p>\n</blockquote>\n<p><img src=\"/img/操作系统/存储管理/段式存储.PNG\" alt=\"段式存储\"></p>\n<h2 id=\"地址转换-1\"><a href=\"#地址转换-1\" class=\"headerlink\" title=\"地址转换\"></a>地址转换</h2><p><img src=\"/img/操作系统/存储管理/段式存储地址变换.PNG\" alt=\"段式存储地址转换\"></p>\n<h1 id=\"段式存储与页式存储的区别\"><a href=\"#段式存储与页式存储的区别\" class=\"headerlink\" title=\"段式存储与页式存储的区别\"></a>段式存储与页式存储的区别</h1><p><strong><li> 分页和分段的目的</li></strong></p>\n<p>页是信息的物理单位，分页是系统管理的需要，而不是用户的需要。</p>\n<p>段是信息的逻辑单位，它含一组意义完整的信息。分段是为了更好地满足用户的要求。</p>\n<p><strong><li> 页和段长度</li></strong></p>\n<p>页的大小固定，由系统确定。</p>\n<p>段的长度不固定，决定于用户所编写的程序。</p>\n<p><strong><li> 地址空间</li></strong></p>\n<p>分页的作业地址空间是一维的，即单一的线性地址空间。</p>\n<p>分段的作业地址空间是二维的，程序员在标识一个地址时，需给出段名和段内地址。</p>\n<h2 id=\"段与页的共享\"><a href=\"#段与页的共享\" class=\"headerlink\" title=\"段与页的共享\"></a>段与页的共享</h2><p><li> 页的共享</li></p>\n<p><img src=\"/img/操作系统/存储管理/页的共享.PNG\" alt=\"页共享\"></p>\n<p><li> 段的共享</li></p>\n<p><img src=\"/img/操作系统/存储管理/段的共享.PNG\" alt=\"段共享\"></p>\n<h1 id=\"段的保护\"><a href=\"#段的保护\" class=\"headerlink\" title=\"段的保护\"></a>段的保护</h1><p><strong><li> 存取控制</li></strong></p>\n<p>在段表中增加存取保护位，用于设置对本段的存取方式，如可读。可写或可执行。</p>\n<p><strong><li> 段表保护</li></strong></p>\n<p>每个进程都有自己的段表，段表本身对段可起到保护作用。</p>\n<p><strong><li> 保护环</li></strong></p>\n<p>系统把所有信息按照其作用和相互调用关系分成不同的层次（即环）， 低编号的环具有较高的权限，编号越高，其权限越低，如图所示。它支持4个保护级别：0级权限最高，3级最低。</p>\n<h1 id=\"段页式\"><a href=\"#段页式\" class=\"headerlink\" title=\"段页式\"></a>段页式</h1><p><img src=\"/img/操作系统/存储管理/段页式地址变换.PNG\" alt=\"段页式地址变换\"></p>\n","categories":["操作系统"],"tags":[]},{"title":"虚拟存储管理","url":"https://grooters.github.io/2018/11/08/虚拟存储管理/","content":"<h1 id=\"虚拟存储器的特征\"><a href=\"#虚拟存储器的特征\" class=\"headerlink\" title=\"虚拟存储器的特征\"></a>虚拟存储器的特征</h1><p><li> 离散性</li></p>\n<blockquote>\n<p>作业不装入连续的存储空间，内存分配采用离散分配方</p>\n</blockquote>\n<p><li> 多次性</li></p>\n<blockquote>\n<p>一个作业被分割，被多次调入内存</p>\n</blockquote>\n<p><li> 对换性</li></p>\n<blockquote>\n<p>作业在运行过程中换进、换出内存</p>\n</blockquote>\n<p><li> 虚拟性</li></p>\n<blockquote>\n<p>从逻辑上扩充了内存的容量</p>\n</blockquote>\n<h1 id=\"请求页式存储管理\"><a href=\"#请求页式存储管理\" class=\"headerlink\" title=\"请求页式存储管理\"></a>请求页式存储管理</h1><p>页号 | 存储块号 | 状态位P | 访问字段A | 修改位M | 外存地址</p>\n<p><li> P</li></p>\n<blockquote>\n<p>记录该页是否在内存。P=1该页在内存； P=0该页不在内存</p>\n</blockquote>\n<p><li> A</li></p>\n<blockquote>\n<p>记录该页在一段时间内被访问的次数</p>\n</blockquote>\n<p><li> M</li></p>\n<blockquote>\n<p>记录该页在内存期间是否被修改过。M=1该页调入内存后被修改过； M=0该页调入内存后未被修改过</p>\n</blockquote>\n<h1 id=\"驻留集管理\"><a href=\"#驻留集管理\" class=\"headerlink\" title=\"驻留集管理\"></a>驻留集管理</h1><p><li> 固定分配、局部置换</li></p>\n<blockquote>\n<p>为每个进程分配固定页数的内存空间、且运行过程中不变。当进程缺页时，只能从该进程在内存的几个页面中选出一页换出，然后再调入一页，保证进程的页数不变</p>\n</blockquote>\n<p><li> 可变分配、全局置换</li></p>\n<blockquote>\n<p>系统开始先为每个进程分配一定数目的物理块。整个系统有一空闲物理块链，当某进程缺页时，系统从空闲链中选出一块分配给进程。空闲链为空时，OS从所有进程的页面中权衡选择一页换出</p>\n</blockquote>\n<p><li> 可变分配、局部置换</li></p>\n<blockquote>\n<p>分配同上，但进程缺页时，只能从该进程在内存的页面中选出一页换出</p>\n</blockquote>\n<h1 id=\"请求页式存储管理的调用策略\"><a href=\"#请求页式存储管理的调用策略\" class=\"headerlink\" title=\"请求页式存储管理的调用策略\"></a>请求页式存储管理的调用策略</h1><h2 id=\"调入时间\"><a href=\"#调入时间\" class=\"headerlink\" title=\"调入时间\"></a>调入时间</h2><p><li> 预调</li></p>\n<p><li> 请调</li></p>\n<h2 id=\"调入地点\"><a href=\"#调入地点\" class=\"headerlink\" title=\"调入地点\"></a>调入地点</h2><p><li> 进程的所有页面都放在对换区</li></p>\n<p><li> 只将修改过的页面放在对换区，未改的放在文件区</li></p>\n<p><li> UNIX系统方式，首次从文件区调入，换出时放在对换区，以后从对换区调入</li></p>\n<h1 id=\"页面置换算法\"><a href=\"#页面置换算法\" class=\"headerlink\" title=\"页面置换算法\"></a>页面置换算法</h1><h2 id=\"最佳置换算法（OPT）\"><a href=\"#最佳置换算法（OPT）\" class=\"headerlink\" title=\"最佳置换算法（OPT）\"></a>最佳置换算法（OPT）</h2><p><img src=\"/img/操作系统/虚拟存储管理/最佳置换算法.PNG\" alt=\"最佳置换算法\"></p>\n<blockquote>\n<p>页面换出6次，缺页9次</p>\n</blockquote>\n<h2 id=\"先进先出页面置换算法（FIFO）\"><a href=\"#先进先出页面置换算法（FIFO）\" class=\"headerlink\" title=\"先进先出页面置换算法（FIFO）\"></a>先进先出页面置换算法（FIFO）</h2><p><img src=\"/img/操作系统/虚拟存储管理/先进先出置换算法.PNG\" alt=\"先进先出页面置换算法\"></p>\n<blockquote>\n<p>页面换出12次，缺页15次</p>\n</blockquote>\n<h2 id=\"最近最久未使用页面置换算法（LRU）\"><a href=\"#最近最久未使用页面置换算法（LRU）\" class=\"headerlink\" title=\"最近最久未使用页面置换算法（LRU）\"></a>最近最久未使用页面置换算法（LRU）</h2><p><img src=\"/img/操作系统/虚拟存储管理/最近最久未使用页面置换算法.PNG\" alt=\"最近最久未使用页面置换算法\"></p>\n<blockquote>\n<p>页面换出9次，缺页12次</p>\n</blockquote>\n<h2 id=\"CLOCK页面置换算法\"><a href=\"#CLOCK页面置换算法\" class=\"headerlink\" title=\"CLOCK页面置换算法\"></a>CLOCK页面置换算法</h2><blockquote>\n<p>为每页设一访问位，再将内存中的所有页面链接成一循环队列</p>\n</blockquote>\n<p><li> 当某页被访问时，其访问位置1</li></p>\n<p><li> 置换算法在选择一页淘汰时，只需检查其访问位</li></p>\n<blockquote>\n<p>如果是0，就选择该页换出；如果是1，则重新将其置为0，暂不换出</p>\n</blockquote>\n<p>页面淘汰顺序为：</p>\n<ol>\n<li>A=0，M=0该页既未被访问过、又未被修改过，是最佳淘汰页</li>\n<li>A=0，M=1该页最近未被访问、但已被修改，可以被淘汰</li>\n<li>A=1，M=0最近已被访问，但未被修改，该页有可能再被访问</li>\n<li>A=1，M=1最近已被访问且被修改，该页可能再被访问</li>\n</ol>\n<p>A为访问位，M为修改位</p>\n<h3 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h3><ol>\n<li>从当前位置扫描循环队列，寻找1类页面</li>\n<li>若1失败，开始第二轮扫描，寻找<2>类页面，并将所经过的页面的访问位置0</2></li>\n<li>若2&gt;也失败，返回到开始位置</li>\n</ol>\n<h1 id=\"驻留集\"><a href=\"#驻留集\" class=\"headerlink\" title=\"驻留集\"></a>驻留集</h1><blockquote>\n<p>在某段事件间隔内，进程所要访问的页面集合</p>\n</blockquote>\n<p><img src=\"/img/操作系统/虚拟存储管理/驻留集.PNG\" alt=\"驻留集\"></p>\n<p>若驻留集窗口大小过小会频繁残生缺页中断影响CPU效率，但过大就失去了虚拟存储器的意义</p>\n<p><li> 缺页率与物理块数的关系</li></p>\n<p><img src=\"/img/操作系统/虚拟存储管理/缺页率与物理块数的关系.PNG\" alt=\"缺页率与物理块数的关系\"></p>\n<p><li> CPU的利用率与多道程序数的关系</li></p>\n<p><img src=\"/img/操作系统/虚拟存储管理/CPU的利用率与多道程序数的关系.PNG\" alt=\"CPU的利用率与多道程序数的关系\"></p>\n<h2 id=\"抖动\"><a href=\"#抖动\" class=\"headerlink\" title=\"抖动\"></a>抖动</h2><blockquote>\n<p>在请求分页系统中，若在内存引入过多的进程，会使进程的大部分时间都用于页面的换入/换出的操作，而几乎不能完成任何有效的工作。我们称这时的进程处于“抖动”状态。抖动产生的原因是在内存中引入过多的进程而产生的。</p>\n</blockquote>\n<p><strong>预防抖动的方法：</strong></p>\n<p><li> 加载控制</li></p>\n<p><li> L=S准则</li></p>\n<blockquote>\n<p>产生缺页的平均时间L等于系统处理缺页的平均时间 S</p>\n</blockquote>\n<p><li> 采用局部置换</li></p>\n<p><li> 挂起若干进程</li></p>\n<h1 id=\"请求段式存储管理\"><a href=\"#请求段式存储管理\" class=\"headerlink\" title=\"请求段式存储管理\"></a>请求段式存储管理</h1><blockquote>\n<p>段号 | 段长 | 段始址 | 存取方式 | 状态位 | 访问字段 | 修改位 | 增补位 | 外存地址</p>\n</blockquote>\n<p><li> 存取方式</li></p>\n<blockquote>\n<p>用于标识本段的存取属性是只执行、只读，还是允许读/写</p>\n</blockquote>\n<p><li> 状态位</li></p>\n<blockquote>\n<p>指示该段是否已进驻内存</p>\n</blockquote>\n<p><li> 访问字段</li></p>\n<blockquote>\n<p>用于记录本段有多长时间没有被访问</p>\n</blockquote>\n<p><li> 修改位</li></p>\n<blockquote>\n<p>表示该段调入内存后是否被修改过</p>\n</blockquote>\n<p><li> 增补位</li></p>\n<blockquote>\n<p>这是请求段式存储管理系统中特有的字段，用于表示本段在运行过程中是否进行过动态增长</p>\n</blockquote>\n<p><li> 外存地址</li></p>\n<blockquote>\n<p>用于指出该段在外存的地址，供调入该段时使用</p>\n</blockquote>\n","categories":["操作系统"],"tags":[]},{"title":"View的事件体系","url":"https://grooters.github.io/2018/11/01/View的事件体系/","content":"<p><strong><a href=\"https://developer.android.google.cn/reference/android/view/GestureDetector\" target=\"_blank\" rel=\"noopener\">GestureDetector</a>的使用：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VieWer</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">GestureDetector</span>.<span class=\"title\">OnGestureListener</span>,<span class=\"title\">GestureDetector</span>.<span class=\"title\">OnDoubleTapListener</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = VieWer.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> GestureDetector gestureDetector;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_viewer);</span><br><span class=\"line\">        gestureDetector=<span class=\"keyword\">new</span> GestureDetector(<span class=\"keyword\">this</span>,<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        gestureDetector.setIsLongpressEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> gestureDetector.onTouchEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDown</span><span class=\"params\">(MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onDown\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onShowPress</span><span class=\"params\">(MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onShowPress\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onSingleTapUp</span><span class=\"params\">(MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onSingleTapUp\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onScroll</span><span class=\"params\">(MotionEvent motionEvent, MotionEvent motionEvent1, <span class=\"keyword\">float</span> v, <span class=\"keyword\">float</span> v1)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onScroll\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLongPress</span><span class=\"params\">(MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onLongPress\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onFling</span><span class=\"params\">(MotionEvent motionEvent, MotionEvent motionEvent1, <span class=\"keyword\">float</span> v, <span class=\"keyword\">float</span> v1)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onFling\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDoubleTap</span><span class=\"params\">(MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onDoubleTap\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onDoubleTapEvent</span><span class=\"params\">(MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onDoubleTapEvent\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onSingleTapConfirmed</span><span class=\"params\">(MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onSingleTapConfirmed\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><li> 双击</li></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11-01 11:22:38.738 28879-28879/io.github.grooters.practicer I/VieWer: onDown</span><br><span class=\"line\">11-01 11:22:38.809 28879-28879/io.github.grooters.practicer I/VieWer: onSingleTapUp</span><br><span class=\"line\">11-01 11:22:38.889 28879-28879/io.github.grooters.practicer I/VieWer: onDoubleTap</span><br><span class=\"line\">    onDoubleTapEvent</span><br><span class=\"line\">    onDown</span><br><span class=\"line\">11-01 11:22:38.968 28879-28879/io.github.grooters.practicer I/VieWer: onDoubleTapEvent</span><br></pre></td></tr></table></figure>\n<p><li> 单击</li></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11-01 11:27:05.737 28879-28879/io.github.grooters.practicer I/VieWer: onDown</span><br><span class=\"line\">11-01 11:27:05.823 28879-28879/io.github.grooters.practicer I/VieWer: onSingleTapUp</span><br><span class=\"line\">11-01 11:27:06.038 28879-28879/io.github.grooters.practicer I/VieWer: onSingleTapConfirmed</span><br></pre></td></tr></table></figure>\n<p><li> 滑动</li></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11-01 11:27:49.496 28879-28879/io.github.grooters.practicer I/VieWer: onDown</span><br><span class=\"line\">11-01 11:27:49.596 28879-28879/io.github.grooters.practicer I/VieWer: onShowPress</span><br><span class=\"line\">11-01 11:27:49.603 28879-28879/io.github.grooters.practicer I/VieWer: onScroll</span><br><span class=\"line\">11-01 11:27:49.621 28879-28879/io.github.grooters.practicer I/VieWer: onScroll</span><br><span class=\"line\">11-01 11:27:49.967 28879-28879/io.github.grooters.practicer I/VieWer: onFling</span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"4sp\">onTouchEvent</font></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">false</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>调用父容器的onTouchEvent，该onTouchEvent内容不执行</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>执行本View的onTouchEvent方法</p>\n</blockquote>\n<p>详见<strong>View的事件分发机制</strong></p>\n<h1 id=\"View的滑动\"><a href=\"#View的滑动\" class=\"headerlink\" title=\"View的滑动\"></a>View的滑动</h1><h2 id=\"使用scrollTo-scrollBy\"><a href=\"#使用scrollTo-scrollBy\" class=\"headerlink\" title=\"使用scrollTo/scrollBy\"></a>使用scrollTo/scrollBy</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WidgeTer</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">support</span>.<span class=\"title\">v7</span>.<span class=\"title\">widget</span>.<span class=\"title\">AppCompatTextView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG =WidgeTer.class.getSimpleName() ;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scroller scroller;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WidgeTer</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">WidgeTer</span><span class=\"params\">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        scroller=<span class=\"keyword\">new</span> Scroller(context);</span><br><span class=\"line\">        smoothScrollTo(-<span class=\"number\">500</span>,-<span class=\"number\">500</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(scroller.computeScrollOffset())&#123;</span><br><span class=\"line\">            scrollTo(scroller.getCurrX(),scroller.getCurrY());</span><br><span class=\"line\">            Log.i(TAG,<span class=\"string\">\"CurrX:\"</span>+scroller.getCurrX()+<span class=\"string\">\"CurrY:\"</span>+scroller.getCurrY());</span><br><span class=\"line\">            postInvalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollTo</span><span class=\"params\">(<span class=\"keyword\">int</span> destX,<span class=\"keyword\">int</span> destY)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> scrollX=getScrollX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> scrollY=getScrollY();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> deltaX=destX-scrollX;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> deltaY=destY-scrollY;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"destX:\"</span>+destX+<span class=\"string\">\"scrollX:\"</span>+scrollX+<span class=\"string\">\" delta:\"</span>+deltaX);</span><br><span class=\"line\">        scroller.startScroll(scrollX,scrollY,deltaX,deltaY,<span class=\"number\">5000</span>);</span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><li> getScrollX</li></strong></p>\n<blockquote>\n<p>Return the scrolled left position of this view. This is the left edge of the displayed part of your view. You do not need to draw any pixels farther left, since those are outside of the frame of your view on screen.</p>\n</blockquote>\n<p>返回向左滚动的视图，即滚动时的当前位置，右和下为负，左和上为正</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">io.github.grooters.practicer.viewer.WidgeTer</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/wid\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:text</span>=<span class=\"string\">\"Test\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"20sp\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11-02 05:21:50.837 17041-17041/io.github.grooters.practicer I/WidgeTer:  destX:-500 scrollX:0 delta:-500</span><br><span class=\"line\">11-02 05:21:50.854 17041-17041/io.github.grooters.practicer I/WidgeTer:  CurrX:0 CurrY:0 ScrollX：0</span><br><span class=\"line\">11-02 05:21:50.871 17041-17041/io.github.grooters.practicer I/WidgeTer:  CurrX:-1 CurrY:-1 ScrollX：-1</span><br><span class=\"line\">11-02 05:21:50.899 17041-17041/io.github.grooters.practicer I/WidgeTer:  CurrX:-2 CurrY:-2 ScrollX：-2</span><br><span class=\"line\">11-02 05:21:50.950 17041-17041/io.github.grooters.practicer I/WidgeTer:  CurrX:-8 CurrY:-8 ScrollX：-8</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">.</span><br><span class=\"line\">11-02 05:21:55.722 17041-17041/io.github.grooters.practicer I/WidgeTer:  CurrX:-500 CurrY:-500 ScrollX：-500</span><br><span class=\"line\">11-02 05:21:55.754 17041-17041/io.github.grooters.practicer I/WidgeTer:  CurrX:-500 CurrY:-500 ScrollX：-500</span><br></pre></td></tr></table></figure>\n<p>达到弹性滑动除了通过Scroller实现外，还可以通过延时策略实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myHandler=<span class=\"keyword\">new</span> MyHandler();</span><br><span class=\"line\">myHandler.sendEmptyMessage(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(count&lt;=<span class=\"number\">30</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">float</span> fraction=count/(<span class=\"keyword\">float</span>)<span class=\"number\">30</span>;</span><br><span class=\"line\">            Log.i(TAG,<span class=\"string\">\"fraction: \"</span>+fraction);</span><br><span class=\"line\">            widgeTer.scrollTo((<span class=\"keyword\">int</span>)(-fraction*<span class=\"number\">100</span>),<span class=\"number\">0</span>);</span><br><span class=\"line\">            myHandler.sendEmptyMessageDelayed(<span class=\"number\">0</span>,<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>若想要移动跨度大点的话只需将30改小即可</p>\n</blockquote>\n<p><li> ?</li></p>\n<p>自定义布局无法添加控件</p>\n<h2 id=\"使用动画\"><a href=\"#使用动画\" class=\"headerlink\" title=\"使用动画\"></a>使用动画</h2><p><li> View动画</li></p>\n<p><strong>Android Resource Directory -&gt; Android Resource file</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1000\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fillAfter</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">translate</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:fromXDelta</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:fromYDelta</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:toXDelta</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:toYDelta</span>=<span class=\"string\">\"100\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Animation animation=AnimationUtils.loadAnimation(<span class=\"keyword\">this</span>,R.anim.widgeter);</span><br><span class=\"line\">button.setAnimation(animation);</span><br><span class=\"line\"><span class=\"comment\">//button.startAnimation(animation);</span></span><br></pre></td></tr></table></figure>\n<p><em>注意：</em></p>\n<p>View动画无法改变View真实属性，比如虽然View位置看上去移动了，但其实它仍在原处，甚至如果将下列属性设为false，View执行完动画后还会恢复View的位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:fillAfter=&quot;true&quot;</span><br></pre></td></tr></table></figure>\n<p><li> 属性动画</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectAnimator.ofFloat(<span class=\"keyword\">this</span>,<span class=\"string\">\"translationX\"</span>,<span class=\"number\">0</span>,<span class=\"number\">500</span>).setDuration(<span class=\"number\">1000</span>).start();</span><br></pre></td></tr></table></figure>\n<h2 id=\"改变布局参数\"><a href=\"#改变布局参数\" class=\"headerlink\" title=\"改变布局参数\"></a>改变布局参数</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams) getLayoutParams();</span><br><span class=\"line\">params.leftMargin+=<span class=\"number\">100</span>;</span><br><span class=\"line\">requestLayout();</span><br></pre></td></tr></table></figure>\n<p>详见：<a href=\"https://grooters.github.io/2018/09/29/%E5%8A%A8%E6%80%81%E6%93%8D%E4%BD%9C%E5%B8%83%E5%B1%80/\">动态操作布局</a></p>\n<h1 id=\"View的事件分发机制\"><a href=\"#View的事件分发机制\" class=\"headerlink\" title=\"View的事件分发机制\"></a>View的事件分发机制</h1><p><li> dispatchTouchEvent</li></p>\n<p>位于View类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span> <span class=\"params\">(MotionEvent event)</span></span></span><br></pre></td></tr></table></figure>\n<p><li> onInterceptTouchEvent</li></p>\n<p>位于ViewGroup类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span> <span class=\"params\">(MotionEvent ev)</span></span></span><br></pre></td></tr></table></figure>\n<p><li> onTouchEvent</li></p>\n<p>位于View类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span> <span class=\"params\">(MotionEvent event)</span></span></span><br></pre></td></tr></table></figure>\n<p>以上三个方法的关系为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span> <span class=\"params\">(MotionEvent event)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">boolean</span> consume=<span class=\"keyword\">false</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(onInterceptTouchEvent(event))&#123;</span><br><span class=\"line\">    consume=onTouchEvent (event);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    consume=child.dispatchTouchEvent(event);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> consume;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在dispatchTouchEvent中调用onInterceptTouchEvent方法判断是否拦截该事件，若拦截则执行onTouchEvent方法，否则就将事件传给子元素</p>\n</blockquote>\n<p><img src=\"/img/Android/View的事件体系/View的事件分发机制.png\" alt=\"View的事件分发机制\"></p>\n<p>eg:</p>\n<p><em>VieWer.class：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This is an Activity.</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"dispatchTouchEvent\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"dispatchTouchEvent\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>ButtoNer.class：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//This is a View extend AppCompatButton.</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"dispatchTouchEvent\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"onTouchEvent\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(event);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>VieWer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEvent<br><br><br><br>ButtoNer: dispatchTouchEvent<br><br>ButtoNer: onTouchEvent<br><br>ButtoNer: dispatchTouchEvent<br><br>ButtoNer: onTouchEvent</p>\n</blockquote>\n<p>当ButtoNer的dispatchTouchEvent返回true</p>\n<blockquote>\n<p>VieWer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEven<br><br><br><br>ButtoNer: dispatchTouchEvent<br><br>ButtoNer: dispatchTouchEvent</p>\n</blockquote>\n<p>当ButtoNer的dispatchTouchEvent返回false</p>\n<p><em>?：</em></p>\n<blockquote>\n<p>VieWer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEvent<br><br>//返回false后抬起事件也不会处理<br><br>ButtoNer: dispatchTouchEvent</p>\n</blockquote>\n<p>当VieWer的dispatchTouchEvent返回false/true</p>\n<blockquote>\n<p>VieWer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEvent</p>\n</blockquote>\n<p>当ButtoNer的onTouchEvent返回false</p>\n<p><em>?：</em></p>\n<blockquote>\n<p>ButtoNer: dispatchTouchEvent<br><br>ButtoNer: onTouchEvent<br><br><br><br>VieWer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEvent</p>\n</blockquote>\n<p>当ButtoNer的onTouchEvent返回true</p>\n<blockquote>\n<p>ButtoNer: dispatchTouchEvent<br><br>ButtoNer: onTouchEvent<br><br>ButtoNer: dispatchTouchEvent<br><br>ButtoNer: onTouchEvent<br><br><br><br>VieWer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEvent</p>\n</blockquote>\n<p><strong>ViewGroup中mOnTouchListenner的onTouch会屏蔽onTouchEvent方法</strong></p>\n<h1 id=\"View的事件传递机制\"><a href=\"#View的事件传递机制\" class=\"headerlink\" title=\"View的事件传递机制\"></a>View的事件传递机制</h1><p><strong><font size=\"4sp\">点击事件产生后的传递顺序：</font></strong></p>\n<blockquote>\n<p>Activity -&gt; Window -&gt; View -&gt; 按照事件分发机制分发事件，如，当onTouchEvent返回false和true不同的分发方法（返回false则其父容器的onTouchEvent会被调用）</p>\n</blockquote>\n<p><li> 事件序列从dowm事件开始，经过若干个move事件，最终以up结束</li></p>\n<p><li> 一个事件序列只能被一个View拦截消耗</li></p>\n<p><li> 一个View若不消耗ACTION_DOWN事件（onTouchEvent返回false），则其它事件也不再交由其消耗</li></p>\n<p><li> 一个View若不消耗除ACTION_DOWN的其它事件，该点击事件会消失，但当前View仍然可以持续接收到后续事件，而未消耗的点击事件将交由activity处理</li></p>\n<p><li> ViewGroup默认不拦截仍然事件（onInterceptTouchEvent方法默认返回false）</li></p>\n<p><li> 除了View不可点击，否则View的onTouchEvent方法默认都会消耗事件</li></p>\n<p><li> View的enable属性不影响onTouchEvent的返回值</li></p>\n<p><li> 事件遵循先传递给父元素然后再传递给子View的由外向内的传递方式</li></p>\n<blockquote>\n<p>其中requestDisallowInterceptTouchEvent方法可干预父元素的事件分发过程（ACTION_DOWN除外）,eg:</p>\n</blockquote>\n<p><em>android.view.ViewGroup.java:</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//method：dispatchTouchEvent</span></span><br><span class=\"line\"><span class=\"comment\">// Check for interception.</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> intercepted;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (actionMasked == MotionEvent.ACTION_DOWN</span><br><span class=\"line\">        || mFirstTouchTarget != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!disallowIntercept) &#123;</span><br><span class=\"line\">        intercepted = onInterceptTouchEvent(ev);</span><br><span class=\"line\">        ev.setAction(action); <span class=\"comment\">// restore action in case it was changed</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// There are no touch targets and this action is not an initial down</span></span><br><span class=\"line\">    <span class=\"comment\">// so this view group continues to intercept touches.</span></span><br><span class=\"line\">    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当子元素会处理了事件会对mFirstTouchTarget被赋值，即mFirstTouchTarget!=null成立，若事件没有被子元素消耗时，则mFirstTouchTarget!=null为false，此时ViewGroup就不会调用拦截器。其中FLAG_DISALLOW_INTERCEPT标签子元素可通过调用requestDisallowInterceptTouchEvent方法设定，所以子元素可以阻止ViewGroup拦截事件</p>\n<p>接下来：</p>\n<p><em>android.view.ViewGroup.java:</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//method：dispatchTouchEvent</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = childrenCount - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childIndex = getAndVerifyPreorderedIndex(</span><br><span class=\"line\">            childrenCount, i, customOrder);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> View child = getAndVerifyPreorderedView(</span><br><span class=\"line\">            preorderedList, children, childIndex);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If there is a view that has accessibility focus we want it</span></span><br><span class=\"line\">    <span class=\"comment\">// to get the event first and if not handled we will perform a</span></span><br><span class=\"line\">    <span class=\"comment\">// normal dispatch. We may do a double iteration but this is</span></span><br><span class=\"line\">    <span class=\"comment\">// safer given the timeframe.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (childWithAccessibilityFocus != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childWithAccessibilityFocus != child) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        childWithAccessibilityFocus = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        i = childrenCount - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!canViewReceivePointerEvents(child)</span><br><span class=\"line\">            || !isTransformedTouchPointInView(x, y, child, <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">        ev.setTargetAccessibilityFocus(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    newTouchTarget = getTouchTarget(child);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newTouchTarget != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Child is already receiving touch within its bounds.</span></span><br><span class=\"line\">        <span class=\"comment\">// Give it the new pointer in addition to the ones it is handling.</span></span><br><span class=\"line\">        newTouchTarget.pointerIdBits |= idBitsToAssign;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    resetCancelNextUpFlag(child);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dispatchTransformedTouchEvent(ev, <span class=\"keyword\">false</span>, child, idBitsToAssign)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Child wants to receive touch within its bounds.</span></span><br><span class=\"line\">        mLastTouchDownTime = ev.getDownTime();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (preorderedList != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// childIndex points into presorted list, find original index</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; childrenCount; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (children[childIndex] == mChildren[j]) &#123;</span><br><span class=\"line\">                    mLastTouchDownIndex = j;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            mLastTouchDownIndex = childIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mLastTouchDownX = ev.getX();</span><br><span class=\"line\">        mLastTouchDownY = ev.getY();</span><br><span class=\"line\">        newTouchTarget = addTouchTarget(child, idBitsToAssign);</span><br><span class=\"line\">        alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// The accessibility focus didn't handle the event, so clear</span></span><br><span class=\"line\">    <span class=\"comment\">// the flag and do a normal dispatch to all children.</span></span><br><span class=\"line\">    ev.setTargetAccessibilityFocus(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>以上源码表明会先遍历ViewGroup的子View，通过canViewReceivePointerEvents方法（点击事件坐标是否落在子元素内）和isTransformedTouchPointInView方法（子View是否在播放动画）判断子View是否接收到了点击事件，没有接收到则continute到下一个子View，这两个方法源码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns true if a child view can receive pointer events.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@hide</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canViewReceivePointerEvents</span><span class=\"params\">(@NonNull View child)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (child.mViewFlags &amp; VISIBILITY_MASK) == VISIBLE</span><br><span class=\"line\">            || child.getAnimation() != <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">float</span>[] getTempPoint() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mTempPoint == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        mTempPoint = <span class=\"keyword\">new</span> <span class=\"keyword\">float</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mTempPoint;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Returns true if a child view contains the specified point when transformed</span></span><br><span class=\"line\"><span class=\"comment\"> * into its coordinate space.</span></span><br><span class=\"line\"><span class=\"comment\"> * Child must not be null.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@hide</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTransformedTouchPointInView</span><span class=\"params\">(<span class=\"keyword\">float</span> x, <span class=\"keyword\">float</span> y, View child,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        PointF outLocalPoint)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">float</span>[] point = getTempPoint();</span><br><span class=\"line\">    point[<span class=\"number\">0</span>] = x;</span><br><span class=\"line\">    point[<span class=\"number\">1</span>] = y;</span><br><span class=\"line\">    transformPointToViewLocal(point, child);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> isInView = child.pointInView(point[<span class=\"number\">0</span>], point[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isInView &amp;&amp; outLocalPoint != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        outLocalPoint.set(point[<span class=\"number\">0</span>], point[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isInView;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>若子View接收了点击事件则会执行dispatchTransformedTouchEvent即子View的dispatchTouchEvent方法</strong></p>\n<p>最后通过以下代码完成了对mFirstTouchTarget的赋值并跳出循环</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//method：dispatchTouchEvent</span></span><br><span class=\"line\">newTouchTarget = addTouchTarget(child, idBitsToAssign);</span><br><span class=\"line\">alreadyDispatchedToNewTouchTarget = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure>\n<p>addTouchTarget方法源码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//method：addTouchTarget</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> TouchTarget <span class=\"title\">addTouchTarget</span><span class=\"params\">(@NonNull View child, <span class=\"keyword\">int</span> pointerIdBits)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> TouchTarget target = TouchTarget.obtain(child, pointerIdBits);</span><br><span class=\"line\">    target.next = mFirstTouchTarget;</span><br><span class=\"line\">    mFirstTouchTarget = target;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若遍历完所有子View事件都未被处理，将由ViewGroup自己处理，导致这种情况一般有两个原因：</p>\n<ol>\n<li>不存在子View</li>\n<li>子View在dispatchTouchEvent方法返回了false，即onTouchEvent返回了false，详见前面它们的关系源码</li>\n</ol>\n<blockquote>\n<p>在View处理点击事件时，首先判断是否设置了OnTouchListener，若设置了OnTouchListener且onTouch中返回了true则onTouchEvent方法就不会执行，eg：</p>\n</blockquote>\n<p><em>VieWer.class：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buttoNer.setOnTouchListener(<span class=\"keyword\">new</span> View.OnTouchListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View view, MotionEvent motionEvent)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onTouch\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">buttoNer.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onClick\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><em>ButtoNer.class：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ButtoNer</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatButton</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=ButtoNer.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ButtoNer</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"dispatchTouchEvent\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onTouchEvent\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>ButtoNer: dispatchTouchEvent<br><br>ButtoNer: onTouchEvent<br><br>VieWer: onTouch<br><br>VieWer: onClick</p>\n</blockquote>\n<p>当onTouch返回true时：</p>\n<blockquote>\n<p>ButtoNer: dispatchTouchEvent<br><br>VieWer: dispatchTouchEvent<br><br>VieWer: onTouch</p>\n</blockquote>\n<p><em>注意：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buttoNer.setEnabled(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>VieWer: dispatchTouchEvent<br><br>ButtoNer: dispatchTouchEvent<br><br>ButtoNer: onTouchEvent</p>\n</blockquote>\n<p>如上所示即使将View设置为不可用，onTouchEvent仍然会消耗点击事件，但View的OnClickListener和OnTouch都将不会消耗点击事件。</p>\n<p><em>View.class：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//method: onTouchEvent</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        setPressed(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// A disabled view that is clickable still consumes the touch</span></span><br><span class=\"line\">    <span class=\"comment\">// events, it just doesn't respond to them.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE</span><br><span class=\"line\">            || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</span><br><span class=\"line\">            || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由以上onTouchEvent方法中的代码可证得即使设置为DISABLED只要监听到了CLICKABLE，LONG_CLICKABLE，CONTEXT_CLICKABLE中的任何一个事件，onTouchEvent都会返回一个true。</p>\n<p><em>View.class：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//method: onTouchEvent</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</span><br><span class=\"line\">                (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||</span><br><span class=\"line\">                (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (action) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">                    <span class=\"keyword\">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class=\"number\">0</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class=\"number\">0</span> || prepressed) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// take focus if we don't have it already and we should in</span></span><br><span class=\"line\">                        <span class=\"comment\">// touch mode.</span></span><br><span class=\"line\">                        <span class=\"keyword\">boolean</span> focusTaken = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</span><br><span class=\"line\">                            focusTaken = requestFocus();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (prepressed) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// The button is being released before we actually</span></span><br><span class=\"line\">                            <span class=\"comment\">// showed it as pressed.  Make it show the pressed</span></span><br><span class=\"line\">                            <span class=\"comment\">// state now (before scheduling the click) to ensure</span></span><br><span class=\"line\">                            <span class=\"comment\">// the user sees it.</span></span><br><span class=\"line\">                            setPressed(<span class=\"keyword\">true</span>, x, y);</span><br><span class=\"line\">                       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</span><br><span class=\"line\">                            <span class=\"comment\">// This is a tap, so remove the longpress check</span></span><br><span class=\"line\">                            removeLongPressCallback();</span><br><span class=\"line\"></span><br><span class=\"line\">                            <span class=\"comment\">// Only perform take click actions if we were in the pressed state</span></span><br><span class=\"line\">                            <span class=\"keyword\">if</span> (!focusTaken) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">// Use a Runnable and post this rather than calling</span></span><br><span class=\"line\">                                <span class=\"comment\">// performClick directly. This lets other visual state</span></span><br><span class=\"line\">                                <span class=\"comment\">// of the view update before click actions start.</span></span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (mPerformClick == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                                    mPerformClick = <span class=\"keyword\">new</span> PerformClick();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (!post(mPerformClick)) &#123;</span><br><span class=\"line\">                                    performClick();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        ...............</span><br></pre></td></tr></table></figure></p>\n<p>当未设置成ENABLED时，由以上代码可知View会调用performClick方法，而如果设置了OnClickListener则performClick会调用其中方法，从中也可证明当设置eneable为false为什么不会调用OnclickListener方法。</p>\n<p><em>View.class：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">performClick</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ListenerInfo li = mListenerInfo;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnClickListener != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        playSoundEffect(SoundEffectConstants.CLICK);</span><br><span class=\"line\">        li.mOnClickListener.onClick(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        result = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>View.class：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//method：dispatchTouchEvent</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (li != <span class=\"keyword\">null</span> &amp;&amp; li.mOnTouchListener != <span class=\"keyword\">null</span></span><br><span class=\"line\">        &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</span><br><span class=\"line\">        &amp;&amp; li.mOnTouchListener.onTouch(<span class=\"keyword\">this</span>, event)) &#123;</span><br><span class=\"line\">    result = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</span><br><span class=\"line\">    result = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可知当设置为DISABLED，onTouch方法也是不会消耗事件的，若设置为ENABLED，会先执行onTouch方法，若返回true，那么result就为true，导致onTouchEvent方法无法得到执行，这就证明了OnTouch的优先大于OnTouchEvent的优先级，同时也证明了为什么将eneable设置为false后onTouch不执行。</p>\n<p><em>注意：</em></p>\n<p>LONG_CLICKABLE属性默认为false，CLICKBLE默认属性与具体的View有关，但当setOnclickListener时，会自动将CLICKABLE设置为true。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setOnClickListener</span><span class=\"params\">(@Nullable OnClickListener l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isClickable()) &#123;</span><br><span class=\"line\">        setClickable(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getListenerInfo().mOnClickListener = l;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"滑动冲突\"><a href=\"#滑动冲突\" class=\"headerlink\" title=\"滑动冲突\"></a>滑动冲突</h1><p>当一个可滑动的布局里存在一个也可滑动的控件时会出现滑动冲突，即在控件视图内无法滑动布局，eg：</p>\n<p><strong><li> HorizontalScrollView和ListView</li></strong></p>\n<p>当HorizontalScrollView和ListView三个方法均返回super时，不存在滑动冲突都可正常滑动</p>\n<p>当HorizontalScrollView的拦截器方法返回true时HorizontalScrollView滑动正常，ListView无法滑动</p>\n<p>当HorizontalScrollVie的拦截器返回false则出现滑动冲突</p>\n<p><strong>onInterceptTouchEvent</strong>返回<strong>super.onInterceptTouchEvent(ev)</strong>则会自动处理滑动冲突</p>\n","categories":["Android"],"tags":[]},{"title":"自底向上优先分析","url":"https://grooters.github.io/2018/10/29/自底向上优先分析/","content":"<p><strong><font size=\"4sp\"> 短语直接短语与句柄的求法：</font></strong></p>\n<p><img src=\"/img/编译原理/自底向上优先分析/短语直接短语与句柄.jpg\" alt=\"短语直接短语与句柄\"></p>\n<h1 id=\"规范规约\"><a href=\"#规范规约\" class=\"headerlink\" title=\"规范规约\"></a>规范规约</h1><blockquote>\n<p>最右推导，即<strong>最左规约</strong></p>\n</blockquote>\n<p>规范规约步骤，eg：</p>\n<p><img src=\"/img/编译原理/自底向上优先分析/规范规约步骤.PNG\" alt=\"规范规约步骤\"></p>\n<h1 id=\"优先分析法包括\"><a href=\"#优先分析法包括\" class=\"headerlink\" title=\"优先分析法包括\"></a>优先分析法包括</h1><p><li> 简单优先分析法</li></p>\n<blockquote>\n<p>按一定原则定义文法中所有符号（终结符和非终结符）之间的优先关系，按照这种关系确定归约过程中的句柄并实行归约。是一种规范归约，但效率低。</p>\n</blockquote>\n<p><li> 算符优先分析法</li></p>\n<blockquote>\n<p>只定义文法中终结符之间的优先关系（不考虑非终结符），并由这种关系指导分析过程。不是规范归约，但分析速度快。</p>\n</blockquote>\n<p><img src=\"/img/编译原理/自底向上优先分析/算符优先规约步骤.PNG\" alt=\"算符优先规约步骤\"></p>\n<blockquote>\n<p>通常算术表达式的运算次序是先乘除后加减，同优先级相同时服从左结合</p>\n</blockquote>\n<h1 id=\"优先关系\"><a href=\"#优先关系\" class=\"headerlink\" title=\"优先关系\"></a>优先关系</h1><p><img src=\"/img/编译原理/自底向上优先分析/优先关系.PNG\" alt=\"优先关系\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在当前句柄中的符号优先于与其相邻的不在句柄中的符号</span><br><span class=\"line\"></span><br><span class=\"line\"># &lt; 任何与它相邻的运算符</span><br><span class=\"line\"></span><br><span class=\"line\">括号 &gt; 括号外的运算符 ， &lt; 括号内的运算符</span><br><span class=\"line\"></span><br><span class=\"line\">运算对象i（整数）最高</span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"3sp\"><li> 算符文法</li></font></strong></p>\n<blockquote>\n<p>上下文无关文法 G ，如果G中产生式的右部没有两个非终结符相连，则称G为算符文法</p>\n</blockquote>\n<p><strong><font size=\"3sp\"><li> 算符优先文法</li></font></strong></p>\n<blockquote>\n<p>设有一不含ε产生式的算符文法G，如果对任意两个终结符对a,b之间至多只有一种优先关系成立，则称G是一个算符优先文法(Operater Precedence Grammar)，即OPG文法</p>\n</blockquote>\n<p><img src=\"/img/编译原理/自底向上优先分析/规范规约与算符规约.PNG\" alt=\"规范规约与算符规约\"></p>\n<h1 id=\"FIRSTVT与LASTVY\"><a href=\"#FIRSTVT与LASTVY\" class=\"headerlink\" title=\"FIRSTVT与LASTVY\"></a>FIRSTVT与LASTVY</h1><p><li> FIRSTVT的求法</li></p>\n<p><img src=\"/img/编译原理/自底向上优先分析/FIRSTVT求法.PNG\" alt=\"FIRSTVT的求法\"></p>\n<p><li> LASTVT的求法</li></p>\n<p><img src=\"/img/编译原理/自底向上优先分析/LASTVT求法.PNG\" alt=\"LASTVT的求法\"></p>\n<p><li> 通过FIRSTVT和LASTVT求优先关系</li></p>\n<p><img src=\"/img/编译原理/自底向上优先分析/通过FIRSTVT和LASTVT求优先关系.PNG\" alt=\"通过FIRSTVT和LASTVT求优先关系\"></p>\n","categories":["编译原理"],"tags":[]},{"title":"Android的IPC机制","url":"https://grooters.github.io/2018/10/18/Android的IPC机制/","content":"<blockquote>\n<p>Inter-Process Communication =&gt; 进程间通信</p>\n</blockquote>\n<p><strong><li> app多进程的开启</li></strong></p>\n<p>在定义四大组件时添加如下属性：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:process=\":remote\"</span><br><span class=\"line\">android:process=\"io.github.grooters.remote\"</span><br></pre></td></tr></table></figure>\n<p>:remote指<strong>当前app的包名.remote</strong>，为<strong>私有进程</strong></p>\n<p>由于开启多进程后，处于不同进程的组件会导致数据无法通信问题，故需要通过以下方式实现IPC</p>\n<h1 id=\"Serializable\"><a href=\"#Serializable\" class=\"headerlink\" title=\"Serializable\"></a><a href=\"https://developer.android.google.cn/reference/java/io/Serializable\" target=\"_blank\" rel=\"noopener\">Serializable</a></h1><blockquote>\n<p>实现Serializable接口的类可通过Intent和Binder进行传递</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">42L</span>;</span><br></pre></td></tr></table></figure>\n<p>该长整形静态常量用于辅助序列化与反序列化操作，通过识别该id可判断对象是否发生改变</p>\n<p>eg:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Serializabler</span> <span class=\"title\">implement</span> <span class=\"title\">Serializable</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">long</span> serialVersionUID = <span class=\"number\">42L</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>传递对象：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle.putSerializable(<span class=\"string\">\"key\"</span>,serializabler);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"key\"</span>,bundle);</span><br></pre></td></tr></table></figure>\n<p><em>写出/读入对象：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    ObjectOutputStream outputStream = <span class=\"keyword\">new</span> ObjectOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"keyword\">new</span> File(Environment.getExternalStorageDirectory().getAbsolutePath()+<span class=\"string\">\"/test.text\"</span>)));</span><br><span class=\"line\">    outputStream.writeObject(serializabler);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Parceleable\"><a href=\"#Parceleable\" class=\"headerlink\" title=\"Parceleable\"></a><a href=\"https://developer.android.google.cn/reference/android/os/Parcelable\" target=\"_blank\" rel=\"noopener\">Parceleable</a></h1><p>需要重写四个方法：</p>\n<p><li> public int describeContents()</li></p>\n<blockquote>\n<p>内容描述，无描述返回0，有描述返回CONTENTS_FILE_DESCRIPTOR（1）</p>\n</blockquote>\n<p><li> public abstract void writeToParcel（Parcel dest，int flags）</li></p>\n<blockquote>\n<p>序列化方法</p>\n</blockquote>\n<p><li> <a href=\"https://developer.android.google.cn/reference/android/os/Parcelable.Creator\" target=\"_blank\" rel=\"noopener\">Parcelable.Creator</a></li></p>\n<p>需要实现的接口，包括以下方法：</p>\n<p><li> public abstract T createFromParcel（Parcel source）</li></p>\n<blockquote>\n<p>反序列化</p>\n</blockquote>\n<p><li> public abstract T [] newArray（int size）</li></p>\n<blockquote>\n<p>创建一个Parceleable类型的新数组</p>\n</blockquote>\n<p>eg:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.grooters.practicer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Parcel;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Parcelable;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create by 李林浪 in 2018/10/24</span></span><br><span class=\"line\"><span class=\"comment\"> * Elegant Code...</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Parceleabler</span> <span class=\"keyword\">implements</span> <span class=\"title\">Parcelable</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> sex;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getId</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setId</span><span class=\"params\">(<span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getSex</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setSex</span><span class=\"params\">(<span class=\"keyword\">int</span> sex)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.sex = sex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Parcelable.Creator&lt;Parceleabler&gt; CREATOR=<span class=\"keyword\">new</span> Parcelable.Creator&lt;Parceleabler&gt;()&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> Parceleabler <span class=\"title\">createFromParcel</span><span class=\"params\">(Parcel source)</span> </span>&#123;</span><br><span class=\"line\">            Parceleabler parceleabler=<span class=\"keyword\">new</span> Parceleabler();</span><br><span class=\"line\">            <span class=\"comment\">//顺序要和序列化的write操作一样</span></span><br><span class=\"line\">            parceleabler.setId(source.readInt());</span><br><span class=\"line\">            parceleabler.setName(source.readString());</span><br><span class=\"line\">            parceleabler.setSex(source.readInt());</span><br><span class=\"line\">            <span class=\"keyword\">return</span> parceleabler;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Parceleabler[] newArray(<span class=\"keyword\">int</span> size) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Parceleabler[size];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">describeContents</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">writeToParcel</span><span class=\"params\">(Parcel dest, <span class=\"keyword\">int</span> flags)</span> </span>&#123;</span><br><span class=\"line\">        dest.writeInt(id);</span><br><span class=\"line\">        dest.writeString(name);</span><br><span class=\"line\">        dest.writeInt(sex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>传递和写出读入方法和Serializable方法相同  </p>\n<h1 id=\"Binder\"><a href=\"#Binder\" class=\"headerlink\" title=\"Binder\"></a><a href=\"https://developer.android.google.cn/reference/android/os/Binder\" target=\"_blank\" rel=\"noopener\">Binder</a></h1><h2 id=\"Android-接口定义语言-AIDL\"><a href=\"#Android-接口定义语言-AIDL\" class=\"headerlink\" title=\"Android 接口定义语言 (AIDL)\"></a><a href=\"https://developer.android.google.cn/guide/components/aidl\" target=\"_blank\" rel=\"noopener\">Android 接口定义语言 (AIDL)</a></h2><blockquote>\n<p>新建一个AIDL文件系统会自动生成对应的java文件，eg：</p>\n</blockquote>\n<p><em>IBookManager.aidl：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IBookManager.aidl</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> io.github.grooters.practicer.BindeRer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.github.grooters.practicer.BindeRer.Book;</span><br><span class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBookManager</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Demonstrates some basic types that you can use as parameters</span></span><br><span class=\"line\"><span class=\"comment\">     * and return values in AIDL.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">     <span class=\"function\">List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(in Book book)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>IBookManager.java：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * This file is auto-generated.  DO NOT MODIFY.</span></span><br><span class=\"line\"><span class=\"comment\"> * Original file: D:\\\\Android\\\\Source\\\\Practicer\\\\app\\\\src\\\\main\\\\aidl\\\\io\\\\github\\\\grooters\\\\practicer\\\\BindeRer\\\\IBookManager.aidl</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> io.github.grooters.practicer.BindeRer;</span><br><span class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IBookManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span> </span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/** Local-side IPC implementation stub class. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">io</span>.<span class=\"title\">github</span>.<span class=\"title\">grooters</span>.<span class=\"title\">practicer</span>.<span class=\"title\">BindeRer</span>.<span class=\"title\">IBookManager</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"io.github.grooters.practicer.BindeRer.IBookManager\"</span>;</span><br><span class=\"line\">        <span class=\"comment\">/** Construct the stub at attach it to the interface. */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Cast an IBinder object into an io.github.grooters.practicer.BindeRer.IBookManager interface,</span></span><br><span class=\"line\"><span class=\"comment\">         * generating a proxy if needed.</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> io.github.grooters.practicer.BindeRer.<span class=\"function\">IBookManager <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((obj==<span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (((iin!=<span class=\"keyword\">null</span>)&amp;&amp;(iin <span class=\"keyword\">instanceof</span> io.github.grooters.practicer.BindeRer.IBookManager))) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ((io.github.grooters.practicer.BindeRer.IBookManager)iin);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> io.github.grooters.practicer.BindeRer.IBookManager.Stub.Proxy(obj);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (code) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> INTERFACE_TRANSACTION: &#123;</span><br><span class=\"line\">                    reply.writeString(DESCRIPTOR);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_getBookList: &#123;</span><br><span class=\"line\">                    data.enforceInterface(DESCRIPTOR);</span><br><span class=\"line\">                    java.util.List&lt;io.github.grooters.practicer.BindeRer.Book&gt; _result = <span class=\"keyword\">this</span>.getBookList();</span><br><span class=\"line\">                    reply.writeNoException();</span><br><span class=\"line\">                    reply.writeTypedList(_result);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> TRANSACTION_addBook: &#123;</span><br><span class=\"line\">                    data.enforceInterface(DESCRIPTOR);</span><br><span class=\"line\">                    io.github.grooters.practicer.BindeRer.Book _arg0;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((<span class=\"number\">0</span>!=data.readInt())) &#123;</span><br><span class=\"line\">                        _arg0 = io.github.grooters.practicer.BindeRer.Book.CREATOR.createFromParcel(data);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        _arg0 = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">this</span>.addBook(_arg0);</span><br><span class=\"line\">                    reply.writeNoException();</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">io</span>.<span class=\"title\">github</span>.<span class=\"title\">grooters</span>.<span class=\"title\">practicer</span>.<span class=\"title\">BindeRer</span>.<span class=\"title\">IBookManager</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> android.os.IBinder mRemote;</span><br><span class=\"line\">            Proxy(android.os.IBinder remote)&#123;</span><br><span class=\"line\">              mRemote = remote;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> mRemote;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> DESCRIPTOR;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * Demonstrates some basic types that you can use as parameters</span></span><br><span class=\"line\"><span class=\"comment\">             * and return values in AIDL.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> java.util.List&lt;io.github.grooters.practicer.BindeRer.Book&gt; getBookList() <span class=\"keyword\">throws</span> android.os.RemoteException &#123;</span><br><span class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class=\"line\">                java.util.List&lt;io.github.grooters.practicer.BindeRer.Book&gt; _result;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class=\"line\">                    mRemote.transact(Stub.TRANSACTION_getBookList, _data, _reply, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    _reply.readException();</span><br><span class=\"line\">                    _result = _reply.createTypedArrayList(io.github.grooters.practicer.BindeRer.Book.CREATOR);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    _reply.recycle();</span><br><span class=\"line\">                    _data.recycle();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> _result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(io.github.grooters.practicer.BindeRer.Book book)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span></span><br><span class=\"line\"><span class=\"function\">            </span>&#123;</span><br><span class=\"line\">                android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class=\"line\">                android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    _data.writeInterfaceToken(DESCRIPTOR);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((book!=<span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">                        _data.writeInt(<span class=\"number\">1</span>);</span><br><span class=\"line\">                        book.writeToParcel(_data, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        _data.writeInt(<span class=\"number\">0</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    mRemote.transact(Stub.TRANSACTION_addBook, _data, _reply, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    _reply.readException();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    _reply.recycle();</span><br><span class=\"line\">                    _data.recycle();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_getBookList = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_addBook = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.util.List&lt;io.github.grooters.practicer.BindeRer.Book&gt; getBookList() <span class=\"keyword\">throws</span> android.os.RemoteException;</span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(io.github.grooters.practicer.BindeRer.Book book)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><li> asInterface (android.os.IBinder obj)</li></p>\n<p>将服务端Binder对象转换成客户端所需的AIDL接口类型的对象，若客户端和服务端在不同进程，则返回的是<strong>Stub.Proxy</strong> ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (((iin!=<span class=\"keyword\">null</span>)&amp;&amp;(iin <span class=\"keyword\">instanceof</span> io.github.grooters.practicer.BindeRer.IBookManager))) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((io.github.grooters.practicer.BindeRer.IBookManager)iin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> io.github.grooters.practicer.BindeRer.IBookManager.Stub.Proxy(obj);</span><br></pre></td></tr></table></figure>\n<p><li> android.os.IBinder asBinder()</li></p>\n<blockquote>\n<p>返回当前的Binder对象（实现了IBinder接口）</p>\n</blockquote>\n<p><li> onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags)</li></p>\n<blockquote>\n<p>运行在服务端的Binder线程池中，当跨进程访问时会通过code判断出使用哪个方法，当方法执行后，会将_result结果写入到reply中：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.util.List&lt;io.github.grooters.practicer.BindeRer.Book&gt; _result = <span class=\"keyword\">this</span>.getBookList();</span><br><span class=\"line\">reply.writeNoException();</span><br><span class=\"line\">reply.writeTypedList(_result);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>当返回false时表示请求失败</strong></p>\n<p><li> 客户端定义的方法（getBookList，addBook）</li></p>\n<blockquote>\n<p>方法中含有输入Paecel对象_data，输出Parcel对象_reply和返回值对象，其中方法参数会写入_data对象，然后调用transact方法发起RPC(远程过程调用)请求，此时该线程会挂起，直到onTransact中对应的方法执行并返回reply才会重写激活线程，此时可从_reply中获取对应的结果</p>\n</blockquote>\n<p>Binder工作机制：</p>\n<p><img src=\"/img/Android/Android的IPC机制/Binder的工作机制.jpg\" alt=\"Binder工作机制\"></p>\n<h2 id=\"跨进程方式\"><a href=\"#跨进程方式\" class=\"headerlink\" title=\"跨进程方式\"></a>跨进程方式</h2><h3 id=\"Messenger\"><a href=\"#Messenger\" class=\"headerlink\" title=\"Messenger\"></a>Messenger</h3><p><em>客户端：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,Servicer.class);</span><br><span class=\"line\">bindService(intent,serviceConnection, Context.BIND_AUTO_CREATE);</span><br><span class=\"line\">ServiceConnection serviceConnection=<span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class=\"line\">        Messenger reply=<span class=\"keyword\">new</span> Messenger(<span class=\"keyword\">new</span> MessengerHandler());</span><br><span class=\"line\">        Messenger messenger=<span class=\"keyword\">new</span> Messenger(service);</span><br><span class=\"line\">        Message msg=Message.obtain();</span><br><span class=\"line\">        msg.replyTo=reply;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            messenger.send(msg);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessengerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"handleMessage\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>创建一个绑定了Binder的Messenger对象用于发送消息，再创建一个绑定了MessengerHandler的Messenger对象并作为replyTo传过给服务端。</p>\n<p><em>服务端：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servicer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MessagerHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">            Messenger client=msg.replyTo;</span><br><span class=\"line\">            Message message=Message.obtain();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                client.send(message);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Messenger messenger=<span class=\"keyword\">new</span> Messenger(<span class=\"keyword\">new</span> MessagerHandler());</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> messenger.getBinder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onUnbind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onUnbind(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>服务端收到消息后从Message中取出客户端存入的replyTo即绑定了客户端Handler的Messenger对象，通过该对象服务端可以向客户端发送消息。</p>\n<p><img src=\"/img/Android/Android的IPC机制/Messenger.PNG\" alt=\"Messenger的工作原理\"></p>\n<h3 id=\"AIDL\"><a href=\"#AIDL\" class=\"headerlink\" title=\"AIDL\"></a>AIDL</h3><p><em>服务端：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servicer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">  IBinder iBookManager=<span class=\"keyword\">new</span> IBookManager.Stub() &#123;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title\">getBookList</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">          Log.i(TAG,<span class=\"string\">\"getBookList()\"</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addBook</span><span class=\"params\">(Book book)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">          Log.i(TAG,<span class=\"string\">\"book.id：\"</span>+book.getId());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"meta\">@Override</span></span><br><span class=\"line\">      <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实例化通过AIDL定义自动生成的Java类中的内部类IBookManager.Stub，实现提供给客户端调用的方法</p>\n<p><em>客户端：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,Servicer.class);</span><br><span class=\"line\">ServiceConnection serviceConnection=<span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onServiceConnected\"</span>);</span><br><span class=\"line\">        IBookManager bookManager=IBookManager.Stub.asInterface(service);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> Book book=<span class=\"keyword\">new</span> Book();</span><br><span class=\"line\">            book.setId(<span class=\"number\">5</span>);</span><br><span class=\"line\">            bookManager.addBook(book);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>通过调用IBookManager.Stub类中的asInterface方法传入服务端返回的IBinder对象获得IBookManager对象，通过该对象便可调用服务端方法</p>\n<p><strong><font size=\"4sp\">RemoteCallbackList</font></strong></p>\n<p>由于跨进程通讯，从客户端传到服务端的对象会被重建（序列化和反序列化），所以无法通过简单的对象判断来识别是否是同一个对象，针对某种情况需要注销对某个listener的监听(如监听者模式)，该类就提供了解决方案</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> RemoteCallbackList&lt;BookArrivedListener&gt; bookArrivedListeners=<span class=\"keyword\">new</span> RemoteCallbackList&lt;&gt;();</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">registerListener</span><span class=\"params\">(BookArrivedListener listener)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">    bookArrivedListeners.register(listener);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unRegisterListener</span><span class=\"params\">(BookArrivedListener listener)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">    bookArrivedListeners.unregister(listener);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该类为map结构实现对listnner的存储，通过IBinder作为key值，通过Callback保存listnner后作为value：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IBinder key=listner.asBinder()</span><br><span class=\"line\">Callback value=<span class=\"keyword\">new</span> Callback(listener,cookies)</span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"5sp\">权限验证</font></strong></p>\n<p><li> 在onBinder中验证</li></p>\n<p>服务端：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"io.github.grooters.practicer.BindeRer.ACCESS_BOOK\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:protectionLevel</span>=<span class=\"string\">\"normal\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"onBind\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> check=checkCallingOrSelfPermission(<span class=\"string\">\"io.github.grooters.practicer.BindeRer.ACCESS_BOOK\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(check==PackageManager.PERMISSION_DENIED)&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"check==PackageManager.PERMISSION_DENIED\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> iBookManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>checkCallingOrSelfPermission判断是否具有某项权限，有返回0，没有返回1</p>\n<p>PackageManager.PERMISSION_DENIED指不具备该权限</p>\n<p>PackageManager.PERMISSION_GRANTED指具备该权限</p>\n<p>客户端：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">uses-permission</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"io.github.grooters.practicer.BindeRer.ACCESS_BOOK\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><li> 在onBinder中验证</li></p>\n<p>服务端：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, Parcel data, Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> RemoteException </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> check = checkCallingPermission(<span class=\"string\">\"io.github.grooters.practicer.BindeRer.ACCESS_BOOK\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(check == PackageManager.PERMISSION_DENIED)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>深入了解Binder可参看这篇文章：</p>\n<p><a href=\"https://blog.csdn.net/carson_ho/article/details/73560642\" target=\"_blank\" rel=\"noopener\">Android跨进程通信：图文详解 Binder机制 原理</a></p>\n<h3 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h3><blockquote>\n<p>具体参考内容提供器的使用</p>\n</blockquote>\n<h3 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h3>","categories":["Android"],"tags":[]},{"title":"Android中的意图","url":"https://grooters.github.io/2018/10/18/Android中的意图/","content":"<h1 id=\"IntentFilter的匹配\"><a href=\"#IntentFilter的匹配\" class=\"headerlink\" title=\"IntentFilter的匹配\"></a>IntentFilter的匹配</h1><p><li> action</li></p>\n<p><li> catogory</li></p>\n<p><strong><li> data</li></strong></p>\n<p>data由<strong>mimeType</strong>和<strong>URI</strong>组成</p>\n<p><li> mineType</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">data</span> <span class=\"attr\">android:mimeType</span>=<span class=\"string\">\"image/*\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intent.setDataAndType(uri,<span class=\"string\">\"image/png\"</span>);</span><br></pre></td></tr></table></figure>\n<p><li> URI</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scheme</span>&gt;</span>://<span class=\"tag\">&lt;<span class=\"name\">host</span>&gt;</span>:<span class=\"tag\">&lt;<span class=\"name\">port</span>&gt;</span>/[<span class=\"tag\">&lt;<span class=\"name\">path</span>&gt;</span>|<span class=\"tag\">&lt;<span class=\"name\">pathPrefix</span>&gt;</span>|<span class=\"tag\">&lt;<span class=\"name\">pathPattern</span>&gt;</span>]</span><br></pre></td></tr></table></figure>\n<p>eg:</p>\n<blockquote>\n<p>content://io.github.grooters.lller:200/folder/subfolder/etc <br></p>\n</blockquote>\n<p>Path和pathPattern均表示完整的路径，但pathPattern可使用通配符“*”（表示0个或多个任意字符），pathPrefix表示路径的前缀信息</p>\n<p><em>注意：</em></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* = &gt;\\\\* ， \\ =&gt; \\\\\\\\</span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"4sp\"><li> 注意</li></font></strong></p>\n<blockquote>\n<p>当通过隐式方式启动activity时需要将activity的category设置为<strong>“android.intent.category.DEFAULT”</strong></p>\n</blockquote>\n<p>eg:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".DownloadActivity\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"activity\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.DEFAULT\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><br><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"string\">\"activity\"</span>);</span><br><span class=\"line\">intent.addCategory(<span class=\"string\">\"android.intent.category.DEFAULT\"</span>);</span><br><span class=\"line\">startActivity(intent);</span><br></pre></td></tr></table></figure></p>\n<p>为了确保启动的式自己的服务自从Android 5.0后已经不支持隐式启动组件了，若需要隐式启动可通过以下方式：</p>\n<p>方法1：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent mIntent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">mIntent.setAction(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">mIntent.setPackage(getPackageName());</span><br><span class=\"line\">context.startService(mIntent);</span><br></pre></td></tr></table></figure></p>\n<p>方法2：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">ComponentName componentName = <span class=\"keyword\">new</span> ComponentName(pkgName,serviceName);</span><br><span class=\"line\">intent.setComponent(componentName);</span><br><span class=\"line\">context.startService(intent);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Intent使用集合\"><a href=\"#Intent使用集合\" class=\"headerlink\" title=\"Intent使用集合\"></a>Intent使用集合</h1><h2 id=\"打开网页\"><a href=\"#打开网页\" class=\"headerlink\" title=\"打开网页\"></a>打开网页</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri uri = Uri.parse(<span class=\"string\">\"https://www.baidu.com\"</span>);</span><br><span class=\"line\">Intent it  = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW,uri);</span><br><span class=\"line\">startActivity(it);</span><br></pre></td></tr></table></figure>\n<h2 id=\"拨打电话\"><a href=\"#拨打电话\" class=\"headerlink\" title=\"拨打电话\"></a>拨打电话</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri uri = Uri.parse(<span class=\"string\">\"tel:10086\"</span>);  </span><br><span class=\"line\">Intent it = <span class=\"keyword\">new</span> Intent(Intent.ACTION_DIAL, uri);    </span><br><span class=\"line\">startActivity(it);   </span><br><span class=\"line\"></span><br><span class=\"line\">Uri uri = Uri.parse(<span class=\"string\">\"tel.10086\"</span>);  </span><br><span class=\"line\">Intent it =<span class=\"keyword\">new</span> Intent(Intent.ACTION_CALL,uri);  </span><br><span class=\"line\">startActivity(it);   </span><br><span class=\"line\"><span class=\"comment\">//需要动态权限</span></span><br><span class=\"line\">&lt;uses-permission android:name=<span class=\"string\">\"android.permission.CALL_PHONE\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"发送短信\"><a href=\"#发送短信\" class=\"headerlink\" title=\"发送短信\"></a>发送短信</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri uri = Uri.parse(<span class=\"string\">\"smsto:10086\"</span>);     </span><br><span class=\"line\">Intent it = <span class=\"keyword\">new</span> Intent(Intent.ACTION_SENDTO, uri);     </span><br><span class=\"line\">it.putExtra(<span class=\"string\">\"sms_body\"</span>, <span class=\"string\">\"cwj\"</span>);     </span><br><span class=\"line\">startActivity(it);</span><br></pre></td></tr></table></figure>\n<h2 id=\"发送邮件\"><a href=\"#发送邮件\" class=\"headerlink\" title=\"发送邮件\"></a>发送邮件</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Uri uri = Uri.parse(<span class=\"string\">\"lilinlang@hotmail.com\"</span>);  </span><br><span class=\"line\">Intent it = <span class=\"keyword\">new</span> Intent(Intent.ACTION_SENDTO, uri);  </span><br><span class=\"line\">startActivity(it);  </span><br><span class=\"line\"></span><br><span class=\"line\">Intent it = <span class=\"keyword\">new</span> Intent(Intent.ACTION_SEND);     </span><br><span class=\"line\">it.putExtra(Intent.EXTRA_EMAIL, <span class=\"string\">\"lilinlang@hotmail.com\"</span>);     </span><br><span class=\"line\">it.putExtra(Intent.EXTRA_TEXT, <span class=\"string\">\"The email body text\"</span>);     </span><br><span class=\"line\">it.setType(<span class=\"string\">\"text/plain\"</span>);     </span><br><span class=\"line\">startActivity(Intent.createChooser(it, <span class=\"string\">\"Choose Email Client\"</span>));    </span><br><span class=\"line\"></span><br><span class=\"line\">Intent it=<span class=\"keyword\">new</span> Intent(Intent.ACTION_SEND);       </span><br><span class=\"line\">String[] tos=&#123;<span class=\"string\">\"figurers@163.com\"</span>&#125;;       </span><br><span class=\"line\">String[] ccs=&#123;<span class=\"string\">\"lilinlang@hotmail.com\"</span>&#125;;       </span><br><span class=\"line\">it.putExtra(Intent.EXTRA_EMAIL, tos);       </span><br><span class=\"line\">it.putExtra(Intent.EXTRA_CC, ccs);       </span><br><span class=\"line\">it.putExtra(Intent.EXTRA_TEXT, <span class=\"string\">\"The email body text\"</span>);       </span><br><span class=\"line\">it.putExtra(Intent.EXTRA_SUBJECT, <span class=\"string\">\"The email subject text\"</span>);       </span><br><span class=\"line\">it.setType(<span class=\"string\">\"message/rfc822\"</span>);       </span><br><span class=\"line\">startActivity(Intent.createChooser(it, <span class=\"string\">\"Choose Email Client\"</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"播放音频\"><a href=\"#播放音频\" class=\"headerlink\" title=\"播放音频\"></a>播放音频</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent it = <span class=\"keyword\">new</span> Intent(Intent.ACTION_VIEW);  </span><br><span class=\"line\">Uri uri = Uri.parse(<span class=\"string\">\"file://sdcard/lll.mp3\"</span>);  </span><br><span class=\"line\">it.setDataAndType(uri, <span class=\"string\">\"audio/mp3\"</span>);  </span><br><span class=\"line\"></span><br><span class=\"line\">Uri uri = Uri.parse(<span class=\"string\">\"file://sdcard/lll.mp4\"</span>);  </span><br><span class=\"line\">it.setDataAndType(uri, <span class=\"string\">\"video/mp4\"</span>);  </span><br><span class=\"line\">startActivity(it);</span><br></pre></td></tr></table></figure>\n<h1 id=\"PendingIntent\"><a href=\"#PendingIntent\" class=\"headerlink\" title=\"PendingIntent\"></a><a href=\"https://developer.android.google.cn/reference/android/app/PendingIntent\" target=\"_blank\" rel=\"noopener\">PendingIntent</a></h1><p>通过以下三个方法创建实例对象：</p>\n<ol>\n<li>getActivity</li>\n<li>getService</li>\n<li>getBroadcast</li>\n</ol>\n<p>以上三个方法均有4个参数：</p>\n<p><li> Context context</li></p>\n<p><li> int requestCode</li></p>\n<p>表示PendingIntent发送方的请求码，通常设为0，也可以作为判断两个PendingIntent是否匹配的条件</p>\n<p><li> Intent intent</li></p>\n<p><li> int flag</li></p>\n<p>有以下三种取值：</p>\n<ol>\n<li>FLAG_ONE_SHOT<blockquote>\n<p>PendingIntent只能使用一次，使用完好便会被cancle，之后相同的PendingIntent无法再次被使用</p>\n</blockquote>\n</li>\n<li>FLAG_NO_CREATE<blockquote>\n<p>当前描述的PendingIntent不主动创建，若当前PendingIntent不存在则getActivity返回null</p>\n</blockquote>\n</li>\n<li>FLAG_CANCEL_CURRENT<blockquote>\n<p>当前描述的PendingIntent若已经存在，则会先cancle掉已存在的PendingIntent，然后重新创建</p>\n</blockquote>\n</li>\n<li>FLAG_UPDATE_CURRENT<blockquote>\n<p>当前描述的PendingIntent若已经存在，则会更新该PendingIntent，即将更新Intent的Extras</p>\n</blockquote>\n</li>\n</ol>\n<p>当PendingIntent的<strong>Intent</strong>和<strong>requestCode</strong>一致时则说明它们<strong>匹配</strong></p>\n<p>example：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PendingIntent pendingIntent=PendingIntent.getActivity(<span class=\"keyword\">this</span>,<span class=\"number\">0</span>,<span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>,TestActivity.class),PendingIntent.FLAG_UPDATE_CURRENT);</span><br><span class=\"line\">remoteViews.setOnClickPendingIntent(R.id.butt_notify_custom,pendingIntent);</span><br></pre></td></tr></table></figure>\n<p>notify的id不同时，若PendingIntent能实现匹配，则可通过flag实现不同的效果，如：</p>\n<p>FLAG_ONE_SHOT：后续通知中的PendingIntent和第一天保持完全一致，单机任何一条后剩下的通知均无法正常打开</p>\n","categories":["Android"],"tags":[]},{"title":"探索Android动画","url":"https://grooters.github.io/2018/10/18/探索Android动画/","content":"<h1 id=\"View动画\"><a href=\"#View动画\" class=\"headerlink\" title=\"View动画\"></a>View动画</h1><p>View动画包含四种动画效果，分别为平移，缩放，旋转和透明，分别对应以下<strong><a href=\"https://developer.android.google.cn/reference/android/view/animation/Animation\" target=\"_blank\" rel=\"noopener\">Animation</a></strong>的子类：</p>\n<p><strong><li> <a href=\"https://developer.android.google.cn/reference/android/view/animation/TranslateAnimation\" target=\"_blank\" rel=\"noopener\">TranslateAnimation</a></li></strong></p>\n<p>该类用于平移View，对应的xml标签为translate，该标签有以下属性值：</p>\n<ol>\n<li>android:fromXDelta<blockquote>\n<p>表示X的起始值，如0</p>\n</blockquote>\n</li>\n<li><p>android:toXDelta</p>\n<blockquote>\n<p>表示Y的起始值，如0</p>\n</blockquote>\n</li>\n<li><p>android:fromYDelta</p>\n</li>\n<li>android:toYDelta</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">translate</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fromXDelta</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fromYDelta</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:toXDelta</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:toYDelta</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:duration</span>=<span class=\"string\">\"800\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:interpolator</span>=<span class=\"string\">\"@android:anim/linear_interpolator\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>interpolator为插值器，控制移动速度的快慢变化，默认为加速减速插值器，注意该属性和duration无法自动提示，需要手打</p>\n<p><li> ScaleAnimation</li></p>\n<p>该类用于缩放View</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scale</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fromXScale</span>=<span class=\"string\">\"0.5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fromYScale</span>=<span class=\"string\">\"0.5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:toXScale</span>=<span class=\"string\">\"1.5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:toYScale</span>=<span class=\"string\">\"1.5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:pivotX</span>=<span class=\"string\">\"10\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:pivotY</span>=<span class=\"string\">\"10\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>fromXScale表示水平缩放的起始值</li>\n<li>toXScale表示水平缩放的接收值</li>\n</ol>\n<p><li> RotateAnimation</li></p>\n<p>用于旋转View</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">rotate</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fromDegrees</span>=<span class=\"string\">\"0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:toDegrees</span>=<span class=\"string\">\"180\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:pivotX</span>=<span class=\"string\">\"10\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:pivotY</span>=<span class=\"string\">\"10\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p> pivotX表示旋转轴点的X坐标</p>\n<p> <strong>无论是旋转动画还是缩放动画，其轴点默认都在View的中心点</strong></p>\n<p><li> AlphaAnimation</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">alpha</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:fromAlpha</span>=<span class=\"string\">\"0.1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:toAlpha</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义View动画\"><a href=\"#自定义View动画\" class=\"headerlink\" title=\"自定义View动画\"></a>自定义View动画</h2><p>Animation中有两个方法，分别是initaliz和applyTransformation，可在initaliz中完成初始化工作，而自定义动画步骤主要在applyTransformation完成</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">applyTransformation</span><span class=\"params\">(<span class=\"keyword\">float</span> interpolatedTime, Transformation t)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><li> <a href=\"https://developer.android.google.cn/reference/android/view/animation/Transformation\" target=\"_blank\" rel=\"noopener\">Transformation</a></li></p>\n<p>一个动画在某个时间点的变换，可通过getMatrix()方法获取该时间点的Matrix</p>\n<p><li> <a href=\"https://developer.android.google.cn/reference/android/graphics/Matrix\" target=\"_blank\" rel=\"noopener\">Matrix</a></li></p>\n<p>Matrix类包含一个3x3矩阵，用于转换坐标</p>\n<p><li> <a href=\"https://developer.android.google.cn/reference/android/graphics/Camera\" target=\"_blank\" rel=\"noopener\">Camara</a></li></p>\n<p>可用于计算3D变换并生成可用的的矩阵，如Canvas</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomViewAnimation</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Camera camera;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> centerX;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> centerY;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> fromDegree;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> toDegree;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> depthZ;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> reserve;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">\"CustomViewAnimation_LOG\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomViewAnimation</span><span class=\"params\">(<span class=\"keyword\">float</span> centerX,<span class=\"keyword\">float</span> centerY,<span class=\"keyword\">float</span> fromDegree,<span class=\"keyword\">float</span> toDegree,<span class=\"keyword\">float</span> depthZ,<span class=\"keyword\">boolean</span> reserve)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.centerX=centerX;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.centerY=centerY;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.fromDegree=fromDegree;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.toDegree=toDegree;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.depthZ=depthZ;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.reserve=reserve;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">(<span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> height, <span class=\"keyword\">int</span> parentWidth, <span class=\"keyword\">int</span> parentHeight)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.initialize(width, height, parentWidth, parentHeight);</span><br><span class=\"line\">        camera=<span class=\"keyword\">new</span> Camera();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">applyTransformation</span><span class=\"params\">(<span class=\"keyword\">float</span> interpolatedTime, Transformation t)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.applyTransformation(interpolatedTime, t);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> degree=fromDegree+(toDegree-fromDegree)*interpolatedTime;</span><br><span class=\"line\">        Matrix matrix=t.getMatrix();</span><br><span class=\"line\">        camera.save();</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"interpolatedTime:\"</span>+interpolatedTime);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(reserve)&#123;</span><br><span class=\"line\">            camera.translate(<span class=\"number\">0.0f</span>,<span class=\"number\">0.0f</span>,depthZ*interpolatedTime);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            camera.translate(<span class=\"number\">0.0f</span>,<span class=\"number\">0.0f</span>,depthZ*(<span class=\"number\">1.0f</span>-interpolatedTime));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        camera.rotateY(degree);</span><br><span class=\"line\">        camera.getMatrix(matrix);</span><br><span class=\"line\">        camera.restore();</span><br><span class=\"line\">        matrix.preTranslate(centerY,-centerY);</span><br><span class=\"line\">        matrix.postTranslate(centerY,centerY);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以上自定义View动画是通过Camera和Matrix实现了3D旋转效果，通过Transformation对象获取每一个时间点的Matrix，再计算每个时间点的旋转距离，reserve决定了是想z的负方向移动还是正方向移动</p>\n<p>View动画的使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Animation animation=AnimationUtils.loadAnimation(<span class=\"keyword\">this</span>,R.anim.animation_test);</span><br><span class=\"line\">view.startAnimation(animation);</span><br><span class=\"line\"></span><br><span class=\"line\">AlphaAnimation alpha=<span class=\"keyword\">new</span> AlphaAnimation(<span class=\"number\">0.0f</span>,<span class=\"number\">1.0f</span>);</span><br><span class=\"line\">view.startAnimation(alpha);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developer.android.google.cn/reference/android/view/animation/AnimationUtils\" target=\"_blank\" rel=\"noopener\">AnimationUtils</a></p>\n<h2 id=\"自定义活动切换效果\"><a href=\"#自定义活动切换效果\" class=\"headerlink\" title=\"自定义活动切换效果\"></a>自定义活动切换效果</h2><h2 id=\"为ViewGroup指定动画\"><a href=\"#为ViewGroup指定动画\" class=\"headerlink\" title=\"为ViewGroup指定动画\"></a>为ViewGroup指定动画</h2><p>当为某个ViewGroup指定了一个动画时，其子元素都会具有此动画效果</p>\n<p><em>animation_layout.xml：</em><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layoutAnimation</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:delay</span>=<span class=\"string\">\"0.5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:animationOrder</span>=<span class=\"string\">\"normal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:animation</span>=<span class=\"string\">\"@anim/animation_test\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><li> delay</li></p>\n<p>其中delay指的是每个子元素出现的延迟时间，如当子元素入场时间为300ms则每个子元素的延迟时间为：300*0.5=150ms</p>\n<p><li> animationOrder</li></p>\n<p>表示子元素动画顺序，normal表示顺序显示，reverse表示逆序显示，random表示随机显示</p>\n<p><li> animation</li></p>\n<p>指定要显示的动画</p>\n<p>ViewGroup动画的用法：</p>\n<ol>\n<li>直接在布局文件中指定</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:layoutAnimation=\"@animation_layout\"</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>在Java代码中设定</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Animation animation=AnimationUtils.loadAnimation(<span class=\"keyword\">this</span>,R.anim.animation_test)</span><br><span class=\"line\">LayoutAnimationController controller=<span class=\"keyword\">new</span> LayoutAnimationController(animation);</span><br><span class=\"line\">controller.setDelay(<span class=\"number\">0.5f</span>);</span><br><span class=\"line\">controller.setOrder(LayoutAnimationController.ORDER_NORMAL);</span><br><span class=\"line\">viewGroup.setLayoutAnimation(controller);</span><br></pre></td></tr></table></figure>\n<h1 id=\"帧动画\"><a href=\"#帧动画\" class=\"headerlink\" title=\"帧动画\"></a>帧动画</h1><p>drawble文件夹中新建的xml文件：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">animation-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/ic_launcher_foreground\"</span> <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1000\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/ic_launcher_background\"</span> <span class=\"attr\">android:duration</span>=<span class=\"string\">\"1000\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnimationDrawable drawable=(AnimationDrawable) view.getBackground();</span><br><span class=\"line\">drawable.start();</span><br></pre></td></tr></table></figure>\n<h1 id=\"属性动画\"><a href=\"#属性动画\" class=\"headerlink\" title=\"属性动画\"></a>属性动画</h1><h2 id=\"ObjectAnimator\"><a href=\"#ObjectAnimator\" class=\"headerlink\" title=\"ObjectAnimator\"></a><a href=\"https://developer.android.google.cn/reference/android/animation/ObjectAnimator\" target=\"_blank\" rel=\"noopener\">ObjectAnimator</a></h2><p><strong><li> onFloat</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从sunStart移动到skyHeight</span></span><br><span class=\"line\">ObjectAnimator.ofFloat(sun,<span class=\"string\">\"Y\"</span>,sunStart,skyHeight);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//从当前位置向下移动200，回到初始位置再向上移动100</span></span><br><span class=\"line\">ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(sun, <span class=\"string\">\"Y\"</span>, <span class=\"number\">0</span>, <span class=\"number\">200</span>, -<span class=\"number\">100</span>,<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><li> setDuration</li></strong></p>\n<p>设置动画时间</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objectAnimator.setDuration(<span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n<p><em>eg:</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectAnimator objectAnimator=ObjectAnimator.ofFloat(sun,<span class=\"string\">\"y\"</span>,sunStart,skyHeight).setDuration(<span class=\"number\">2000</span>);</span><br><span class=\"line\">objectAnimator.start();</span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"4sp\">注意：</font></strong></p>\n<blockquote>\n<p>在OnCreate()objectAnimator.start();是无效的，因为在OnCreate()中AnimationDrawable还没有完全的与ImageView绑定</p>\n</blockquote>\n<h2 id=\"TimeInterpolator\"><a href=\"#TimeInterpolator\" class=\"headerlink\" title=\"TimeInterpolator\"></a><a href=\"https://developer.android.google.cn/reference/android/animation/TimeInterpolator\" target=\"_blank\" rel=\"noopener\">TimeInterpolator</a></h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//由慢变快</span></span><br><span class=\"line\">objectAnimator.setInterpolator(<span class=\"keyword\">new</span>  AccelerateInterpolator());</span><br><span class=\"line\"><span class=\"comment\">//由快变慢</span></span><br><span class=\"line\">objectAnimator.setInterpolator(<span class=\"keyword\">new</span>  DecelerateInterpolator());</span><br></pre></td></tr></table></figure>\n<h2 id=\"颜色渐变\"><a href=\"#颜色渐变\" class=\"headerlink\" title=\"颜色渐变\"></a>颜色渐变</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> first=getResources().getColor(R.color.colorPrimary,getTheme());</span><br><span class=\"line\"><span class=\"keyword\">int</span> second=getResources().getColor(R.color.colorAccent,getTheme());</span><br><span class=\"line\"><span class=\"keyword\">int</span> last=getResources().getColor(R.color.black,getTheme());</span><br><span class=\"line\">ObjectAnimator skyAnimation = ObjectAnimator.ofInt(sky,<span class=\"string\">\"backgroundColor\"</span>,first,second,last);</span><br><span class=\"line\">skyAnimation.setDuration(<span class=\"number\">5000</span>);</span><br><span class=\"line\">skyAnimation.setEvaluator(<span class=\"keyword\">new</span> ArgbEvaluator());</span><br><span class=\"line\">skyAnimation.start();</span><br></pre></td></tr></table></figure>\n<h2 id=\"AnimatorSet\"><a href=\"#AnimatorSet\" class=\"headerlink\" title=\"AnimatorSet\"></a><a href=\"https://developer.android.google.cn/reference/android/animation/AnimatorSet\" target=\"_blank\" rel=\"noopener\">AnimatorSet</a></h2><p><strong>可将动画放在一起播放动画集</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnimatorSet set=<span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">set.play(firstAnimation).with(nextAnimation).before(lastAnimation);</span><br><span class=\"line\">set.start();</span><br></pre></td></tr></table></figure>\n<h2 id=\"state-list-AnimatorSet\"><a href=\"#state-list-AnimatorSet\" class=\"headerlink\" title=\"state list AnimatorSet\"></a>state list AnimatorSet</h2><p><strong>使按钮按下和松开具有浮动效果，改变z值</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"translationZ\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:duration</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:valueType</span>=<span class=\"string\">\"floatType\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"translationZ\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:duration</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:valueType</span>=<span class=\"string\">\"floatType\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>将以上xml文件放入animator文件夹</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Button</span><br><span class=\"line\">    android:id=<span class=\"string\">\"@+id/button_animation\"</span></span><br><span class=\"line\">    android:stateListAnimator=<span class=\"string\">\"@animator/button_animator\"</span></span><br><span class=\"line\">    android:elevation=<span class=\"string\">\"2dp\"</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">\"wrap_content\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>然后通过<strong>android:stateListAnimator</strong>为组件设置动画</p>\n<h2 id=\"circular-revel\"><a href=\"#circular-revel\" class=\"headerlink\" title=\"circular revel\"></a>circular revel</h2><p><strong>将View像墨滴一样舒展开来</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取FloatingActionButton的中心点的坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> centerX = (view.getLeft() + view.getRight()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> centerY = (view.getTop() + view.getBottom()) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"centerX:\"</span>+centerX);</span><br><span class=\"line\">    <span class=\"comment\">// 获取扩散的半径</span></span><br><span class=\"line\">    <span class=\"keyword\">float</span> finalRadius = (<span class=\"keyword\">float</span>) Math.hypot((<span class=\"keyword\">double</span>) centerX, (<span class=\"keyword\">double</span>) centerY);</span><br><span class=\"line\">    <span class=\"comment\">// 定义揭露动画</span></span><br><span class=\"line\">    Animator mCircularReveal = ViewAnimationUtils.createCircularReveal(revelView, centerX, centerY, <span class=\"number\">0</span>, finalRadius);</span><br><span class=\"line\">    <span class=\"comment\">// 设置动画持续时间，并开始动画</span></span><br><span class=\"line\">    mCircularReveal.setDuration(<span class=\"number\">4000</span>).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<strong>view</strong>为触发组件，<strong>revelView</strong>为需要揭露出来地新地View，<strong>Math.hypot</strong>勾股定理求斜边</p>\n<h2 id=\"shared-element-transition\"><a href=\"#shared-element-transition\" class=\"headerlink\" title=\"shared element transition\"></a>shared element transition</h2><p><strong>共享元素交换，又称为hero transaction，可实现点击列表中的一张图片，令它以动画形式独立显示在一个新的activity/fragment中</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    getWindow().requestFeature(Window.FEATURE_ACTIVITY_TRANSITIONS);</span><br><span class=\"line\">    setContentView(R.layout.activity_animationer);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ImageView sun=findViewById(R.id.sunImage);</span><br><span class=\"line\">    Button tranButton=findViewById(R.id.button_animation);</span><br><span class=\"line\">    tranButton.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            Intent intent=<span class=\"keyword\">new</span> Intent(AnimatioNer.<span class=\"keyword\">this</span>,ImagerActivity.class);</span><br><span class=\"line\">            ViewCompat.setTransitionName(sun,<span class=\"string\">\"image\"</span>);</span><br><span class=\"line\">            ActivityOptionsCompat optionsCompat=ActivityOptionsCompat.makeSceneTransitionAnimation(AnimatioNer.<span class=\"keyword\">this</span>,sun,<span class=\"string\">\"image\"</span>);</span><br><span class=\"line\">            AnimatioNer.<span class=\"keyword\">this</span>.startActivity(intent,optionsCompat.toBundle());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>getWindow().requestFeature(Window.FEATURE_ACTIVITY_TRANSITIONS)</p>\n</blockquote>\n<p>必须写在setContentView前</p>\n<blockquote>\n<p>ViewCompat.setTransitionName(View view, String transictionName )</p>\n</blockquote>\n<p>view为需要共享的资源，这里是图片sun，transictionName的字符串要和布局（原布局和共享布局）中组件transitionName属性值一样，eg：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ImageView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/sunImage\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@drawable/sun\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:transitionName</span>=<span class=\"string\">\"image\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"50dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"50dp\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p>由于共享布局是共享主布局的sunImage图片，所以共享布局中也必须由图片控件，并带有<strong>transitionName=”image”</strong>属性</p>\n<blockquote>\n<p>optionsCompat=ActivityOptionsCompat.makeSceneTransitionAnimation(Activity activity,View view,String transictionName)</p>\n</blockquote>\n","categories":["Android"],"tags":[]},{"title":"Android的主题与样式","url":"https://grooters.github.io/2018/10/09/Android的主题与样式/","content":"<p><li>样式的使用与继承</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"backStyle\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:background\"</span>&gt;</span>@color/dark_blue<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">style=\"@style/backStyle\"</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"textStyle\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"@style/backStyle\"</span>\"&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:textStyle\"</span>&gt;</span>@bold<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">style=\"@style/textStyle\"</span><br></pre></td></tr></table></figure>\n<p><li>主题的使用与覆盖</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimary\"</span>&gt;</span>@color/colorPrimary<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorPrimaryDark\"</span>&gt;</span>@color/colorPrimaryDark<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"colorAccent\"</span>&gt;</span>@color/colorAccent<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">android:theme=\"@style/AppTheme\"</span><br></pre></td></tr></table></figure>\n<p><strong>colorPrimary</strong>为工具栏颜色</p>\n<p><strong>colorPrimaryDark</strong>为手机状态栏颜色</p>\n<p>为了使主题更加自定义，可覆盖一些父主题的样式，eg：</p>\n<p>从<em>Theme.AppCompat.Light.DarkActionBar</em>可追溯到：</p>\n<blockquote>\n<p>Base.V7.Theme.AppCompat.Light<br><br><br>Platform.AppCompat.Light<br><br><br>Theme.Holo</p>\n</blockquote>\n<p>从<em>Theme.Holo</em>可找到<em><item name=\"colorBackground\">@color/background_holo_dark</item></em>这条样式，故可以在style中覆盖该样式</p>\n<p>根据以上方法可找到Theme.Holo中的按钮样式，做相应的更改，eg：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"AppTheme\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"Theme.AppCompat.Light.DarkActionBar\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    ...</span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:buttonStyle\"</span>&gt;</span>@style/customButtonStyle<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">name</span>=<span class=\"string\">\"customButtonStyle\"</span> <span class=\"attr\">parent</span>=<span class=\"string\">\"android:style/widget.holo.Button\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">name</span>=<span class=\"string\">\"android:background\"</span>&gt;</span>dark_blue<span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><li>引用主题属性</li></p>\n<p>xml：<br> <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:background=\"?attr/colorAccent\"</span><br></pre></td></tr></table></figure></p>\n","categories":["Android"],"tags":[]},{"title":"Asset的简单使用","url":"https://grooters.github.io/2018/10/09/Asset的使用/","content":"<p><strong><li> 新建Asset文件夹</li></strong></p>\n<p>右键app -&gt; New -&gt; Folder -&gt; Asset Folder</p>\n<p><strong><li> Asset的异同点</li></strong></p>\n<p><img src=\"/img/Android/Android目录与结构/asset_raw_drawble.jpg\" alt=\"Asset特点\"></p>\n<p>res目录中的文件会在R文件生成id，而asset不会，asset可以新建子文件夹</p>\n<p><strong>具体使用如下：</strong></p>\n<p>asset目录为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-assets</span><br><span class=\"line\">  -simple</span><br><span class=\"line\">    a.jpg</span><br><span class=\"line\">  b.jpg</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">setAsset</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    AssetManager assetManager=getAssets();</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        String[] assetSimples=assetManager.list(<span class=\"string\">\"simple\"</span>);</span><br><span class=\"line\">        String[] assets=assetManager.list(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String assetSimple:assetSimples)&#123;</span><br><span class=\"line\">            Log.i(TAG,<span class=\"string\">\"assetSimple：\"</span>+assetSimple);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String asset:assets)&#123;</span><br><span class=\"line\">            Log.i(TAG,<span class=\"string\">\"asset：\"</span>+asset);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        String path=Environment.getExternalStorageDirectory().getAbsolutePath()+<span class=\"string\">\"/as.jpg\"</span>;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"path：\"</span>+path);</span><br><span class=\"line\">        File file=<span class=\"keyword\">new</span> File(path);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(file.exists())&#123;</span><br><span class=\"line\">            file.delete();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"createNewFile\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> bool=file.createNewFile();</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"bool：\"</span>+bool);</span><br><span class=\"line\">        InputStream inp=assetManager.open(<span class=\"string\">\"simple/a.jpg\"</span>);</span><br><span class=\"line\">        FileOutputStream out=<span class=\"keyword\">new</span> FileOutputStream(file);</span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] buffer=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> byteCount=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((byteCount=inp.read(buffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            out.write(buffer,<span class=\"number\">0</span>,byteCount);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        out.flush();</span><br><span class=\"line\">        inp.close();</span><br><span class=\"line\">        out.close();</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        e.printStackTrace();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"动态操作布局","url":"https://grooters.github.io/2018/09/29/动态操作布局/","content":"<h1 id=\"RelativeLayout\"><a href=\"#RelativeLayout\" class=\"headerlink\" title=\"RelativeLayout\"></a>RelativeLayout</h1><p><strong><font size=\"4sp\"><a href=\"https://developer.android.google.cn/reference/android/widget/RelativeLayout.LayoutParams\" target=\"_blank\" rel=\"noopener\">RelativeLayout.LayoutParams</a></font></strong></p>\n<h2 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><p><strong><a href=\"https://developer.android.google.cn/reference/android/widget/RelativeLayout.LayoutParams.html#addRule(int,%20int\" target=\"_blank\" rel=\"noopener\">addRule</a></strong></p>\n<p>参数：</p>\n<blockquote>\n<p>int verb : 要设置空间的规则属性</p>\n</blockquote>\n<p>eg: RelativeLayout.ALIGN_RIGHT</p>\n<blockquote>\n<p>int subject与该规则属性存在关联的其它控件id</p>\n</blockquote>\n<p>eg:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imageButton3.setId(<span class=\"number\">3</span>);</span><br><span class=\"line\">viewParams.addRule(RelativeLayout.START_OF,<span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>类似RelativeLayout.START_OF的其它常量可在以下类中查询：</p>\n<p><a href=\"https://developer.android.google.cn/reference/android/widget/RelativeLayout\" target=\"_blank\" rel=\"noopener\">RelativeLayout</a></p>\n<p><strong><a href=\"https://developer.android.google.cn/reference/android/widget/RelativeLayout.LayoutParams.html#removeRule(int\" target=\"_blank\" rel=\"noopener\">removeRule</a></strong></p>\n<p>参数：</p>\n<blockquote>\n<p>int verb : 要移除的属性</p>\n</blockquote>\n<p>如果再remove以前添加了规则属性并且set进去了，remove仍然其失效</p>\n<h1 id=\"LinearLayout\"><a href=\"#LinearLayout\" class=\"headerlink\" title=\"LinearLayout\"></a>LinearLayout</h1><h2 id=\"常用方法-1\"><a href=\"#常用方法-1\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h2><p><strong><a href=\"https://developer.android.google.cn/reference/android/widget/LinearLayout.html#setGravity(int\" target=\"_blank\" rel=\"noopener\">setGravity</a></strong></p>\n<p>参数：</p>\n<blockquote>\n<p>int gravity ，常见取值 ： Gravity.CENTER, Gravity.CENTER_HORIZONTAL，其它参见：</p>\n</blockquote>\n<p><a href=\"https://developer.android.google.cn/reference/android/view/Gravity\" target=\"_blank\" rel=\"noopener\">Gravity</a></p>\n<p><strong><a href=\"https://developer.android.google.cn/reference/android/widget/LinearLayout.html#setOrientation(int\" target=\"_blank\" rel=\"noopener\">setOrientation</a></strong></p>\n<p>参数：</p>\n<blockquote>\n<p>int orientation， 常见取值： LinearLayout.VERTICAL</p>\n</blockquote>\n<p><strong><font size=\"4sp\"><a href=\"https://developer.android.google.cn/reference/android/widget/LinearLayout.LayoutParams\" target=\"_blank\" rel=\"noopener\">LinearLayout.LayoutParams</a></font></strong></p>\n<p><li> 成员变量</li></p>\n<blockquote>\n<p>gravity</p>\n</blockquote>\n<blockquote>\n<p>weight</p>\n</blockquote>\n<h1 id=\"TableLayout\"><a href=\"#TableLayout\" class=\"headerlink\" title=\"TableLayout\"></a>TableLayout</h1><p><strong>注意：</strong></p>\n<blockquote>\n<p>创建控件的LayoutParams需要TableRow.LayoutParams而不是TableLayout.LayoutParams</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TableLayout tableLayout=findViewById(R.id.table_layout);</span><br><span class=\"line\">TableRow.LayoutParams viewParams=<span class=\"keyword\">new</span> TableRow.LayoutParams(<span class=\"number\">250</span>,<span class=\"number\">250</span>);</span><br><span class=\"line\">viewParams.weight=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>;i++)&#123;</span><br><span class=\"line\">    TableRow row=<span class=\"keyword\">new</span> TableRow(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    row.setBackgroundColor(getResources().getColor(R.color.black,<span class=\"keyword\">null</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">5</span>;j++)&#123;</span><br><span class=\"line\">        ImageButton imageButton=<span class=\"keyword\">new</span> ImageButton(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        imageButton.setLayoutParams(viewParams);</span><br><span class=\"line\">        row.addView(imageButton);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tableLayout.addView(row);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"Maven学习笔记","url":"https://grooters.github.io/2018/09/25/maven学习笔记/","content":"<blockquote>\n<p>Maven是基于对象模型（POM）通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具</p>\n</blockquote>\n<p><strong>解决项目在不同环境下运行需要手动导入大量jar包的问题</strong></p>\n<h1 id=\"Maven环境的搭建\"><a href=\"#Maven环境的搭建\" class=\"headerlink\" title=\"Maven环境的搭建\"></a>Maven环境的搭建</h1><p><li> Maven下载</li></p>\n<p><strong><a href=\"http://maven.apache.org/download.cgi\" target=\"_blank\" rel=\"noopener\">Maven</a></strong></p>\n<h1 id=\"第一个Maven项目示例\"><a href=\"#第一个Maven项目示例\" class=\"headerlink\" title=\"第一个Maven项目示例\"></a>第一个Maven项目示例</h1><p><li> Maven项目目录结构</li></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-src</span><br><span class=\"line\">pom.xml</span><br><span class=\"line\">    -main</span><br><span class=\"line\">        -java</span><br><span class=\"line\">            -package</span><br><span class=\"line\">            HelloWold.java</span><br><span class=\"line\">    -test</span><br><span class=\"line\">        -java</span><br><span class=\"line\">            -package</span><br><span class=\"line\">            HelloWorldTest.java</span><br><span class=\"line\">    -resources</span><br></pre></td></tr></table></figure>\n<p><li>Maven项目代码</li></p>\n<p><em>HelloWorld.java</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.grooters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sayHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Hello World\"</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>HelloWorldTest.java</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.grooters;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.junit.Assert.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldTest</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"meta\">@Test</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">testHello</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\tAssert.assertEquals(<span class=\"string\">\"Hello World\"</span>,<span class=\"keyword\">new</span> HelloWorld().sayHello());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>pom.xml</em><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.grooters<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>FirstMaven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><li>Maven命令</li></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn compile</span><br></pre></td></tr></table></figure>\n<p>编译HelloWorld.java生成字节码文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn test</span><br></pre></td></tr></table></figure>\n<p>测试HelloWorld.java生成测试报告</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn package</span><br></pre></td></tr></table></figure>\n<p>生成Maven项目jar包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean</span><br></pre></td></tr></table></figure>\n<h1 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h1><p><li> Maven相关命令</li></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>将该项目jar包添加到本地仓库</p>\n</blockquote>\n<p>导入第一个项目的jar包只需在pom.xml中添加以下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.grooters<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>FirstMaven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>完整pom.xml为：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">\"http://www.w3.org/2001/XMLSchema-instance\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.grooters<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>SecondMaven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>junit<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.github.grooters<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>FirstMaven<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"快速构建Maven项目目录骨架\"><a href=\"#快速构建Maven项目目录骨架\" class=\"headerlink\" title=\"快速构建Maven项目目录骨架\"></a>快速构建Maven项目目录骨架</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn archetype:generate -DgroupId=io.github.grooters -DartifactId=ThirdMaven -Dversion=1.0.0-snapshot -Dpackage=io.github.grooters.pac</span><br></pre></td></tr></table></figure>\n<p>即可创建一个拥有如下目录骨架的Maven项目：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-src</span><br><span class=\"line\">pom.xml</span><br><span class=\"line\">    -main</span><br><span class=\"line\">        -java</span><br><span class=\"line\">            -pac</span><br><span class=\"line\">            App.java</span><br><span class=\"line\">    -test</span><br><span class=\"line\">        -java</span><br><span class=\"line\">            -pca</span><br><span class=\"line\">            AppTest.java</span><br><span class=\"line\">    -resources</span><br></pre></td></tr></table></figure>\n<h1 id=\"Maven中的仓库\"><a href=\"#Maven中的仓库\" class=\"headerlink\" title=\"Maven中的仓库\"></a>Maven中的仓库</h1><h2 id=\"仓库类型\"><a href=\"#仓库类型\" class=\"headerlink\" title=\"仓库类型\"></a>仓库类型</h2><p><li> 本地仓库</li></p>\n<p><li> 远程仓库</li></p>\n<p>指向中央仓库，仓库地址可在lib下的<strong>maven-model-builder-3.5.4.jar</strong>中查看</p>\n<p><li> 镜像仓库</li></p>\n<p>可自定义仓库指向，如指向国内Maven仓库</p>\n<h2 id=\"修改仓库指向\"><a href=\"#修改仓库指向\" class=\"headerlink\" title=\"修改仓库指向\"></a>修改仓库指向</h2><p>在conf中的settings.xml文件中的145行左右：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--镜像仓库唯一id!--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven.net.cn<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--需要代替的仓库指向id，若代替全部仓库指向，则使用*--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>Central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Central Mirrors in China.<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://my.repository.com/repo/path<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"修改本地仓库路径\"><a href=\"#修改本地仓库路径\" class=\"headerlink\" title=\"修改本地仓库路径\"></a>修改本地仓库路径</h2><blockquote>\n<p>本地仓库默认路径为：C:\\Users\\Administrator.m2</p>\n</blockquote>\n<p>修改方法为：</p>\n<p>在conf中的settings.xml文件中的53行左右添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">localRepository</span>&gt;</span>D:/Maven/repo<span class=\"tag\">&lt;/<span class=\"name\">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>然后进入到FirstMaven把输入以下命令，将其添加进新仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean compile</span><br></pre></td></tr></table></figure>\n<h1 id=\"pom-xml解析\"><a href=\"#pom-xml解析\" class=\"headerlink\" title=\"pom.xml解析\"></a>pom.xml解析</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;反写公司网址+项目名&lt;/groupId&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;artifactId&gt;项目名+模块名&lt;/artifactId&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;version&gt;第一个0为大版本号，第二个0为分支版本号，第三个零为小版本号，如：0.0.1beta&lt;/version&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;scope&gt;test，设置依赖可用范围，test表示测试可用&lt;/scope&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;package&gt;war,默认为jar&lt;/package&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;name&gt;项目描述名&lt;/name&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;url&gt;项目地址&lt;/url&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/description&gt;描述&lt;/description&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;organization&gt;团队成员&lt;/organization&gt;</span><br></pre></td></tr></table></figure>\n<p><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//快照</span><br><span class=\"line\">snapshot</span><br><span class=\"line\"></span><br><span class=\"line\">//内测</span><br><span class=\"line\">alpha</span><br><span class=\"line\"></span><br><span class=\"line\">//公测</span><br><span class=\"line\">beta</span><br><span class=\"line\"></span><br><span class=\"line\">//稳定</span><br><span class=\"line\">Release</span><br><span class=\"line\"></span><br><span class=\"line\">//正式发布</span><br><span class=\"line\">GA</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"配置多个仓库\"><a href=\"#配置多个仓库\" class=\"headerlink\" title=\"配置多个仓库\"></a>配置多个仓库</h1><p><em>转至：<a href=\"https://blog.csdn.net/sayyy/article/details/80451531\" target=\"_blank\" rel=\"noopener\">【maven】配置多个仓库</a></em></p>\n<p><li> 在setting文件中</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- id必须唯一 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>myRepository1<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- id必须唯一 --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>myRepository1_1<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- 仓库的url地址 --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">updatePolicy</span>&gt;</span>always<span class=\"tag\">&lt;/<span class=\"name\">updatePolicy</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- id必须唯一 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>myRepository2<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- id必须唯一 --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>myRepository2_1<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">              <span class=\"comment\">&lt;!-- 仓库的url地址 --&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public-jboss/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">releases</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">enabled</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">enabled</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">updatePolicy</span>&gt;</span>always<span class=\"tag\">&lt;/<span class=\"name\">updatePolicy</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">snapshots</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">profile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">profiles</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activeProfiles</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 激活myRepository1 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activeProfile</span>&gt;</span>myRepository1<span class=\"tag\">&lt;/<span class=\"name\">activeProfile</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 激活myRepository2 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">activeProfile</span>&gt;</span>myRepository2<span class=\"tag\">&lt;/<span class=\"name\">activeProfile</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activeProfiles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><li> 在项目pom中</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- id必须唯一 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jboss-repository<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 见名知意即可 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>jboss repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 仓库的url地址 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public-jboss/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- id必须唯一 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>aliyun-repository<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 见名知意即可 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun repository<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 仓库的url地址 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","categories":["后端"],"tags":[]},{"title":"正则表达式","url":"https://grooters.github.io/2018/09/16/正则表达式/","content":"<p><li>匹配手机号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1[34578]\\d&#123;9&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">(\\+86|0086)?\\s*1[34578]\\d&#123;9&#125;</span><br></pre></td></tr></table></figure></li></p>\n<blockquote>\n<p>手机号前面可以有且仅有一个+86或0086，后面可以没有或一个或有多个空格</p>\n</blockquote>\n<p><li>身份证</li></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\d&#123;15&#125;(\\d\\d[0-9Xx])?</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>前15位必须是数字，后三位的前两位必须是数字且后三位可有可无</p>\n</blockquote>\n<p><li>指定匹配位置</li></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">^\\s*\\d&#123;6&#125;$</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>开头可以没有或一个或多个空格，空格后是6各数字</p>\n</blockquote>\n","categories":["Java"],"tags":[]},{"title":"编译原理基础","url":"https://grooters.github.io/2018/09/09/编译原理基础/","content":"<p><img src=\"/img/编译原理/编译原理基础/编译程序结构图.png\" alt=\"编译程序结构图\"></p>\n<blockquote>\n<p>β=abc的头，尾，固有头，固有尾分别为：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ε, a, ab, abc</span><br><span class=\"line\">ε, c, bc, abc</span><br><span class=\"line\">ε, a, ab</span><br><span class=\"line\">ε, c, bc</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>z=xxx…x称为x的方幂</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x^0=ε, x^1=x, x^2=xx</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>A={a, b}, B={c, d} =&gt; AB={ac, ad, bc, bd}</p>\n</blockquote>\n<p><strong><li> 闭包</li></strong></p>\n<blockquote>\n<p>∑={0, 1} =&gt; ∑*={ε, 0, 1, 00, 01, 10, 11, ….}</p>\n</blockquote>\n<p><strong>∑*称为∑的闭包，而∑^+ 称为∑的正闭包</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">∑*=∑^0 U ∑^1 U ∑^2 U ...</span><br><span class=\"line\"></span><br><span class=\"line\">∑^+ = ∑ ∑* = ∑ *∑</span><br><span class=\"line\"></span><br><span class=\"line\">ε ∈ ∑*</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>VN表示非终结符，VT表示终结符， P表示规则的集合，S为开始符</p>\n</blockquote>\n<blockquote>\n<p>v = y a δ , w = y β δ 若 a -&gt; β 则 w 是 v 的直接推导，记作： v =&gt; w</p>\n</blockquote>\n<p><em>eg:</em></p>\n<blockquote>\n<p>v=0S1，w=0011，直接推导为：0S1 =&gt; 0011，使用的规则为：S -&gt; 01，此处 y=0，δ=1</p>\n</blockquote>\n<p><li> 句型与句子</li></p>\n<blockquote>\n<p>S -&gt; 01，v = 0S1 =&gt; 00s11 =&gt; 000s111 =&gt; 00001111 = w，记作 v =&gt;* w</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">若符号串x是由识别符号推导出来的，即 S =&gt;* x，则称 x 是文法 G[S] 的句型，若 x 都属于终结符，即 x ∈ VT*(终结符闭包)，则称 x 是文法 G[S] 的句子</span><br></pre></td></tr></table></figure>\n<p><strong>文法描述的语言是该文发一切句子的集合</strong></p>\n<h1 id=\"文法类型\"><a href=\"#文法类型\" class=\"headerlink\" title=\"文法类型\"></a>文法类型</h1><p><li> 0型文法</li></p>\n<p><li> 1型（上下文有关）文法</li></p>\n<p><li> 2型（上下文无关）文法</li></p>\n<p><li> 3型（正规）文法</li></p>\n<blockquote>\n<p>A -&gt; aB 或 A -&gt; a，其中 A 和 B 都是非终结符，a ∈ VT*</p>\n</blockquote>\n<p><em>eg：</em></p>\n<p>G=({S, A, B},{0, 1}, P, S)，其中P由 S -&gt; 0A, S -&gt; 1B s -&gt; 0, A -&gt; 0A, B -&gt; 1 为非终结符</p>\n<p><li> 语法树</li></p>\n<p><img src=\"/img/编译原理/文法与词法分析/语法树.PNG\" alt=\"语法树\"></p>\n<blockquote>\n<p>由语法树可得句型 aabbaa ，则将其称为推导树的结果，也把推导树叫做句型 aabbaa 的语法树</p>\n</blockquote>\n<p><strong>推导分为最左推导和最右推导，其中最右推导为规范推导</strong></p>\n","categories":["编译原理"],"tags":[]},{"title":"Android问题集锦","url":"https://grooters.github.io/2018/09/09/Android问题集锦/","content":"<p><strong><li>Unknown attribute android:layout_width…</li></strong></p>\n<blockquote>\n<p>Gradle版本问题</p>\n</blockquote>\n<p><strong>-&gt;Sync project with gradle file</strong></p>\n<p><strong><li>…up-to-date check…</li></strong></p>\n<blockquote>\n<p>可能时继承了某个接口，但又没有重写里面的所有方法</p>\n</blockquote>\n<p><strong>重写继承了的接口的所有方法即可</strong></p>\n<p><strong><li>查看源码时显示Sources for ‘android api … platform’ not found</li></strong></p>\n<p>按照提示后下载完成仍然无法看源码</p>\n<blockquote>\n<p>未配置源码路径</p>\n</blockquote>\n<p>修改<strong>.AndroidStudio3.1\\config\\options</strong>目录下的<strong>jdk.table.xml</strong>文件</p>\n<p>加上<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">url</span>=<span class=\"string\">\"file://F:/Soft/AndroidSDK/sources/android-28\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"simple\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">sourcePath</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">type</span>=<span class=\"string\">\"composite\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">root</span> <span class=\"attr\">url</span>=<span class=\"string\">\"file://F:/Soft/AndroidSDK/sources/android-28\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"simple\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">root</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">sourcePath</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">roots</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">additional</span> <span class=\"attr\">jdk</span>=<span class=\"string\">\"1.8\"</span> <span class=\"attr\">sdk</span>=<span class=\"string\">\"android-28\"</span> /&gt;</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong><li>在AsyncTask中的doInBackground除非执行完毕否则无法进入onPostExecute</li></strong></p>\n<blockquote>\n<p>Calling this method guarantees that onPostExecute(Object) is never invoked.</p>\n</blockquote>\n<blockquote>\n<p>调用此方法可确保永远不会调用onPostExecute</p>\n</blockquote>\n<p>不要调用 <strong>cancle(true)</strong> 方法</p>\n<p><strong><li>Error:(11) No resource identifier found for attribute ‘roundIcon’ in package</li></strong></p>\n<blockquote>\n<p>删除AndroidManifest.xml里的 android:roundIcon=”@mipmap/ic_launcher_round”</p>\n</blockquote>\n<p><strong><li> OkHttp常见问题</li></strong></p>\n<blockquote>\n<p>.string不能用两次，否则报错，记得添加INTERNET权限</p>\n</blockquote>\n<p><strong><li> Installation failed with message Failed to finalize session</li></strong></p>\n<blockquote>\n<p>clean project 即可</p>\n</blockquote>\n<p><strong><li> java.lang.IllegalArgumentException: Service Intent must be explicit</li></strong></p>\n<blockquote>\n<p>在android 5.0版本以后，service intent必须为显式指出</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(<span class=\"string\">\"ADD\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//if dismiss will error</span></span><br><span class=\"line\">intent.setPackage(<span class=\"string\">\"io.github.grooters.practicer.BindeRer\"</span>);</span><br><span class=\"line\">bindService(intent,serviceConnection,BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure>\n<p><strong><li> android.view.InflateException: Binary XML file line #7: Binary XML file line #7: Error inflating class</li></strong></p>\n<blockquote>\n<p>自定义控件需要重写以下构造方法：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Viewer</span><span class=\"params\">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><li> org.gradle.api.resources.ResourceException: Could not get resource</li></strong></p>\n<p><img src=\"/img/Android/Android错误集锦/orggradleapiresourcesResourceExceptionCouldnotgetresource.PNG\" alt=\"\"></p>\n<p><li> Unfortunately you can’t have non-Gradle Java modules and Android-Gradle modules in one project.</li></p>\n<blockquote>\n<p>Sync project with gradle file</p>\n</blockquote>\n<p><strong><li> 卸载后重新安装app提示签名不一致无法安装</li></strong></p>\n<blockquote>\n<p>未完全卸载app，只需要在应用商店的应用管理中的安装管理中卸载掉app</p>\n</blockquote>\n<p><strong><li> Error:Execution failed for task ‘:app:lintVitalRelease’</li></strong></p>\n<blockquote>\n<p>打包发布版apk时，你在错误或警告无法通过检测</p>\n</blockquote>\n<p>只需要在app中的build.gradle中添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android&#123;</span><br><span class=\"line\">    lintOptions &#123;</span><br><span class=\"line\">        checkReleaseBuilds false</span><br><span class=\"line\">        abortOnError false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><li> App is not indexable by Google Search; consider adding at least one Activity with an ACTION-VIEW intent filter. See issue explanation for more details. less… (Ctrl+F1)<br>Adds URLs to get your app into the Google index, to get installs and traffic to your app from Google Search.</li></strong></p>\n<p>在AndroidManefist.xml中添加<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>eg:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span> <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"standard\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.VIEW\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong><li> Could not find com.android.tools.build:aapt2:3.2.0-alpha14-4748712.<br>Searched in the following locations:<br><br>    file:/D:/android_sdk/extras/m2repository/com/android/tools/build/aapt2/3.2.0-alpha14-4748712/aapt2-3.2.0-alpha14-4748712.pom</li></strong></p>\n<p>在project里的builde.gralde增加谷歌库</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        google()//新增的</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"操作系统的功能特征","url":"https://grooters.github.io/2018/09/06/操作系统的功能特征/","content":"<h1 id=\"操作系统的特征\"><a href=\"#操作系统的特征\" class=\"headerlink\" title=\"操作系统的特征\"></a>操作系统的特征</h1><p><strong><li> 共享性</li></strong></p>\n<p><strong><li> 虚拟性</li></strong></p>\n<p><strong><li> 并发性</li></strong></p>\n<p><strong><li> 不确定性</li></strong></p>\n<h2 id=\"共享性\"><a href=\"#共享性\" class=\"headerlink\" title=\"共享性\"></a>共享性</h2><blockquote>\n<p>计算机中的各种资源在操作系统的控制下供运行在操作系统的程序共同享用</p>\n</blockquote>\n<h2 id=\"虚拟性\"><a href=\"#虚拟性\" class=\"headerlink\" title=\"虚拟性\"></a>虚拟性</h2><blockquote>\n<p>能将一个真实存在的物理硬件变成多个虚拟的逻辑物体</p>\n</blockquote>\n<p><strong>正是虚拟性操作系统才能实现共享性，如内存的 “共享”，CPU的 “共享”</strong></p>\n<h2 id=\"并发性\"><a href=\"#并发性\" class=\"headerlink\" title=\"并发性\"></a>并发性</h2><blockquote>\n<p>两个或两个以上的事务在同一事件间隔发生</p>\n</blockquote>\n<p><strong>并行：</strong></p>\n<blockquote>\n<p>两个或两个以上的事务在同一时刻发生</p>\n</blockquote>\n<h2 id=\"不确定性\"><a href=\"#不确定性\" class=\"headerlink\" title=\"不确定性\"></a>不确定性</h2><blockquote>\n<p>用户无法对正在运行的程序的行为和结果进行判断</p>\n</blockquote>\n<p><strong>因为操作系统的并发性导致程序在走走停停，使程序充满不确定性</strong></p>\n<h1 id=\"操作系统的功能\"><a href=\"#操作系统的功能\" class=\"headerlink\" title=\"操作系统的功能\"></a>操作系统的功能</h1><p><strong><li> 进程管理</li></strong></p>\n<p><strong><li> 存储管理</li></strong></p>\n<p><strong><li> 文件管理</li></strong></p>\n<p><strong><li> 操作系统接口</li></strong></p>\n<h2 id=\"进程管理\"><a href=\"#进程管理\" class=\"headerlink\" title=\"进程管理\"></a>进程管理</h2><p><li> 进程控制</li></p>\n<blockquote>\n<p>创建，撤销进程以及控制进程在运行过程中的状态转换</p>\n</blockquote>\n<p><li> 进程同步</li></p>\n<ol>\n<li>互斥方式</li>\n</ol>\n<blockquote>\n<p>若需要同时只能有一个程序能访问资源，则需要采用互斥方式访问资源</p>\n</blockquote>\n<ol start=\"2\">\n<li>同步方式</li>\n</ol>\n<blockquote>\n<p>两个程序需要共同协作，后一个程序的行为需要前一个程序的结果做配合，此时需要按照一定的次序进行资源访问，及同步方式访问资源</p>\n</blockquote>\n<h2 id=\"进程通信\"><a href=\"#进程通信\" class=\"headerlink\" title=\"进程通信\"></a>进程通信</h2><blockquote>\n<p>不同进程间的信息传递，如</p>\n</blockquote>\n","categories":["操作系统"],"tags":[]},{"title":"我的第一个接口","url":"https://grooters.github.io/2018/09/05/第一个接口/","content":"<h1 id=\"Servlet的使用\"><a href=\"#Servlet的使用\" class=\"headerlink\" title=\"Servlet的使用\"></a>Servlet的使用</h1><p><strong>通过IDEA新建Sevlet工程：</strong></p>\n<p>Java -&gt; Web Application （选上”create web.xml”），即可得如下目录结构：</p>\n<p><img src=\"/img/后端/第一个接口/Servlet工程结构.PNG\" alt=\"Sevlet工程结构\"></p>\n<p>在src中创建继承于HttpServlet的类，重写doGet和doPost方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SeatOverrMain</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SeatOverrMain</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        ServletOutputStream out=resp.getOutputStream();</span><br><span class=\"line\">        resp.setContentType(<span class=\"string\">\"text/plain\"</span>);</span><br><span class=\"line\">        resp.setCharacterEncoding(<span class=\"string\">\"UTF-8\"</span>);</span><br><span class=\"line\">        String param=req.getParameter(<span class=\"string\">\"Seat\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(param.equals(<span class=\"string\">\"Seat\"</span>))&#123;</span><br><span class=\"line\">            out.print(<span class=\"string\">\"Success\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            out.print(<span class=\"string\">\"fail\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest req, HttpServletResponse resp)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(req,resp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意要将doGet和doPost方法中的super语句去掉，不然访问时会报405错误</p>\n</blockquote>\n<p><strong>HttpServlet</strong>所在的jar包为：“servlet-api-6.0.41.jar”，可在<strong><a href=\"https://www.findjar.com/index.x\" target=\"_blank\" rel=\"noopener\">jar search</a></strong>中获得</p>\n<p><strong>然后需要搭建Tomcat服务器，步骤如下：</strong></p>\n<p>先下载Tomcat的压缩包解压出来，在IDEA运行按钮处打开Edit Configuration窗体：</p>\n<blockquote>\n<p>Defauts -&gt; Tomcat Server -&gt; Local -&gt; server -&gt; Configure…</p>\n</blockquote>\n<p>在Toncat Home中选中刚刚解压出来的Tomcat文件夹，回到Edit Configuration窗体：</p>\n<p>Defauts所在栏中会多出一个Tomcat Server，选中然后在右边窗体中选择Deployment：</p>\n<p>再添加[项目名]:war exploded，然后ok。在刚刚运行处便会出现Tomcat图标此时即可运行</p>\n<h1 id=\"Spring-Boot\"><a href=\"#Spring-Boot\" class=\"headerlink\" title=\"Spring Boot\"></a>Spring Boot</h1><p><em>很牛逼的一个框架，刚开始被她的简单惊到了，O O</em></p>\n<p>具体用法参见：</p>\n<p><strong><a href=\"https://www.cnblogs.com/ityouknow/p/5662753.html\" target=\"_blank\" rel=\"noopener\">构建微服务：Spring boot 入门篇</a></strong></p>\n<h2 id=\"跨域访问\"><a href=\"#跨域访问\" class=\"headerlink\" title=\"跨域访问\"></a>跨域访问</h2><p><em>需要新建过滤类：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.grooters.seatOccupied.filter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Component;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CorsFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Filter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">doFilter</span><span class=\"params\">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class=\"keyword\">throws</span> IOException, ServletException </span>&#123;</span><br><span class=\"line\">        HttpServletResponse response = (HttpServletResponse) servletResponse;</span><br><span class=\"line\">        HttpServletRequest reqs = (HttpServletRequest) servletRequest;</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Origin\"</span>,<span class=\"string\">\"*\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Credentials\"</span>, <span class=\"string\">\"true\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Methods\"</span>, <span class=\"string\">\"POST, GET, PATCH, DELETE, PUT\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Max-Age\"</span>, <span class=\"string\">\"3600\"</span>);</span><br><span class=\"line\">        response.setHeader(<span class=\"string\">\"Access-Control-Allow-Headers\"</span>, <span class=\"string\">\"Origin, X-Requested-With, Content-Type, Accept\"</span>);</span><br><span class=\"line\">        filterChain.doFilter(reqs, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroy</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(FilterConfig filterConfig)</span> <span class=\"keyword\">throws</span> ServletException </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"返回界面\"><a href=\"#返回界面\" class=\"headerlink\" title=\"返回界面\"></a>返回界面</h2><p><em>添加依赖：</em></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><em>application.properties中添加配置：</em></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定位模板的目录,在resouces/static中</span><br><span class=\"line\">spring.mvc.view.prefix=/</span><br><span class=\"line\"># 给返回的页面添加后缀名</span><br><span class=\"line\">spring.mvc.view.suffix=.html</span><br></pre></td></tr></table></figure>\n<p><em>Controller：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> io.github.grooters.seatOccupied.controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.stereotype.Controller;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Index</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/index\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">greet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"index\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["后端"],"tags":[]},{"title":"lller库的使用","url":"https://grooters.github.io/2018/09/03/lller库的使用/","content":"<h1 id=\"功能模块\"><a href=\"#功能模块\" class=\"headerlink\" title=\"功能模块\"></a>功能模块</h1><p><li> Okhttp框架集成</li></p>\n<p><li> Glide框架集成</li></p>\n<p><li> fastJson框架集成</li></p>\n<p><li> RecyclerView的封装</li></p>\n<p><li> ViewPager的封装</li></p>\n<hr>\n<h1 id=\"库的载入\"><a href=\"#库的载入\" class=\"headerlink\" title=\"库的载入\"></a>库的载入</h1><p>导入moudle：在setting.graddle中增加’:lller’,eg：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">include ':app',':lller'</span><br></pre></td></tr></table></figure>\n<p>以library使用需要添加moudle dependency，在build.gradle中添加依赖，eg：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implemention project(':lller')</span><br></pre></td></tr></table></figure>\n<h1 id=\"OkHttPer\"><a href=\"#OkHttPer\" class=\"headerlink\" title=\"OkHttPer\"></a>OkHttPer</h1><blockquote>\n<p>集成OkHttp同步异步和post请求以及网页内容长度获取和下载功能</p>\n</blockquote>\n<p><strong><li> 异步get方法</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getByAsync</span><span class=\"params\">(String url, <span class=\"keyword\">final</span> CallBackOKInter callBackOKInter)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>url：请求地址</p>\n</blockquote>\n<p><em>example：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传入接口地址和Java Bean返回一个带数据的Java Bean</span></span><br><span class=\"line\">OkHttPer.getOkHeePer().getByAsync(<span class=\"string\">\"localhost:8080/login?user=admin&amp;pass=admin\"</span>, <span class=\"keyword\">new</span> OkHttPer.CallBackOKInter() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String json)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(String errorInfo, IOException e)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong><li> 同步get请求</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getBySync</span><span class=\"params\">(<span class=\"keyword\">final</span> String url)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>url：请求地址</p>\n</blockquote>\n<p><em>exmple：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OkHttPer.getOkHeePer().getBySync(<span class=\"string\">\"localhost:8080/login?user=admin&amp;pass=admin\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p><strong><li> post请求</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postByOk</span><span class=\"params\">(String url, Map&lt;String,String&gt; map, <span class=\"keyword\">final</span> CallBackOKInter callBackOKInter)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>url：请求地址</p>\n</blockquote>\n<blockquote>\n<p>map：请求参数</p>\n</blockquote>\n<p><em>exmple：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">map.put(<span class=\"string\">\"user\"</span>,<span class=\"string\">\"admin\"</span>);</span><br><span class=\"line\">map.put(<span class=\"string\">\"pass\"</span>,<span class=\"string\">\"admin\"</span>)</span><br><span class=\"line\">OkHttPer.getOkHeePer().postByOk(<span class=\"string\">\"localhost:8080/login\"</span>,map,<span class=\"keyword\">new</span> OkHttPer.CallBackOKInter() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onResponse</span><span class=\"params\">(String json)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onFailure</span><span class=\"params\">(String errorInfo, IOException e)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong><li> 获取网页内容长度</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getContentLength</span><span class=\"params\">(<span class=\"keyword\">final</span> String url)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>utl：请求地址</p>\n</blockquote>\n<p><strong><li> 下载网页内容</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> InputStream <span class=\"title\">downOk</span><span class=\"params\">(String url, Map&lt;String,String&gt; header)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>header：请求头</p>\n</blockquote>\n<p><em>example：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map map=<span class=\"keyword\">new</span> HashMap();</span><br><span class=\"line\">map.put(<span class=\"string\">\"cookie\"</span>,<span class=\"string\">\"123456\"</span>)</span><br><span class=\"line\">OkHttPer.getOkHeePer().downOk(<span class=\"string\">\"localhost:8080\"</span>,map);</span><br></pre></td></tr></table></figure>\n<h1 id=\"glider\"><a href=\"#glider\" class=\"headerlink\" title=\"glider\"></a>glider</h1><blockquote>\n<p>集成图片加载框架Glide的功能内容</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadImg</span><span class=\"params\">(Context context,String url, ImageView imageView)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadLocalImg</span><span class=\"params\">(Context context,String filePath,ImageView imageView)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadUriImg</span><span class=\"params\">(Context context,String filePath,ImageView imageView,String authority)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadResImg</span><span class=\"params\">(Context context,<span class=\"keyword\">int</span> resource,ImageView imageView)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadImg</span><span class=\"params\">(Context context,String url,<span class=\"keyword\">int</span> placeHolder, ImageView imageView)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadLocalImg</span><span class=\"params\">(Context context,String filePath,<span class=\"keyword\">int</span> placeHolder,ImageView imageView)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadUriImg</span><span class=\"params\">(Context context,String filePath,<span class=\"keyword\">int</span> placeHolder,ImageView imageView,String authority)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">loadResImg</span><span class=\"params\">(Context context,<span class=\"keyword\">int</span> resource,<span class=\"keyword\">int</span> placeHolder,ImageView imageView)</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"RecyclerVieWer\"><a href=\"#RecyclerVieWer\" class=\"headerlink\" title=\"RecyclerVieWer\"></a>RecyclerVieWer</h1><p>该控件继承自RecyclerView，集成了三种适配器：GeneralAdapter（通用适配器），MultipleTypeAdapter（多布局适配器）和HeadAdapter（头布局适配器），提供了上拉加载更多的逻辑接口</p>\n<p><li> 通用适配器的绑定</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setGeneralAdapter</span><span class=\"params\">(<span class=\"keyword\">final</span> <span class=\"keyword\">int</span> layoutId, <span class=\"keyword\">final</span> List&lt;T&gt; datas, <span class=\"keyword\">final</span> RecyclerHandler handler)</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(GeneralHolder viewHolder, T data)</span></span></span><br></pre></td></tr></table></figure>\n<p>通过调用该方法客户端在重写RecyclerHandler接口中的handle方法后直接绑定通用适配器</p>\n<p><li> 多布局适配器的绑定</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMultipleAdapter</span><span class=\"params\">(<span class=\"keyword\">final</span> List&lt;T&gt; datas, <span class=\"keyword\">final</span> RecyclerMultiHandler&lt;T&gt; RecyclerMultiHandler)</span></span></span><br></pre></td></tr></table></figure>\n<p>通过调用该方法客户端在重写RecyclerMultiHandler接口中的handle，getItemType和getLayoutId方法后直接绑定多布局适配器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemType</span><span class=\"params\">(<span class=\"keyword\">int</span> position, List&lt;T&gt; datas)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>返回该Item所属的布局类型，为getLayoutId提供itemType参数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLayoutId</span><span class=\"params\">(<span class=\"keyword\">int</span> itemType)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>根据itemType返回对应的布局</p>\n</blockquote>\n<p><li> 上拉加载动画</li></p>\n<p><strong>Listener</strong>接口提供onScroll方法供客户端重写实现上拉加载的业务逻辑，在使用前必须调用setLoading方法传入progressBar圆形进度条和setOnListener方法设置监听器。</p>\n<h1 id=\"RecyclerView通用适配器\"><a href=\"#RecyclerView通用适配器\" class=\"headerlink\" title=\"RecyclerView通用适配器\"></a>RecyclerView通用适配器</h1><p><strong><li> GeneralAdapter</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(GeneralHolder viewHolder,T data)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>viewHolder：可通过此参数获取布局控件</p>\n</blockquote>\n<p><em>example：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RecyclerView recyclerView=view.findViewById(R.id.recycler_oneFloor);</span><br><span class=\"line\">GeneralAdapter&lt;Seat[]&gt; adapter=<span class=\"keyword\">new</span> GeneralAdapter&lt;Seat[]&gt;(getContext(),R.layout.recycler_reserve_item,seats,seats) &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(GeneralHolder viewHolder, Seat[] data)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">recyclerView.setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(getContext());</span><br><span class=\"line\">recyclerView.setAdapter(adapter);</span><br></pre></td></tr></table></figure>\n<p><strong><li> MultipleTypeAdapter</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getLayoutId</span><span class=\"params\">(<span class=\"keyword\">int</span> itemType)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>itemType：该item的布局类型</p>\n</blockquote>\n<blockquote>\n<p>返回值int：返回布局id，作为该item的布局</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemType</span><span class=\"params\">(<span class=\"keyword\">int</span> position, T datas)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>返回值int：该item的布局类型，提供给getLayoutId的itemType参数</p>\n</blockquote>\n<h1 id=\"ViewPageRer\"><a href=\"#ViewPageRer\" class=\"headerlink\" title=\"ViewPageRer\"></a>ViewPageRer</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context,List&lt;Fragment&gt; fragments, List&lt;View&gt; views,FragmentManager fm,ViewPagerInterface viewPagerInterface)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>fragments：需要添加页面的Fragment集合</p>\n</blockquote>\n<blockquote>\n<p>views：需要添加的View集合</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> position,<span class=\"keyword\">int</span> state,<span class=\"keyword\">float</span> positionOffset, <span class=\"keyword\">int</span> positionOffsetPixels)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>viewPagerInterface中的重写方法，用于执行一些监听操作，如滑动，不需要的参数可留空</p>\n</blockquote>\n<p><em>example：</em></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ViewPageRer</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/viewPageRer\"</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">.....</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewPageRer viewPageRer=findViewById(R.id.viewPageRer);</span><br><span class=\"line\">viewPageRer.init(<span class=\"keyword\">this</span>,fragments,views,manager,<span class=\"keyword\">new</span> ViewPagerInterface()&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handle</span><span class=\"params\">(<span class=\"keyword\">int</span> position,<span class=\"keyword\">int</span> state,<span class=\"keyword\">float</span> positionOffset, <span class=\"keyword\">int</span> positionOffsetPixels)</span></span>&#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"Android动态申请权限","url":"https://grooters.github.io/2018/09/02/Android动态申请权限/","content":"<p><strong><a href=\"https://developer.android.google.cn/reference/android/Manifest.permission\" target=\"_blank\" rel=\"noopener\">Manifest.permission</a></strong></p>\n<blockquote>\n<p>Android6.0后，当权限等级为dangerous及以上时，就需要动态权限申请，否则会程序崩溃</p>\n</blockquote>\n<p><em>打开摄像头示例：</em></p>\n<p><img src=\"/img/Android/Android权限管理/Camera.jpg\" alt=\"摄像头权限等级\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(ActivityCompat.checkSelfPermission(getActivity(), Manifest.permission.CAMERA)!= PackageManager.PERMISSION_GRANTED)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//在Activity中</span></span><br><span class=\"line\">   <span class=\"comment\">//ActivityCompat.requestPermissions(this,new String[]&#123;Manifest.permission.CAMERA&#125;, REQUEST_CAMERA);</span></span><br><span class=\"line\">   requestPermissions(<span class=\"keyword\">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, REQUEST_CAMERA);</span><br><span class=\"line\">   <span class=\"comment\">//在Fragment中</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    Intent intent=<span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class=\"line\">    startActivity(intent);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRequestPermissionsResult</span><span class=\"params\">(<span class=\"keyword\">int</span> requestCode, @NonNull String[] permissions, @NonNull <span class=\"keyword\">int</span>[] grantResults)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (requestCode == PhotoFragment.REQUEST_CAMERA) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (grantResults.length&gt;<span class=\"number\">0</span> &amp;&amp; grantResults[<span class=\"number\">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(MediaStore.ACTION_IMAGE_CAPTURE);</span><br><span class=\"line\">            startActivity(intent);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Toast.makeText(getActivity(), <span class=\"string\">\"未获取打开摄像头权限\"</span>, Toast.LENGTH_LONG).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"LitePal使用方法","url":"https://grooters.github.io/2018/09/02/LitePal使用方法/","content":"<p>参考于：</p>\n<p><a href=\"https://blog.csdn.net/guolin_blog/article/category/2522725\" target=\"_blank\" rel=\"noopener\">Android数据库高手秘籍</a></p>\n<p><strong><li>数据库与表的创建</li></strong></p>\n<p>在assets目录下创建<strong>litepal.xm</strong>文件</p>\n<p><em>litepal.xml</em><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">litepal</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dbname</span> <span class=\"attr\">value</span>=<span class=\"string\">\"LllerDemo\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">mapping</span> <span class=\"attr\">class</span>=<span class=\"string\">\"io.github.grooters.lllerdemo.bean.NewData\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">list</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>通过以下语句创建含有NewData表的数据库<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SQLiteDatabase db = Connector.getDatabase();</span><br></pre></td></tr></table></figure></p>\n<p><strong><li>数据表的更新</li></strong></p>\n<p>修改完bean类后，只需将litepal.xml中的<strong>version value</strong>修改为原来基础上加1即可</p>\n<p><strong><li>数据的修改</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ContentValues values = <span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">values.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"llnl\"</span>);</span><br><span class=\"line\">DataSupport.update(NewData.class, values, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ContentValues values = <span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">values.put(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"llnl\"</span>);</span><br><span class=\"line\">DataSupport.updateAll(News.class, values, <span class=\"string\">\"name = ?\"</span>, <span class=\"string\">\"grooter\"</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NewData newData = <span class=\"keyword\">new</span> NewData();</span><br><span class=\"line\">newData.setName(<span class=\"string\">\"llnl\"</span>);</span><br><span class=\"line\">newData.update(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NewData newData = <span class=\"keyword\">new</span> NewData();</span><br><span class=\"line\">newData.setTitle(<span class=\"string\">\"llnl\"</span>);</span><br><span class=\"line\">newData.updateAll(<span class=\"string\">\"name = ? and age &gt; ?\"</span>, <span class=\"string\">\"grooter\"</span>, <span class=\"string\">\"10\"</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NewData newData = <span class=\"keyword\">new</span> NewData();</span><br><span class=\"line\">newData.setToDefault(<span class=\"string\">\"age\"</span>);</span><br><span class=\"line\">newData.updateAll();</span><br></pre></td></tr></table></figure>\n<p><strong><li>数据的插入</li></strong></p>\n<p><strong>向NewData表插入一行：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NewData newData=<span class=\"keyword\">new</span> NewData(<span class=\"string\">\"llnl\"</span>,<span class=\"string\">\"today\"</span>,<span class=\"string\">\"test\"</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">generalData.save();</span><br></pre></td></tr></table></figure>\n<p><strong><li>数据的删除</li></strong></p>\n<p><strong>删除id为1的所在行：</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LitePal.delete(newData.class,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p><strong><li>数据表的关联</li></strong></p>\n<p>只需在bean类中做相关的定义，比如在NewData这个bean类中，我定义了如下成员变量：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> NewIntro newIntro;</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;NewCategory&gt; newCategorys;</span><br><span class=\"line\"><span class=\"keyword\">private</span> List&lt;NewComment&gt; newComments;</span><br></pre></td></tr></table></figure>\n<p><strong>映射为表就是一个NewData表就对应多个NewIntro表</strong></p>\n<blockquote>\n<p>此时在NewIntro表会多出一个newdata_id列</p>\n</blockquote>\n<p><strong>多个NewData表对应多个NewCategory表和多个NewComment表</strong></p>\n<blockquote>\n<p>此时会产生两个名分别为newcategory_newdata和newcomment_newdata的表</p>\n</blockquote>\n<p><strong>这些表存有两个关联表的关联id</strong></p>\n<p><strong><li>数据查询</li></strong></p>\n<p>对应的bean需要继承<strong>LitePalSupport</strong>类</p>\n<p><em>查询NewData表中id为1的所有数据，并赋值给bean类：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NewData newData=LitePal.find(NewData.class,<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure></p>\n<p><em>查询第一条和最后一条数据：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NewData newDataFirst = LitePal.findFirst(NewData.class);</span><br><span class=\"line\">NewData newDataLast = LitePal.findLast(NewData.class);</span><br></pre></td></tr></table></figure></p>\n<p><em>查询id为1，3，5，7的数据赋值给List<newdata>：</newdata></em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;NewData&gt; newDatas = DataSupport.findAll(NewData.class, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span>[] ids = <span class=\"keyword\">new</span> <span class=\"keyword\">long</span>[] &#123; <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span> &#125;;</span><br><span class=\"line\">List&lt;NewData&gt; newDatas = DataSupport.findAll(NewData.class, ids);</span><br></pre></td></tr></table></figure></p>\n<p><em>连缀查找：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;NewData&gt; newDatas = DataSupport.where(<span class=\"string\">\"age &gt; ?\"</span>, <span class=\"string\">\"10\"</span>).find(NewData.class);</span><br><span class=\"line\"><span class=\"comment\">//仅查询name和sex属性</span></span><br><span class=\"line\">List&lt;NewData&gt; newDatas = DataSupport.select(<span class=\"string\">\"name\"</span>, <span class=\"string\">\"sex\"</span>)</span><br><span class=\"line\">\t\t.where(<span class=\"string\">\"age &gt; ?\"</span>, <span class=\"string\">\"10\"</span>).find(NewData.class);</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">.order(<span class=\"string\">\"publishdate desc\"</span>)</span><br><span class=\"line\"><span class=\"comment\">//仅查询10条数据</span></span><br><span class=\"line\">.limit(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"comment\">//从第11条数据开始查询查询10条</span></span><br><span class=\"line\">.limit(<span class=\"number\">10</span>).offeset(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure></p>\n<p><strong>激进查找</strong></p>\n<p><em>除了查询NewData表还会查询与该表关联的表：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NewData newDatas = DataSupport.find(NewData.class, <span class=\"number\">1</span>, <span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>不能迭代查询，即不能查询与NewData表关联表的关联表</p>\n</blockquote>\n<p><strong>原生查询</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cursor cursor = DataSupport.findBySQL(<span class=\"string\">\"select * from NewData where age&gt;?\"</span>, <span class=\"string\">\"10\"</span>);</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"枚举学习","url":"https://grooters.github.io/2018/08/30/枚举学习/","content":"<p><strong><font size=\"5sp\"><a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"noopener\">Enum</a></font></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> MyEnum &#123;</span><br><span class=\"line\">    SPRING(<span class=\"string\">\"春天\"</span>),</span><br><span class=\"line\">    WINTER(<span class=\"string\">\"冬天\"</span>),</span><br><span class=\"line\">    SUMMER(<span class=\"string\">\"夏天\"</span>),</span><br><span class=\"line\">    AUTUMN(<span class=\"string\">\"秋天\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String info;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">MyEnum</span><span class=\"params\">(String info)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.info=info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getInfo</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(MyEnum myEnum:MyEnum.values())&#123;</span><br><span class=\"line\">            System.out.print(myEnum.getInfo()+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(MyEnum myEnum:MyEnum.values())&#123;</span><br><span class=\"line\">            System.out.print(myEnum.compareTo(MyEnum.AUTUMN)+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            System.out.print(myEnum.equals(MyEnum.AUTUMN)+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            System.out.print(myEnum==MyEnum.AUTUMN);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">            System.out.print(<span class=\"string\">\"ordinal: \"</span>+myEnum.ordinal());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>春天 冬天 夏天 秋天 <br><br>-3 false false ordinal: 0<br><br>-2 false false ordinal: 1<br><br>-1 false false ordinal: 2<br><br>0 true true ordinal: 3</p>\n</blockquote>\n<p>Enum实现了<strong>Comparable</strong>和<strong>Serializable</strong>，故可以使用<strong>Comparable</strong>的<strong>compareTo</strong>方法</p>\n<blockquote>\n<p>相等返回0，小于参数返回负数，大于参数返回正数</p>\n</blockquote>\n","categories":["Java"],"tags":[]},{"title":"ConstraintLayout初探","url":"https://grooters.github.io/2018/08/27/ConstraintLayout初探/","content":"<p><strong><a href=\"https://mp.weixin.qq.com/s/gGR2itbY7hh9fo61SxaMQQ\" target=\"_blank\" rel=\"noopener\">ConstraintLayout性能解析</a></strong></p>\n<h1 id=\"常用属性\"><a href=\"#常用属性\" class=\"headerlink\" title=\"常用属性\"></a>常用属性</h1><h2 id=\"类似于RelativeLayout的属性\"><a href=\"#类似于RelativeLayout的属性\" class=\"headerlink\" title=\"类似于RelativeLayout的属性\"></a>类似于RelativeLayout的属性</h2><p><li>layout_constraintStart_toStartOf</li></p>\n<blockquote>\n<p>app:layout_constraintStart_toStartOf=”@id/text1”</p>\n</blockquote>\n<p><strong>该控件与text1左对齐</strong></p>\n<blockquote>\n<p>app:layout_constraintStart_toStartOf=”parent”</p>\n</blockquote>\n<p><strong>该控件约束在布局最左端</strong></p>\n<p><li>layout_constraintStart_toEndOf</li></p>\n<blockquote>\n<p>app:layout_constraintStart_toEndOf=”@id/text1”</p>\n</blockquote>\n<p><strong>该控件在text1的右端</strong></p>\n<p><em>其它以此类推</em></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/text1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"100dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"80dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/red\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/text2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"50dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"string\">\"@id/text1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">\"@id/text1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorPrimary\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/text3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"string\">\"@id/text1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"@id/text1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintEnd_toStartOf</span>=<span class=\"string\">\"@id/text4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintTop_toBottomOf</span>=<span class=\"string\">\"@id/text2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/colorAccent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintHorizontal_weight</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/text4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/black\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"string\">\"@id/text3\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintTop_toBottomOf</span>=<span class=\"string\">\"@id/text2\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">\"parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintHorizontal_weight</span>=<span class=\"string\">\"2\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/Android/ConstraintLayout初探/toStartof.PNG\" alt=\"toStartof等属性\"></p>\n<h2 id=\"类似于LinearLayout的属性\"><a href=\"#类似于LinearLayout的属性\" class=\"headerlink\" title=\"类似于LinearLayout的属性\"></a>类似于LinearLayout的属性</h2><p><li>app:layout_constraintHorizontal_weight</li></p>\n<blockquote>\n<p>该属性与LinearLayout的layout_weight使用类似</p>\n</blockquote>\n<p><li>layout_constraintHorizontal_chainStyle</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_constraintHorizontal_chainStyle=\"spread\"</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>spread，默认属性，当宽度为0时按照weight分配宽度，宽度非零时：</p>\n</blockquote>\n<p><img src=\"/img/Android/ConstraintLayout初探/spread.PNG\" alt=\"spread属性\"></p>\n<blockquote>\n<p>spread-inside，宽度非零时：</p>\n</blockquote>\n<p><img src=\"/img/Android/ConstraintLayout初探/spread-inside.PNG\" alt=\"spread-inside属性\"></p>\n<blockquote>\n<p>packed，宽度非零时：</p>\n</blockquote>\n<p><img src=\"/img/Android/ConstraintLayout初探/packed.PNG\" alt=\"packed属性\"></p>\n<h2 id=\"增加浮动效果\"><a href=\"#增加浮动效果\" class=\"headerlink\" title=\"增加浮动效果\"></a>增加浮动效果</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app:layout_constraintHorizontal_bias=\"1\"</span><br><span class=\"line\">app:layout_constraintVertical_bias=\"1\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"辅助布局\"><a href=\"#辅助布局\" class=\"headerlink\" title=\"辅助布局\"></a>辅助布局</h2><blockquote>\n<p>可通过定义辅助布局，对控件以辅助线为基准进行位置改变</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Guideline</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/guide_h\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"horizontal\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintGuide_percent</span>=<span class=\"string\">\"0.5\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.support.constraint.Guideline</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/guide_v\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:orientation</span>=<span class=\"string\">\"vertical\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintGuide_percent</span>=<span class=\"string\">\"0.5\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"50dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"50dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"@color/red\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintStart_toEndOf</span>=<span class=\"string\">\"@id/guide_v\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">app:layout_constraintTop_toBottomOf</span>=<span class=\"string\">\"@id/guide_h\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/Android/ConstraintLayout初探/Guideline.PNG\" alt=\"packed属性\"></p>\n","categories":["Android"],"tags":[]},{"title":"Broadcast的使用","url":"https://grooters.github.io/2018/08/24/Broadcast的使用/","content":"<p>Android广播机制采用观察者模式</p>\n<h1 id=\"接收者\"><a href=\"#接收者\" class=\"headerlink\" title=\"接收者\"></a>接收者</h1><p><strong><a href=\"https://developer.android.google.cn/reference/android/content/BroadcastReceiver\" target=\"_blank\" rel=\"noopener\">BroadcastReceiver</a></strong></p>\n<p>该类为广播接收器类，示例代码为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBroadcastReceiver</span> <span class=\"keyword\">extends</span> <span class=\"title\">BroadcastReceiver</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"MyBroadcastReceiver\"</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onReceive</span><span class=\"params\">(Context context, Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onReceive\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当发送者发送广播时，onReceive方法会被触发执行</p>\n</blockquote>\n<h2 id=\"广播监听注册\"><a href=\"#广播监听注册\" class=\"headerlink\" title=\"广播监听注册\"></a>广播监听注册</h2><p><li> 静态注册</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">receiver</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MyBroadcastReceiver\"</span> &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.net.conn.CONNECTIVITY_CHANGE\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.BOOT_COMPLETED\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>action android:name的值指定的是触发条件：</p>\n<blockquote>\n<p>android.net.conn.CONNECTIVITY_CHANGE</p>\n</blockquote>\n<p>指的是网络改变</p>\n<blockquote>\n<p>android.intent.action.BOOT_COMPLETED</p>\n</blockquote>\n<p>指的是系统启动</p>\n<p><li>动态注册</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String BROADCAST_ACTION = <span class=\"string\">\"grooters.github.io\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> BroadcastReceiver mBroadcastReceiver;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        mBroadcastReceiver = <span class=\"keyword\">new</span> MyBroadcastReceiver();</span><br><span class=\"line\">        IntentFilter intentFilter = <span class=\"keyword\">new</span> IntentFilter();</span><br><span class=\"line\">        <span class=\"comment\">//添加触发条件</span></span><br><span class=\"line\">        intentFilter.addAction(BROADCAST_ACTION);</span><br><span class=\"line\">        registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"comment\">//注销该监听器</span></span><br><span class=\"line\">        unregisterReceiver(mBroadcastReceiver);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当发送者发送的广播的Action为grooters.github.io时便会触发该监听器</p>\n</blockquote>\n<h1 id=\"发送者\"><a href=\"#发送者\" class=\"headerlink\" title=\"发送者\"></a>发送者</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">intent.setAction(BROADCAST_ACTION);</span><br><span class=\"line\"><span class=\"comment\">//可在监听方法onReceiver的intent参数中取出数据</span></span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"data\"</span>,<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">sendBroadcast(intent);</span><br></pre></td></tr></table></figure>\n<h2 id=\"广播类型\"><a href=\"#广播类型\" class=\"headerlink\" title=\"广播类型\"></a>广播类型</h2><p><li> 普通广播</li></p>\n<p><li> 系统广播</li></p>\n<blockquote>\n<p>提供多个已存在的系统动作Action，如开机自启，网络改变，电量不足</p>\n</blockquote>\n<p><li> 有序广播</li></p>\n<blockquote>\n<p>有顺序地接收不同的广播，顺序取决于priority的值，越大就越前</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">intent-filter</span> <span class=\"attr\">android:priority</span>=<span class=\"string\">\"1\"</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><li> 本地广播</li></p>\n<blockquote>\n<p>只有本app能接收到该广播</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//接收者</span></span><br><span class=\"line\">LocalBroadcastManager localBroadcastManager = LocalBroadcastManager.getInstance(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">localBroadcastManager.registerReceiver(mBroadcastReceiver, intentFilter);</span><br><span class=\"line\">localBroadcastManager.unregisterReceiver(mBroadcastReceiver);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//发送者</span></span><br><span class=\"line\">Intent intent = <span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">intent.setAction(BROADCAST_ACTION);</span><br><span class=\"line\">intent.putExtra(<span class=\"string\">\"data\"</span>, <span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\">localBroadcastManager.sendBroadcast(intent);</span><br></pre></td></tr></table></figure>\n<h1 id=\"onReceive中的Context\"><a href=\"#onReceive中的Context\" class=\"headerlink\" title=\"onReceive中的Context\"></a>onReceive中的Context</h1><p><li> 镜头注册</li></p>\n<blockquote>\n<p>context 具体指的是 ReceiverRestrictedContext</p>\n</blockquote>\n<p><li> 动态注册</li></p>\n<blockquote>\n<p>context 具体指的是 Activity Context</p>\n</blockquote>\n<p><li> 本地广播</li></p>\n<blockquote>\n<p>context 具体指的是 Application Context</p>\n</blockquote>\n","categories":["Android"],"tags":[]},{"title":"RxJava与MVP结构的使用","url":"https://grooters.github.io/2018/08/22/RxJava与MVP结构的使用/","content":"<h1 id=\"MVP\"><a href=\"#MVP\" class=\"headerlink\" title=\"MVP\"></a>MVP</h1><p>有一种跟MVP相类似的开发结构MVC，该结构由三层组成：</p>\n<p><li> M 模型层</li></p>\n<p>该层也叫实体层，是存放数据的部分</p>\n<p><li> V 视图层</li></p>\n<p>该层用来构建UI界面</p>\n<p><li> C 控制器层</li></p>\n<p>该层对视图层和实体层起到连接作用</p>\n<p>eg：</p>\n<blockquote>\n<p>一个简单的登录层序，登录界面的构建由V层实现，数据存放（包括对数据库的操作）由M层实现，而C层功能为：当用户输入账号密码，C层便会从V层拿到用户数据后再从M层拿到原有数据进行比对，若一致再通知V层进行登录成功的UI响应。</p>\n</blockquote>\n<p>在Android开发中，V层常再Activity/Fragment中完成，但逻辑事务处理大多也在Activity/Fragment中实现，为此V和C层就难免混在一起，逻辑处理与视图构建耦合度较高。</p>\n<p>而MVP模式可以较为有效地解决这个问题：</p>\n<h2 id=\"MVP结构层次：\"><a href=\"#MVP结构层次：\" class=\"headerlink\" title=\"MVP结构层次：\"></a>MVP结构层次：</h2><p><li> M 模型层</li></p>\n<p>与MVC一样，也是存放数据的部分</p>\n<p><li> V 视图层</li></p>\n<p>该层也用来构建UI界面，但不同的是在该层MVP结构会通过定义一个用来定义所有视图层所要用到的方法，然后由Activity/Fragment实现该接口</p>\n<p><li> P Presenter</li></p>\n<p>类似于MVC中的C层，该层由定义逻辑方法的接口和实现该接口的类组成，在实现接口的类中带有V接口的引用，可以对视图进行操作，而实现接口的引用由Actiity/Fragment携有，可可在View接口的重写方法中调用Presenter相应的方法</p>\n<h2 id=\"结构图如下：\"><a href=\"#结构图如下：\" class=\"headerlink\" title=\"结构图如下：\"></a>结构图如下：</h2><p><img src=\"/img/Android/RxJava与MVP结构的使用/MVP结构图.png\" alt=\"MVP结构图.png\"></p>\n<h2 id=\"MVP结构的优点\"><a href=\"#MVP结构的优点\" class=\"headerlink\" title=\"MVP结构的优点\"></a>MVP结构的优点</h2><ol>\n<li><p>将视图逻辑和业务逻辑从Activity/Fragment分离了出来，降低了耦合，便于维护：<br>由此也避免在异步处理业务逻辑时持续持有Activity引用导致OOM</p>\n</li>\n<li><p>将方法定义为接口，从而让代码更加简洁清晰</p>\n</li>\n</ol>\n<h1 id=\"RxJava\"><a href=\"#RxJava\" class=\"headerlink\" title=\"RxJava\"></a>RxJava</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">compile 'io.reactivex.rxjava2:rxjava:2.0.1'</span><br><span class=\"line\">compile 'io.reactivex.rxjava2:rxandroid:2.0.1'</span><br></pre></td></tr></table></figure>\n<p>参照于：</p>\n<p><a href=\"https://www.jianshu.com/p/a406b94f3188\" target=\"_blank\" rel=\"noopener\">Android Rxjava：这是一篇 清晰 &amp; 易懂的Rxjava 入门教程</a></p>\n<p><strong>RxJava是一个基于事件流，实现异步操作的库</strong></p>\n<blockquote>\n<p>其作用类似于Android原生的AsyncTask和Handle</p>\n</blockquote>\n<p>RxJava的处理过程是以<strong>观察者模式</strong>为设计模式通过<strong>链式调用</strong>由观察者（<strong>Observer</strong>）对被观察者（<strong>Observable</strong>）的响应事件（<strong>Event</strong>）进行监听处理，观察者与被观察者通过订阅（<strong>Subscribe</strong>）进行连接</p>\n<h2 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h2><p><strong><li>创建被观察者，生成事件</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable&lt;Integer&gt; observable = Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    emitter.onNext(<span class=\"number\">1</span>);</span><br><span class=\"line\">    emitter.onNext(<span class=\"number\">2</span>);</span><br><span class=\"line\">    emitter.onNext(<span class=\"number\">3</span>);</span><br><span class=\"line\">    emitter.onComplete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过Observable的create方法创建被观察者对象，在重写的subscribe方法中定义要发送的事件</p>\n</blockquote>\n<p>除此方法外，还可以通过以下两种方式创建：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式1</span></span><br><span class=\"line\">Observable observable = Observable.just(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] is = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//方式2</span></span><br><span class=\"line\">Observable observable = Observable.from(is);</span><br></pre></td></tr></table></figure>\n<p>以上两种方式都会依次调用以下方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">onNext(<span class=\"number\">1</span>);</span><br><span class=\"line\">onNext(<span class=\"number\">2</span>);</span><br><span class=\"line\">onNext(<span class=\"number\">3</span>);</span><br><span class=\"line\">onCompleted();</span><br></pre></td></tr></table></figure>\n<p><strong><li>创建观察者，响应事件</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//方式1</span></span><br><span class=\"line\">Observer&lt;Integer&gt; observer = <span class=\"keyword\">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"comment\">//接受事件前调用</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onSubscribe\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer value)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onNext：\"</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onError\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onComplete\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//方式2</span></span><br><span class=\"line\">Subscriber&lt;String&gt; subscriber = <span class=\"keyword\">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Subscription s)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onSubscribe\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer value)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onNext: \"</span> + value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onError\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onComplete\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Observer与Subscriber不同之处在于Subscriber是Observer的扩展，当调用subscribe进行订阅时，Observer仍然会被转换成Subscriber</p>\n</blockquote>\n<p>Subscriber增加了以下两个方法：</p>\n<blockquote>\n<p>onStart()<br><br>unsubscribe()</p>\n</blockquote>\n<p>当不使用Subscriber对象时，可通过<strong>isUnsubscribed()</strong>方法判断状态然后调用<strong>unsubscribe()</strong>方法对该对象进行释放</p>\n<p><strong><li>进行订阅，连接观察者与被观察者</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">observable.subscribe(observer);</span><br><span class=\"line\"><span class=\"comment\">//observable.subscribe(subscriber);</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Observable.create(<span class=\"keyword\">new</span> ObservableOnSubscribe&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">subscribe</span><span class=\"params\">(ObservableEmitter&lt;Integer&gt; emitter)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        emitter.onNext(<span class=\"number\">1</span>);</span><br><span class=\"line\">        emitter.onNext(<span class=\"number\">2</span>);</span><br><span class=\"line\">        emitter.onNext(<span class=\"number\">3</span>);</span><br><span class=\"line\">        emitter.onComplete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).subscribe(<span class=\"keyword\">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onSubscribe</span><span class=\"params\">(Disposable d)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"开始采用subscribe连接\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onNext</span><span class=\"params\">(Integer value)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"对Next事件\"</span>+ value +<span class=\"string\">\"作出响应\"</span>  );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onError</span><span class=\"params\">(Throwable e)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"对Error事件作出响应\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onComplete</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"对Complete事件作出响应\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p>可通过Disposable对象d的dispose方法切断观察者与被观察者的连接：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d.dispose();</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"Java的I/O系统","url":"https://grooters.github.io/2018/08/20/Java的IO系统/","content":"<h1 id=\"FilenameFilter\"><a href=\"#FilenameFilter\" class=\"headerlink\" title=\"FilenameFilter\"></a>FilenameFilter</h1><blockquote>\n<p>文件过滤器，获取指定的文件</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FilenameFilter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Filenamer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String...args)</span></span>&#123;</span><br><span class=\"line\">        File path=<span class=\"keyword\">new</span> File(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">        String[] files;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(args.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            files=path.list();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            files=path.list(<span class=\"keyword\">new</span> DirFilter(args[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(files==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String file:files)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"file:\"</span>+file);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DirFilter</span> <span class=\"keyword\">implements</span> <span class=\"title\">FilenameFilter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Pattern pattern;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DirFilter</span><span class=\"params\">(String regex)</span></span>&#123;</span><br><span class=\"line\">        pattern=Pattern.compile(regex);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">accept</span><span class=\"params\">(File pathname,String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pattern.matcher(name).matches();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>DirFilter重写了FilenameFilter的<strong>accept</strong>方法根据传入的<strong>正则</strong>判断出符合条件的文件名，符合返回true，不符合返回false</p>\n<p><strong>accept方法供list方法调用，list方法源码如下：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String[] list(FilenameFilter filter) &#123;</span><br><span class=\"line\">    String names[] = list();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((names == <span class=\"keyword\">null</span>) || (filter == <span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> names;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    List&lt;String&gt; v = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; names.length ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (filter.accept(<span class=\"keyword\">this</span>, names[i])) &#123;</span><br><span class=\"line\">            v.add(names[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v.toArray(<span class=\"keyword\">new</span> String[v.size()]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h1><h2 id=\"读取文件到缓存\"><a href=\"#读取文件到缓存\" class=\"headerlink\" title=\"读取文件到缓存\"></a>读取文件到缓存</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BufferedReader in=<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> FileReader(fileName));</span><br><span class=\"line\"><span class=\"keyword\">while</span>((str=in.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">  strs.append(str);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取字符串到内存\"><a href=\"#读取字符串到内存\" class=\"headerlink\" title=\"读取字符串到内存\"></a>读取字符串到内存</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringReader in=<span class=\"keyword\">new</span> StringReader(str);</span><br><span class=\"line\"><span class=\"comment\">//in。read返回字符的Ascall码，内容读取完则返回-1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>((c=in.read())!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  System.out.println((<span class=\"keyword\">char</span>)c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"读取字节到内存\"><a href=\"#读取字节到内存\" class=\"headerlink\" title=\"读取字节到内存\"></a>读取字节到内存</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//new ByteArrayInputStream()将字节数组转换成字节流</span></span><br><span class=\"line\">DataInputStream in=<span class=\"keyword\">new</span> DataInputStream(<span class=\"keyword\">new</span> ByteArrayInputStream(str.getBytes());</span><br><span class=\"line\"><span class=\"comment\">//in.readByte()返回下一个字节，当已经到达末尾，会抛出EOFException异常</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(in.available()!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">  System.out.println((<span class=\"keyword\">char</span>)in.readByte())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h1><h2 id=\"写内容到文件\"><a href=\"#写内容到文件\" class=\"headerlink\" title=\"写内容到文件\"></a>写内容到文件</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrintWriter out=<span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(fileName)));</span><br><span class=\"line\">out.println(str);</span><br></pre></td></tr></table></figure>\n<h1 id=\"存储和恢复数据\"><a href=\"#存储和恢复数据\" class=\"headerlink\" title=\"存储和恢复数据\"></a>存储和恢复数据</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    DataOutputStream out=<span class=\"keyword\">new</span> DataOutputStream(<span class=\"keyword\">new</span> BufferedOutputStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"test.txt\"</span>)));</span><br><span class=\"line\">    out.writeChar(<span class=\"string\">'c'</span>);</span><br><span class=\"line\">    out.writeBoolean(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">    out.writeDouble(<span class=\"number\">12.3222222</span>);</span><br><span class=\"line\">    out.writeUTF(<span class=\"string\">\"str\"</span>);</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">    DataInputStream in=<span class=\"keyword\">new</span> DataInputStream(<span class=\"keyword\">new</span> BufferedInputStream(<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"test.txt\"</span>)));</span><br><span class=\"line\">    <span class=\"comment\">//注意读取有顺序区分</span></span><br><span class=\"line\">    System.out.println(in.readChar()+<span class=\"string\">\" \"</span>+in.readBoolean()+<span class=\"string\">\" \"</span>+in.readDouble()+<span class=\"string\">\" \"</span>+in.readUTF());</span><br><span class=\"line\">    in.close();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>c true 12.3222222 str</p>\n</blockquote>\n<h1 id=\"随机存储访问数据\"><a href=\"#随机存储访问数据\" class=\"headerlink\" title=\"随机存储访问数据\"></a>随机存储访问数据</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String fileName=<span class=\"string\">\"test.txt\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    RandomAccessFile out=<span class=\"keyword\">new</span> RandomAccessFile(fileName,<span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">    out.writeDouble(<span class=\"number\">0.0</span>);</span><br><span class=\"line\">    out.writeDouble(<span class=\"number\">0.1</span>);</span><br><span class=\"line\">    out.writeDouble(<span class=\"number\">0.2</span>);</span><br><span class=\"line\">    out.writeDouble(<span class=\"number\">0.3</span>);</span><br><span class=\"line\">    out.writeDouble(<span class=\"number\">0.4</span>);</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">    RandomAccessFile in=<span class=\"keyword\">new</span> RandomAccessFile(fileName,<span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">    System.out.println(in.readDouble()+<span class=\"string\">\" \"</span>+in.readDouble()+<span class=\"string\">\" \"</span>+in.readDouble()+<span class=\"string\">\" \"</span>+in.readDouble()+<span class=\"string\">\" \"</span>+in.readDouble()+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//in.close();</span></span><br><span class=\"line\">    out=<span class=\"keyword\">new</span> RandomAccessFile(fileName,<span class=\"string\">\"rw\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">//一个double数值为8字节</span></span><br><span class=\"line\">    out.seek(<span class=\"number\">8</span>);</span><br><span class=\"line\">    out.writeDouble(<span class=\"number\">1.0</span>);</span><br><span class=\"line\">    out.close();</span><br><span class=\"line\">    <span class=\"comment\">//in=new RandomAccessFile(fileName,\"r\");</span></span><br><span class=\"line\">    <span class=\"comment\">//回到开始位置，重新读取数据</span></span><br><span class=\"line\">    in.seek(<span class=\"number\">0</span>);</span><br><span class=\"line\">    System.out.println(in.readDouble()+<span class=\"string\">\" \"</span>+in.readDouble()+<span class=\"string\">\" \"</span>+in.readDouble()+<span class=\"string\">\" \"</span>+in.readDouble()+<span class=\"string\">\" \"</span>+in.readDouble()+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    in.close();</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>0.0 0.1 0.2 0.3 0.4 <br><br>0.0 1.0 0.2 0.3 0.4</p>\n</blockquote>\n<h1 id=\"读取二进制文件\"><a href=\"#读取二进制文件\" class=\"headerlink\" title=\"读取二进制文件\"></a>读取二进制文件</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//传入File对象获得二进制数据</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] readByte(File file)&#123;</span><br><span class=\"line\">  BufferedInputStream in=<span class=\"keyword\">new</span> BufferedInputStream(<span class=\"keyword\">new</span> FileInputStream(file));</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">byte</span>[] bytes=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[in.available()];</span><br><span class=\"line\">    in.read(bytes);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span>(IOException e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//通过文件名新建File对象，然后调用第一个静态方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">byte</span>[] readByte(String fileName)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> read(<span class=\"keyword\">new</span> File(fileName).getAbsoluteFile());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"标准I-O\"><a href=\"#标准I-O\" class=\"headerlink\" title=\"标准I/O\"></a>标准I/O</h1><h2 id=\"将System-out转换成PrintWriter\"><a href=\"#将System-out转换成PrintWriter\" class=\"headerlink\" title=\"将System.out转换成PrintWriter\"></a>将System.out转换成PrintWriter</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PrintWriter out=<span class=\"keyword\">new</span> PrintWriter(System.out,<span class=\"keyword\">true</span>);</span><br><span class=\"line\">out.println(<span class=\"string\">\"str\"</span>);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PrintWriter</span><span class=\"params\">(OutputStream out, <span class=\"keyword\">boolean</span> autoFlush)</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>System.out为PrintWriter，而PrintWriter又为OutputStream所有可作为第一个参数，第二个参数为是否自动清空功能，需要设为true，否则可能无法看到输出</p>\n</blockquote>\n<h2 id=\"重定向\"><a href=\"#重定向\" class=\"headerlink\" title=\"重定向\"></a>重定向</h2><p>输出重定向：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    PrintStream out=<span class=\"keyword\">new</span> PrintStream(<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"test.txt\"</span>));</span><br><span class=\"line\">    System.setOut(out);</span><br><span class=\"line\">    out.println(<span class=\"string\">\"Hello world\"</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>将Hello world重定向输出到test.txt文件中，而标准输出是将其输出到控制台</p>\n</blockquote>\n<p>输入重定向：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    FileInputStream in=<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"test.txt\"</span>);</span><br><span class=\"line\">    System.setIn(in);</span><br><span class=\"line\">    Scanner scanner=<span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(scanner.hasNext())&#123;</span><br><span class=\"line\">        System.out.println(scanner.nextLine());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Hello world</p>\n</blockquote>\n<h1 id=\"新I-O\"><a href=\"#新I-O\" class=\"headerlink\" title=\"新I/O\"></a>新I/O</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    FileChannel channel=<span class=\"keyword\">new</span> FileOutputStream(<span class=\"string\">\"test.txt\"</span>).getChannel();</span><br><span class=\"line\">    channel.write(ByteBuffer.wrap(<span class=\"string\">\"FileOutputStream\"</span>.getBytes()));</span><br><span class=\"line\">    channel.close();</span><br><span class=\"line\">    channel=<span class=\"keyword\">new</span> RandomAccessFile(<span class=\"string\">\"test.txt\"</span>,<span class=\"string\">\"rw\"</span>).getChannel();</span><br><span class=\"line\">    <span class=\"comment\">//移动到末尾处以便追加内容</span></span><br><span class=\"line\">    channel.position(channel.size());</span><br><span class=\"line\">    channel.write(ByteBuffer.wrap(<span class=\"string\">\"RandomAccessFile\"</span>.getBytes()));</span><br><span class=\"line\">    channel.close();</span><br><span class=\"line\">    channel=<span class=\"keyword\">new</span> FileInputStream(<span class=\"string\">\"test.txt\"</span>).getChannel();</span><br><span class=\"line\">    ByteBuffer buffer=ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    channel.read(buffer);</span><br><span class=\"line\">    <span class=\"comment\">//让channel做好读取字节的准备</span></span><br><span class=\"line\">    buffer.flip();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(buffer.hasRemaining())&#123;</span><br><span class=\"line\">        System.out.println((<span class=\"keyword\">char</span>)buffer.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (IOException e)&#123;</span><br><span class=\"line\">    e.printStackTrace();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>读写通过缓冲器由通道写出或读入，更快速高效</p>\n</blockquote>\n<p><li> asCharBuffer</li></p>\n<p><strong><a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"noopener\">CharSet</a></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String encoding=System.getProperty(<span class=\"string\">\"file.encoding\"</span>);</span><br><span class=\"line\">System.out.println(Chaset.forName(encoding).decode(buff));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为字节缓冲器编码</p>\n</blockquote>\n<p><strong><a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"noopener\">ByteBuffer</a></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ByteBuffer.wrap(<span class=\"string\">\"test\"</span>.getBytes(<span class=\"string\">\"UTF-16BE\"</span>));</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>将”test”字符串转换成以”UTF-16BE”编码的字节封装到字节缓冲器中</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(buff.asCharSet());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>将字节缓冲区中的字节转换成字符集存入字符缓冲器中，输出该缓冲区会自动调用其toString方法</p>\n</blockquote>\n<p><strong><a href=\"http://tool.oschina.net/apidocs/apidoc?api=jdk-zh\" target=\"_blank\" rel=\"noopener\">CharBuffer</a></strong></p>\n","categories":["Java"],"tags":[]},{"title":"Java中的设计模式","url":"https://grooters.github.io/2018/08/18/Java中的设计模式/","content":"<h1 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h1><blockquote>\n<p>将一些可公用的处理方法独立出来，作为处理策略供客户端调用</p>\n</blockquote>\n<p>如不同存款方式有不同的利率算法，可将这些算法独立出来，作为一种利率处理策略</p>\n<p>策略模式常分为3个模块：</p>\n<ol>\n<li>策略接口</li>\n<li>策略接口实现类</li>\n<li>策略环境类，该类持有策略对象</li>\n</ol>\n<p><strong>策略环境类通过客户端的要求判断出该使用何种策略</strong></p>\n<p>以上结构也可使用工厂模式进行设计：</p>\n<ol>\n<li>策略接口</li>\n<li>策略接口实现类</li>\n<li>在工厂类中选择策略，并返回策略</li>\n</ol>\n<p>但工厂模式仍存在一个缺点就是每增加一个策略都需要在工厂中再添加一个判断以选择新的策略</p>\n<p>为此可通过<strong>注解</strong>结合工厂模式来优化，以解除耦合：</p>\n<ol>\n<li>创建一个注解，定义一个条件</li>\n<li>为每一种策略添加该注解，并为条件赋值，只有满足该条件才使用该策略</li>\n<li>在工厂中加载策略包中的所有策略类，并获取它们的注解，根据注解条件判断该使用何种策略</li>\n</ol>\n<p>这样设计的话就可以不需要对工厂进行修改，只需设计策略</p>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/u012124438/article/details/70039943/\" target=\"_blank\" rel=\"noopener\">设计模式学习之策略模式</a></p>\n","categories":["Java"],"tags":[]},{"title":"视图绘制与自定义视图","url":"https://grooters.github.io/2018/08/12/视图绘制与自定义视图/","content":"<h1 id=\"在自定义视图中绘制一个图形\"><a href=\"#在自定义视图中绘制一个图形\" class=\"headerlink\" title=\"在自定义视图中绘制一个图形\"></a>在自定义视图中绘制一个图形</h1><h2 id=\"PointF\"><a href=\"#PointF\" class=\"headerlink\" title=\"PointF\"></a><a href=\"https://developer.android.google.cn/reference/android/graphics/PointF\" target=\"_blank\" rel=\"noopener\">PointF</a></h2><p><strong>用于保存两个浮点坐标x，y</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">float</span> x,y;</span><br><span class=\"line\">PointF location</span><br><span class=\"line\">...</span><br><span class=\"line\">location=<span class=\"keyword\">new</span> PointF(x,y)</span><br><span class=\"line\"></span><br><span class=\"line\">location=<span class=\"keyword\">new</span> PointF();</span><br><span class=\"line\">location.set(x,y);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Paint\"><a href=\"#Paint\" class=\"headerlink\" title=\"Paint\"></a><a href=\"https://developer.android.google.cn/reference/android/graphics/Paint\" target=\"_blank\" rel=\"noopener\">Paint</a></h2><p><strong>存储绘制信息，决定如何绘制</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">boxPaint=<span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">boxPaint.setColor(Color.RED);</span><br><span class=\"line\">backgrounPaint=<span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">backgrounPaint.setColor(Color.BLACK);</span><br><span class=\"line\">canvas.drawPaint(backgrounPaint);</span><br><span class=\"line\">canvas.drawRect(left,top,right,bottom,boxPaint);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Canvas\"><a href=\"#Canvas\" class=\"headerlink\" title=\"Canvas\"></a><a href=\"https://developer.android.google.cn/reference/android/graphics/Canvas\" target=\"_blank\" rel=\"noopener\">Canvas</a></h2><p><strong>拥有需要的所有绘制操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">....</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDraw(canvas);</span><br><span class=\"line\">    <span class=\"comment\">//绘制自定义视图的背景色</span></span><br><span class=\"line\">    canvas.drawPaint(backgrounPaint);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Boxer boxer:boxers)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> left=Math.min(boxer.getOrigiin().x,boxer.getCurrent().x);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> right=Math.max(boxer.getOrigiin().x,boxer.getCurrent().x);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> top=Math.min(boxer.getOrigiin().y,boxer.getCurrent().y);</span><br><span class=\"line\">        <span class=\"keyword\">float</span> bottom=Math.max(boxer.getOrigiin().y,boxer.getCurrent().y);</span><br><span class=\"line\">        <span class=\"comment\">//画出一个矩形</span></span><br><span class=\"line\">        canvas.drawRect(left,top,right,bottom,boxPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"实例：绘制一个矩形\"><a href=\"#实例：绘制一个矩形\" class=\"headerlink\" title=\"实例：绘制一个矩形\"></a>实例：绘制一个矩形</h2><p><em>Boxer.class</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.PointF;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boxer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PointF origiin;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> PointF current;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Boxer</span><span class=\"params\">(PointF origiin)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.origiin=origiin;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current=origiin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setCurrent</span><span class=\"params\">(PointF current)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.current=current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PointF <span class=\"title\">getCurrent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PointF <span class=\"title\">getOrigiin</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> origiin;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>BoxVieWer.class</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.Canvas;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.Color;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.Paint;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.PointF;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BoxVieWer</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=BoxVieWer.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boxer boxer;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Boxer&gt; boxers;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint boxPaint;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint backgrounPaint;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BoxVieWer</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">BoxVieWer</span><span class=\"params\">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        boxers=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">        boxPaint=<span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">        boxPaint.setColor(Color.RED);</span><br><span class=\"line\">        backgrounPaint=<span class=\"keyword\">new</span> Paint();</span><br><span class=\"line\">        backgrounPaint.setColor(Color.BLACK);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        PointF pointF=<span class=\"keyword\">new</span> PointF(event.getX(),event.getY());</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(event.getAction())&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                boxer=<span class=\"keyword\">new</span> Boxer(pointF);</span><br><span class=\"line\">                boxers.add(boxer);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(boxer!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                    boxer.setCurrent(pointF);</span><br><span class=\"line\">                    invalidate();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">                boxer=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class=\"line\">                boxer=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</span><br><span class=\"line\">        canvas.drawPaint(backgrounPaint);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Boxer boxer:boxers)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">float</span> left=Math.min(boxer.getOrigiin().x,boxer.getCurrent().x);;</span><br><span class=\"line\">            <span class=\"keyword\">float</span> right=Math.max(boxer.getOrigiin().x,boxer.getCurrent().x);</span><br><span class=\"line\">            <span class=\"keyword\">float</span> top=Math.min(boxer.getOrigiin().y,boxer.getCurrent().y);</span><br><span class=\"line\">            <span class=\"keyword\">float</span> bottom=Math.max(boxer.getOrigiin().y,boxer.getCurrent().y);</span><br><span class=\"line\">            canvas.drawRect(left,top,right,bottom,boxPaint);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>ViewerActivity.class</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.githubs.grooters.luffy.R;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.view_drawer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>view_drawer.xml</em><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">LinearLayout</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">luffy_viewer.BoxVieWer</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"Drawable\"><a href=\"#Drawable\" class=\"headerlink\" title=\"Drawable\"></a>Drawable</h1><h2 id=\"Selector\"><a href=\"#Selector\" class=\"headerlink\" title=\"Selector\"></a>Selector</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 默认时的背景图片--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/pic1\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 没有焦点时的背景图片--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_window_focused</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/pic1\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 非触摸模式下获得焦点并单击时的背景图片--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_focused</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/pic2\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 触摸模式下单击时的背景图片--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_focused</span>=<span class=\"string\">\"false\"</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/pic3\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--选中时的图片背景--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_selected</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/pic4\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!--获得焦点时的图片背景--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_focused</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">android:drawable</span>=<span class=\"string\">\"@drawable/pic5\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Shape\"><a href=\"#Shape\" class=\"headerlink\" title=\"Shape\"></a>Shape</h2><p><strong><li> 圆</li></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shape</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:shape</span>=<span class=\"string\">\"oval\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:useLevel</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">stroke</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorAccent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:width</span>=<span class=\"string\">\"1dp\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">size</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:width</span>=<span class=\"string\">\"20dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:height</span>=<span class=\"string\">\"20dp\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong><li> 矩形</li></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:shape=\"rectangle\"</span><br></pre></td></tr></table></figure>\n<p><strong><li> 线</li></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:shape=\"line\"</span><br></pre></td></tr></table></figure>\n<p><strong>必须结合stroke使用，solid无效</strong></p>\n<p><strong><li> 实心</li></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/colorAccent\"</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Selector与Shape结合使用\"><a href=\"#Selector与Shape结合使用\" class=\"headerlink\" title=\"Selector与Shape结合使用\"></a>Selector与Shape结合使用</h2><p><em>以下代码摘抄自互联网</em></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">selector</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--第一种方法--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;item android:drawable=\"@drawable/shape_border_press\" android:state_pressed=\"true\" /&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--&lt;item android:drawable=\"@drawable/shape_border_nor\" android:state_window_focused=\"false\"/&gt;--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--第二种方法--&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--默认情况下是一个带圆角,白色背景,蓝色边框的矩形--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_window_focused</span>=<span class=\"string\">\"false\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 圆角 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">corners</span> <span class=\"attr\">android:radius</span>=<span class=\"string\">\"5dp\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--填充颜色为白色--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/white\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 描边 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">stroke</span> <span class=\"attr\">android:width</span>=<span class=\"string\">\"1dp\"</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/blue\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--单击时是一个带圆角,白色背景,绿色边框的矩形--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:state_pressed</span>=<span class=\"string\">\"true\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--圆角--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">corners</span> <span class=\"attr\">android:radius</span>=<span class=\"string\">\"5dp\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--填充颜色为白色--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/white\"</span> /&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!--描边--&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">stroke</span> <span class=\"attr\">android:width</span>=<span class=\"string\">\"1dp\"</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/green\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">selector</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"layer-list\"><a href=\"#layer-list\" class=\"headerlink\" title=\"layer-list\"></a>layer-list</h1><blockquote>\n<p>层叠图画，让两个drawable合二为一</p>\n</blockquote>\n<p><em>以下实现一种输入框样式：</em><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">layer-list</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span> &gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span> &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"@color/red\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span> <span class=\"attr\">android:bottom</span>=<span class=\"string\">\"15dp\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span> &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"#ffffff\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">item</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:bottom</span>=<span class=\"string\">\"2dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:left</span>=<span class=\"string\">\"1dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:right</span>=<span class=\"string\">\"1dp\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">shape</span> <span class=\"attr\">android:shape</span>=<span class=\"string\">\"rectangle\"</span> &gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">solid</span> <span class=\"attr\">android:color</span>=<span class=\"string\">\"#ffffff\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">shape</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">item</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">layer-list</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h1 id=\"AttributeSet\"><a href=\"#AttributeSet\" class=\"headerlink\" title=\"AttributeSet\"></a>AttributeSet</h1><p><strong>使用步骤：</strong></p>\n<p><li>创建attrs.xml文件</li></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"MyView\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"textColor\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"textSize\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"dimension\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p><li>创建自定义View类</li></p>\n<p>继承原生View类，通过构造方法获得默认AttributeSet，以默认attr和xml文件为参数创建TypedArray实例，eg：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.MyView);</span><br></pre></td></tr></table></figure>\n<p><li>设置属性</li></p>\n<p>获取attrs.xml中的对应属性，并赋值，然后初始化自定义控件属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> color=typedArray.getColor(R.styleable.MyView_textColor,getResources().getColor(R.color.colorAccent,<span class=\"keyword\">null</span>));</span><br><span class=\"line\"><span class=\"keyword\">float</span> textSize=typedArray.getDimension(R.styleable.MyView_textSize,<span class=\"number\">36</span>);</span><br><span class=\"line\">setText(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">setTextColor(color);</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"Java数组与容器","url":"https://grooters.github.io/2018/08/11/Java数组与容器/","content":"<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><h2 id=\"数组的基本性质\"><a href=\"#数组的基本性质\" class=\"headerlink\" title=\"数组的基本性质\"></a>数组的基本性质</h2><p><strong><li>数据与容器的主要区别</li></strong></p>\n<blockquote>\n<p>效率，类型和保存基本类型的能力</p>\n</blockquote>\n<p>但自从泛型出现后，效率成为数组仅存的优势，因为数组时一个简单的<strong>线性序列</strong>，所以元素访问速度非常快</p>\n<p><li>数组的初始化</li></p>\n<p>数组标识符是一个引用，指向在堆中创建的一个真实对象（数组），这个对象（数组）用于保存指向其它对象的引用</p>\n<p>在数组正确初始化之前，编译器不允许用此引用进行任何操作</p>\n<p>新生成一个数组对象时看，其中所有引用被自动初始化为null，其中：</p>\n<ol>\n<li>基本数值类型：0</li>\n<li>字符型：(char)0</li>\n<li>布尔型：false</li>\n</ol>\n<p><strong>聚集初始化：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] os=<span class=\"keyword\">new</span> Object[]&#123;<span class=\"keyword\">new</span> Obj1(),<span class=\"keyword\">new</span> Obj2()&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>动态聚集初始化：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] os=<span class=\"keyword\">new</span> Object[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;os.length;i++)&#123;</span><br><span class=\"line\">    os[i]=<span class=\"keyword\">new</span> Obj1();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><p><strong><li>将多维数组转换成String类型</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(Arrays.deepToString(as))</span><br></pre></td></tr></table></figure>\n<p><strong><li>粗糙数组</li></strong></p>\n<blockquote>\n<p>数组中构成的举证的每个向量都可以具有任意长度</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[][] objs=<span class=\"keyword\">new</span> Object[][]&#123;</span><br><span class=\"line\">    &#123;<span class=\"keyword\">new</span> Obj1()&#125;,&#123;<span class=\"keyword\">new</span> Obj1(),<span class=\"keyword\">new</span> Obj2()&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>注意，若创建多维数组行数必须确定，而行数不做要求</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[][] oss=<span class=\"keyword\">new</span> Object[<span class=\"number\">5</span>][];</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组与泛型\"><a href=\"#数组与泛型\" class=\"headerlink\" title=\"数组与泛型\"></a>数组与泛型</h2><p>参数化数组不能进行是实例化，但可以通过以下方式得到泛型数组对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List[] ls=<span class=\"keyword\">new</span> List[<span class=\"number\">5</span>];</span><br><span class=\"line\">List&lt;String&gt; list;</span><br><span class=\"line\">list=(List&lt;String&gt;)ls</span><br></pre></td></tr></table></figure>\n<h2 id=\"数组内容操作\"><a href=\"#数组内容操作\" class=\"headerlink\" title=\"数组内容操作\"></a>数组内容操作</h2><p><strong><li>填充数组</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">boolean</span>[] bs=<span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\">Arrays.fill(bs,<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>将同一值（true）填充满boolean数组</p>\n</blockquote>\n<p><strong><li>复制数组</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer[] is1 =&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">Integer[] is2=&#123;<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>&#125;</span><br><span class=\"line\">arrayCopy(is1, <span class=\"number\">2</span>, is2, <span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">System.out.println(is2.toString());</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>{6,7,3,4,10}</p>\n</blockquote>\n<p><em>即从is1的3开始复制两个数3，4到is2（从8开始）8，9中</em></p>\n<p><strong><li>数组的排序</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//按照词典编排顺序排序，大写字母开头在前</span></span><br><span class=\"line\">Arrays.sort(strs);</span><br><span class=\"line\"><span class=\"comment\">//反向排序</span></span><br><span class=\"line\">Arrays.sort(strs,Collections.reverseOrder());</span><br><span class=\"line\"><span class=\"comment\">//忽略大小写字母区分</span></span><br><span class=\"line\">Arrays.sort(strs,String.CASE_INSENSITIVE_ORDER);</span><br></pre></td></tr></table></figure>\n<p>可通过重写接口的compareTo方法进行自定义排序规则</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sorter</span> <span class=\"keyword\">implements</span> <span class=\"title\">Comparable</span>&lt;<span class=\"title\">Sorter</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Sorter</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.i=i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">compareTo</span><span class=\"params\">(Sorter o)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i&gt;o.i)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(i&lt;o.i)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"><span class=\"comment\">//        if(i&gt;o.i)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            return 1;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;else if(i&lt;o.i)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            return -1;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;else&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//            return 0;</span></span><br><span class=\"line\"><span class=\"comment\">//        &#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String...args)</span></span>&#123;</span><br><span class=\"line\">        Sorter[] sorters=<span class=\"keyword\">new</span> Sorter[]&#123;<span class=\"keyword\">new</span> Sorter(<span class=\"number\">1</span>),<span class=\"keyword\">new</span> Sorter(<span class=\"number\">8</span>),<span class=\"keyword\">new</span> Sorter(<span class=\"number\">2</span>),<span class=\"keyword\">new</span> Sorter(<span class=\"number\">6</span>)&#125;;</span><br><span class=\"line\">        Arrays.sort(sorters);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x=<span class=\"number\">0</span>;x&lt;sorters.length;x++)&#123;</span><br><span class=\"line\">            System.out.print(sorters[x].i+<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>8 6 2 1</p>\n</blockquote>\n<p><strong>若使用注释掉的代码，则会正序排序</strong></p>\n<p><strong><li>数组的查找</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Arrays.binarySearch(strs,str);</span><br></pre></td></tr></table></figure>\n<p>若找到返回该值<strong>所在位置</strong>，否则返回一个<strong>负数</strong>，该负数计算方法为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (插入点) - 1</span><br></pre></td></tr></table></figure>\n<p><strong>插入点</strong>表示若要维持有序状态，该插入值所应插入的位置</p>\n","categories":["Java"],"tags":[]},{"title":"Activity的生命周期和启动模式","url":"https://grooters.github.io/2018/08/09/Activity的生命周期和启动模式/","content":"<h1 id=\"Activity生命周期\"><a href=\"#Activity生命周期\" class=\"headerlink\" title=\"Activity生命周期\"></a>Activity生命周期</h1><h2 id=\"返回栈\"><a href=\"#返回栈\" class=\"headerlink\" title=\"返回栈\"></a>返回栈</h2><p><img src=\"http://img.blog.csdn.net/20170801105044792?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZmlndXJlcnM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\" alt=\"Activity与返回栈\"></p>\n<ol>\n<li><em>运行状态</em>：位于返回栈栈顶</li>\n<li><em>暂停状态</em>：不在栈顶但仍然可见，例如对话框的出现</li>\n<li><em>停止状态</em>：不在栈顶且完全不可见，但系统仍保留该活动的成员变量和相应的状态</li>\n<li><em>销毁状态</em>：被移除返回栈</li>\n</ol>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p><img src=\"/img/Android/Activity的生命周期/ActivityLife.jpg\" alt=\"Activity的生命周期\"></p>\n<p><strong><li>onCreate</li></strong></p>\n<p>在活动第一次被创建时调用。</p>\n<p><strong><li>onStart</li></strong></p>\n<p>在活动由不可见到<strong>可见</strong>时调用。</p>\n<p><strong><li>onResume</li></strong></p>\n<p>在活动准备与用户进行交互时调用，此时活动必须位于<strong>栈顶</strong>并且处于<strong>运行状态</strong>。</p>\n<p><strong><li>onPause</li></strong></p>\n<p>在该Activity<strong>失去焦点</strong>但<strong>未被完全覆盖</strong>，系统准备去启动或恢复另一个活动时调用，通常会在该方法中释放一些消耗CPU的资源，以及保存一些重要数据。</p>\n<p><strong><li>onStop</li></strong></p>\n<p>在活动完全不可见时调用。不同于onPause的是若新活动是以对话框的形式启动的那么该活动只会执行onPause方法。</p>\n<p><strong><li>onDestroy</li></strong></p>\n<p>在活动被销毁之前调用。</p>\n<p><strong><li>onRestart</li></strong></p>\n<p>在活动由停止状态变为运行状态之前调用。</p>\n<p><em>需要特别注意的是：</em></p>\n<blockquote>\n<p>当从activity1跳转到另一个activity2时，会先执行activity1的onPause方法，再执行activity2的onResume方法</p>\n</blockquote>\n<p><em>以上七种又可归纳为：</em></p>\n<p>完整生存期：<strong>onCreate()</strong>和<strong>onDestroy()</strong>之间</p>\n<p>可见生存期：<strong>onStart()</strong>和<strong>onStop()</strong>之间</p>\n<p>前台生存期：<strong>onResume()</strong>和<strong>onPause()</strong>之间</p>\n<p><strong><font size=\"4sp\">防止活动被回收导致信息丢失：</font></strong></p>\n<p>一个活动若处于停止即onPause状态是有可能被系统回收的。</p>\n<p>但当系统回收活动时会调用 <strong>onSaveInstanceState(Bundle)</strong> 回调方法。</p>\n<p>该方法提供一个Bundle类型参数，可通过<strong>Bundle</strong>保存数据。</p>\n<p>然后在其它活动的onCreate方法中的Bundle类将它取出来。</p>\n<h2 id=\"异常情况下的生命周期\"><a href=\"#异常情况下的生命周期\" class=\"headerlink\" title=\"异常情况下的生命周期\"></a>异常情况下的生命周期</h2><p><img src=\"/img/Android/Activity的生命周期/ActivityErrorLife.png\" alt=\"异常情况下Activity的重建过程\"></p>\n<p><strong>onSavaInstanceState</strong>会在<strong>onStop</strong>被调用前调用，但可在<strong>onPause</strong>被调用前调用也可以在<strong>onPause</strong>被调用后调用，同时用户主动销毁不会调用，例如当用户点击回退键或者调用了 finish() 方法, 不会调用该方法。</p>\n<p>在Activity被重建时系统会调用<strong>onRestoreInstanceState</strong>（在onStart后，在onResum前），并且<strong>onSavaInstanceState</strong>会把保存了数据的Bundle分别传给<strong>onCreate</strong>和<strong>onRestoreInstanceState</strong>。</p>\n<h3 id=\"屏幕旋转\"><a href=\"#屏幕旋转\" class=\"headerlink\" title=\"屏幕旋转\"></a>屏幕旋转</h3><blockquote>\n<p>屏幕旋转会导致Activity异常情况下重建Activity</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//切屏会重新调用各个生命周期，切横竖屏只会执行一次</span></span><br><span class=\"line\">android:configChanges=“orientation”</span><br><span class=\"line\"><span class=\"comment\">//切屏不会重新调用各个生命周期，只会执行onConfigurationChanged方法</span></span><br><span class=\"line\">android:configChanges=“orientation|keyboardHidden”</span><br></pre></td></tr></table></figure>\n<p>创建<strong>layout-land</strong>文件夹，在此文件夹中新建test<strong>-land</strong>.xml，则若屏幕旋转为<strong>横屏</strong>时便会自动载入<strong>test-land.xml</strong>中的布局内容</p>\n<p><strong>注意</strong></p>\n<blockquote>\n<p>onSavaInstanceState只有在activity异常销毁时才会被调用。</p>\n</blockquote>\n<h1 id=\"Activity的启动模式\"><a href=\"#Activity的启动模式\" class=\"headerlink\" title=\"Activity的启动模式\"></a>Activity的启动模式</h1><p><strong><li> launchMode</li></strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".MainActivity\"</span> <span class=\"attr\">android:launchMode</span>=<span class=\"string\">\"standard\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">category</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.category.LAUNCHER\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"standard\"><a href=\"#standard\" class=\"headerlink\" title=\"standard\"></a>standard</h1><blockquote>\n<p>标准模式，是系统的默认模式。每次启动一个Activity都会新创建一个实例，不论该实例原先是否存在</p>\n</blockquote>\n<p>该模式规定如果A启动了B，则B会进入到A所在的栈中，因此当B不存在任务栈的C启动后，后报错，解决方法为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)</span><br></pre></td></tr></table></figure>\n<h1 id=\"singleTop\"><a href=\"#singleTop\" class=\"headerlink\" title=\"singleTop\"></a>singleTop</h1><blockquote>\n<p>栈顶复用模式，此模式规定当新Activity已存在任务栈的栈顶则不会创建新的实例</p>\n</blockquote>\n<p>此时方法onNewIntent方法会被调用，但onCreate和onStart方法不会被调用</p>\n<h1 id=\"singleTask\"><a href=\"#singleTask\" class=\"headerlink\" title=\"singleTask\"></a>singleTask</h1><blockquote>\n<p>栈内复用模式，是一种单实例模式，该模式规定只要任务栈中存在该Activity就不会创建新实例</p>\n</blockquote>\n<p>当任务栈中不存在该Activity，则创建一个Activity实例并放入到任务栈栈顶。如果存在，则将该Activity移到栈顶，并调用onNewIntent方法</p>\n<h1 id=\"singleInstance\"><a href=\"#singleInstance\" class=\"headerlink\" title=\"singleInstance\"></a>singleInstance</h1><blockquote>\n<p>单实例模式，拥有singleTask的所有特性，但每一个Activity都在单独存在于一个栈。</p>\n</blockquote>\n","categories":["Android"],"tags":[]},{"title":"Handle消息机制","url":"https://grooters.github.io/2018/08/06/Handler消息机制/","content":"<h1 id=\"Handle\"><a href=\"#Handle\" class=\"headerlink\" title=\"Handle\"></a><a href=\"https://developer.android.google.cn/reference/android/os/Handler\" target=\"_blank\" rel=\"noopener\">Handle</a></h1><p><strong><font size=\"4sp\">主要方法</font></strong></p>\n<p><li> <a href=\"https://developer.android.google.cn/reference/android/os/Handler.html#obtainMessage\" target=\"_blank\" rel=\"noopener\">final Message obtainMessage()</a></li></p>\n<p><li><a href=\"https://developer.android.google.cn/reference/android/os/Handler.html#obtainMessage(int,%20java.lang.Object\" target=\"_blank\" rel=\"noopener\">final Message obtainMessage(int what, Object obj)</a></li></p>\n<p>从Message Pool获取一个Message实例</p>\n<p><li><a href=\"https://developer.android.google.cn/reference/android/os/Handler.html#sendMessage(android.os.Message\" target=\"_blank\" rel=\"noopener\">boolean sendMessage(Message msg)</a></li></p>\n<p>将一个Message发送到MessaQueue</p>\n<p><li><a href=\"https://developer.android.google.cn/reference/android/os/Handler.html#sendEmptyMessage(int\" target=\"_blank\" rel=\"noopener\">boolean sendEmptyMessage(int what)</a></li></p>\n<p>发送一个只有标记值的消息，通常用来激活handleMessage方法，而不是消息内容传递</p>\n<p><li><a href=\"https://developer.android.google.cn/reference/android/os/Handler.html#handleMessage(android.os.Message\" target=\"_blank\" rel=\"noopener\">handleMessage(Message msg)</a></li></p>\n<p>重写该方法接受Message，eg：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Handler作为Message的发送类，也作为Message的处理类</p>\n<h1 id=\"Message\"><a href=\"#Message\" class=\"headerlink\" title=\"Message\"></a><a href=\"https://developer.android.google.cn/reference/android/os/Message\" target=\"_blank\" rel=\"noopener\">Message</a></h1><p><strong><font size=\"4sp\">常用方法</font></strong></p>\n<p><li><a href=\"https://developer.android.google.cn/reference/android/os/Message.html#sendToTarget(\" target=\"_blank\" rel=\"noopener\">void sendToTarget()</a></li></p>\n<p>将该Message消息发送至MessageQueue，eg:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler.obtainMessage(MESSAGE_DOWNLOAD,targetHolder).sendToTarget();</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>obtainMessage会从公共循环池里获取消息，比创建新实例效率更高</p>\n</blockquote>\n<p><strong><font size=\"4sp\">常用变量</font></strong></p>\n<p><li>final Objetc Obj</li></p>\n<p>Message可携带的信息对象</p>\n<p><li>final int what</li></p>\n<p>Message的标识符</p>\n<p><em>运用方法如下：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(msg.what)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            Object obj=msg.Obj;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h1 id=\"Looper\"><a href=\"#Looper\" class=\"headerlink\" title=\"Looper\"></a><a href=\"https://developer.android.google.cn/reference/android/os/Looper\" target=\"_blank\" rel=\"noopener\">Looper</a></h1><p><strong>封装了消息循环和消息队列</strong></p>\n<p>常通过Handler与Looper进行交互，Handler为指定Looper提供了发送消息和处理消息的方法</p>\n<p>通常创建Handler需要指定一个Looper与其绑定，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Looper.prepare()</span><br><span class=\"line\">handler=<span class=\"keyword\">new</span> Handler()&#123;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">Looper.loop();</span><br></pre></td></tr></table></figure>\n<p><strong>Looper.prepare()</strong></p>\n<blockquote>\n<p>启动一个Looper</p>\n</blockquote>\n<p><strong>Looper.loop()</strong></p>\n<blockquote>\n<p>让Looper开始工作，在调用该方法后，会阻塞线程，导致该方法后面的代码无法执行，直到调用<strong>handler.getLooper().quit()</strong>才能解除阻塞</p>\n</blockquote>\n<p>但在主线程中创建Handler会默认与主线程中的Looper绑定，即：</p>\n<blockquote>\n<p>handler = new Handler()等价于new Handler（Looper.myLooper()）</p>\n</blockquote>\n<p><strong>Looper.myLooper()</strong></p>\n<blockquote>\n<p>获取当前进程的Looper</p>\n</blockquote>\n<h1 id=\"HandleThread\"><a href=\"#HandleThread\" class=\"headerlink\" title=\"HandleThread\"></a><a href=\"https://developer.android.google.cn/reference/android/os/HandlerThread\" target=\"_blank\" rel=\"noopener\">HandleThread</a></h1><p><strong>用于启动具有looper的新线程的类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoaderThread</span> &lt;<span class=\"title\">T</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">HandlerThread</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LoaderThread</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(TAG);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLooperPrepared</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onLooperPrepared();</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onLooperPrepared\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//通过以下方式启动线程，启动后会执行onLooperPrepared方法</span></span><br><span class=\"line\">LoaderThread&lt;InnerHolder&gt; loaderThread=<span class=\"keyword\">new</span> LoaderThread&lt;&gt;();</span><br><span class=\"line\">loaderThread.start();</span><br><span class=\"line\">loaderThread.getLooper();</span><br></pre></td></tr></table></figure>\n<h1 id=\"消息机制\"><a href=\"#消息机制\" class=\"headerlink\" title=\"消息机制\"></a>消息机制</h1><p><img src=\"/img/Android/消息收发机制/关系图.jpg\" alt=\"关系图\"></p>\n<blockquote>\n<p>一个Handler仅与一个Looper相关联，一个Message也仅与一个目标Handler相关联，多个Message可以引用统一目标Handler。多个Handler也可和一个Looper相关联</p>\n</blockquote>\n","categories":["Android"],"tags":[]},{"title":"AsyncTaskLoader解析","url":"https://grooters.github.io/2018/08/05/AsyncTaskLoader解析/","content":"<h1 id=\"AsyncTaskLoader\"><a href=\"#AsyncTaskLoader\" class=\"headerlink\" title=\"AsyncTaskLoader\"></a><a href=\"https://developer.android.google.cn/reference/android/support/v4/content/AsyncTaskLoader\" target=\"_blank\" rel=\"noopener\">AsyncTaskLoader</a></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">↳ android.support.v4.content.Loader&lt;D&gt;</span><br><span class=\"line\">     ↳ android.support.v4.content.AsyncTaskLoader&lt;D&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><h2 id=\"创建一个继承于AsyncTaskLoader的自定义Loder类\"><a href=\"#创建一个继承于AsyncTaskLoader的自定义Loder类\" class=\"headerlink\" title=\"创建一个继承于AsyncTaskLoader的自定义Loder类\"></a>创建一个继承于AsyncTaskLoader的自定义Loder类</h2><p>cancelLoadInBackground</p>\n<p><em>实现以下三个常用方法和一个默认构造函数：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SycnTasker</span><span class=\"params\">(@NonNull Context context)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartLoading</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">loadInBackground</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCancelLoad</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<strong>默认构造函数</strong>和<strong>loadInBackground</strong>必不可少</p>\n</blockquote>\n<p><li> onStartLoading</li></p>\n<p>在执行完方法<strong>onCreateLoader</strong>返回一个自定义Loader对象后开始执行</p>\n<p><li> loadInBackground</li></p>\n<p>当在onStartLoading中调用forceLoad()时开始执行</p>\n<p><li> onCancelLoad</li></p>\n<p>当调用cancleLoad方法时会执行</p>\n<h2 id=\"实现android-support-v4-app-LoaderManager-LoaderCallbacks接口\"><a href=\"#实现android-support-v4-app-LoaderManager-LoaderCallbacks接口\" class=\"headerlink\" title=\"实现android.support.v4.app.LoaderManager.LoaderCallbacks接口\"></a>实现<a href=\"https://developer.android.google.cn/reference/android/support/v4/app/LoaderManager.LoaderCallbacks\" target=\"_blank\" rel=\"noopener\">android.support.v4.app.LoaderManager.LoaderCallbacks<d></d></a>接口</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFinished</span><span class=\"params\">(Loader loader, D d)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Loader <span class=\"title\">onCreateLoader</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Bundle bundle)</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoaderReset</span><span class=\"params\">(Loader loader)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"4sp\"><li> onCreateLoader</li></font></strong></p>\n<p>当调用以下代码后开始执行<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getLoaderManager().initLoader(<span class=\"keyword\">int</span> id,Bundle bundle,LoaderCallbacks loaderCallbacks);</span><br></pre></td></tr></table></figure></p>\n<p><strong><font size=\"4sp\"><li> onLoadFinished</li></font></strong></p>\n<p>执行完成<strong>loadInBackground</strong>后，数据可从onLoadFinished参数d中获得</p>\n<p><strong><font size=\"4sp\"><li> onLoaderReset</li></font></strong></p>\n<p>自定义Loader销毁后</p>\n<p><em>各方法执行顺序：</em></p>\n<blockquote>\n<p>onCreateLoader<br><br> onStartLoading<br><br> loadInBackground</p>\n</blockquote>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><p><em>实现LoaderCallbacks接口所在类：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.app.LoaderManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Loader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.Bitmap;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.BitmapFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.AsyncTask;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.githubs.grooters.luffy.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoaderActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title\">LoaderManager</span>.<span class=\"title\">LoaderCallbacks</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG= LoaderActivity.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> AsyncTasker asyncTasker;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable <span class=\"keyword\">final</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_loader);</span><br><span class=\"line\">        getLoaderManager().initLoader(<span class=\"number\">1</span>,savedInstanceState,<span class=\"keyword\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoadFinished</span><span class=\"params\">(Loader loader, Integer i)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onLoadFinished：\"</span>+i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Loader <span class=\"title\">onCreateLoader</span><span class=\"params\">(<span class=\"keyword\">int</span> i, Bundle bundle)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onCreateLoader\"</span>);</span><br><span class=\"line\">        CustomLoader customLoader=<span class=\"keyword\">new</span> CustomLoader(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        customLoader.getInfo(<span class=\"string\">\"LoaderActivity\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> customLoader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onLoaderReset</span><span class=\"params\">(Loader loader)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onLoaderReset\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>自定义Loader：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.content.AsyncTaskLoader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.NonNull;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> luffy_intent.Intenter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTaskLoader</span>&lt;<span class=\"title\">Integer</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=CustomLoader.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomLoader</span><span class=\"params\">(@NonNull Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"CustomLoader\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onStartLoading</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onStartLoading();</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onStartLoading\"</span>);</span><br><span class=\"line\">        forceLoad();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">loadInBackground</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"loadInBackground\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&lt;<span class=\"number\">10</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                ++i;</span><br><span class=\"line\">                Log.i(TAG,<span class=\"string\">\"i: \"</span>+i);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Log.i(TAG,<span class=\"string\">\"Finish\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onCancelLoad</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onCancelLoad\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onCancelLoad();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getInfo</span><span class=\"params\">(String str)</span></span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"getInfo：\"</span>+str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"?\"></a>?</h1><ol>\n<li><p>cancelLoadInBackground终止loadInBackground，但loadInBackground中的任务还在执行</p>\n</li>\n<li><p>AsyncTaskLoader和AsyncTask的区别异同不理解</p>\n</li>\n</ol>\n","categories":["Android"],"tags":[]},{"title":"Android中的多线程","url":"https://grooters.github.io/2018/08/03/Android中的多线程/","content":"<h1 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a><a href=\"https://developer.android.google.cn/reference/android/os/AsyncTask\" target=\"_blank\" rel=\"noopener\">AsyncTask</a></h1><p><em>官方例子：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DownloadFilesTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">URL</span>, <span class=\"title\">Integer</span>, <span class=\"title\">Long</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Long <span class=\"title\">doInBackground</span><span class=\"params\">(URL... urls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = urls.length;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> totalSize = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            totalSize += Downloader.downloadFile(urls[i]);</span><br><span class=\"line\">            publishProgress((<span class=\"keyword\">int</span>) ((i / (<span class=\"keyword\">float</span>) count) * <span class=\"number\">100</span>));</span><br><span class=\"line\">            <span class=\"comment\">// Escape early if cancel() is called</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isCancelled()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> totalSize;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span><span class=\"params\">(Integer... progress)</span> </span>&#123;</span><br><span class=\"line\">        setProgressPercent(progress[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Long result)</span> </span>&#123;</span><br><span class=\"line\">        showDialog(<span class=\"string\">\"Downloaded \"</span> + result + <span class=\"string\">\" bytes\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其可通过四个常用的方法实现开始前初始化控件（UI线程），开始后执行业务逻辑，同时可随时获取进度条所需的进度信息（UI线程），结束后可获取最终结果内容进行控件更新（UI线程），对应的四个方法为：</p>\n<blockquote>\n<p>onPreExecute()<br><br>doInBackground(Params… params)<br><br>onProgressUpdate<br><br>publishProgress(Progress… values)</p>\n</blockquote>\n<p>其中Params和Progress参数类型通过泛型控制，详见官方例子</p>\n<h2 id=\"AsyncTask的内存泄漏风险\"><a href=\"#AsyncTask的内存泄漏风险\" class=\"headerlink\" title=\"AsyncTask的内存泄漏风险\"></a>AsyncTask的内存泄漏风险</h2><blockquote>\n<p>由于AsyncTask在活动中实例化，为此其携由该活动的引用，但AsyncTask使异步执行，当该活动生命周期结束后，AsyncTask仍然有可能存活</p>\n</blockquote>\n<p><strong>&lt;font=”4sp”&gt;解决方法</strong></p>\n<p><em>在该活动销毁前（onStop,onDestroy）调用以下方法：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">asyncTask.cancel(<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>cancle方法的参数为布尔型，当为false会正常关闭异步线程，销毁AsyncTask，当为true时，会强制销毁</p>\n</blockquote>\n<h3 id=\"主要常量\"><a href=\"#主要常量\" class=\"headerlink\" title=\"主要常量\"></a>主要常量</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此作业需要网络连接</span></span><br><span class=\"line\">NETWORK_TYPE_ANY</span><br><span class=\"line\"><span class=\"comment\">//此作业需要网络连接，即蜂窝网络</span></span><br><span class=\"line\">NETWORK_TYPE_CELLULAR</span><br></pre></td></tr></table></figure>\n<p><strong>交付信息启动服务：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JobScheduler scheduler=(JobScheduler)getSystemService(Context.JOB_SCHEDULER_SERVICE);</span><br><span class=\"line\">scheduler.schedule(jobInfo);</span><br></pre></td></tr></table></figure>\n<h1 id=\"AsyncTaskLoader\"><a href=\"#AsyncTaskLoader\" class=\"headerlink\" title=\"AsyncTaskLoader\"></a>AsyncTaskLoader</h1><p>详见：<br><a href=\"https://grooters.github.io/2018/08/05/AsyncTaskLoader%E8%A7%A3%E6%9E%90\">AsyncTaskLoader解析</a></p>\n<h1 id=\"下载网络图片实例\"><a href=\"#下载网络图片实例\" class=\"headerlink\" title=\"下载网络图片实例\"></a>下载网络图片实例</h1><p><em>下载网络上的一张图片并显示到ImageView中：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServicerActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG= ServicerActivity.class.getSimpleName();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_servicer);</span><br><span class=\"line\">        Button button=findViewById(R.id.download);</span><br><span class=\"line\">        button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">new</span> AsyncTasker().execute(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    class AsyncTasker extends AsyncTask&lt;String,Integer,byte[]&gt; &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreExecute</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPreExecute();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">byte</span>[] doInBackground(String... strings) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                URL url=<span class=\"keyword\">new</span> URL(strings[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                HttpURLConnection connection=(HttpURLConnection)url.openConnection();</span><br><span class=\"line\">                InputStream inputStream=connection.getInputStream();</span><br><span class=\"line\">                <span class=\"keyword\">byte</span>[] bytes=<span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> len=<span class=\"number\">0</span>;</span><br><span class=\"line\">                ByteArrayOutputStream outputStream=<span class=\"keyword\">new</span> ByteArrayOutputStream();</span><br><span class=\"line\">                <span class=\"keyword\">while</span>((len=inputStream.read(bytes))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    Log.i(TAG,<span class=\"string\">\"bytes：\"</span>+bytes);</span><br><span class=\"line\">                    outputStream.write(bytes,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//将outputStream类型数据转换为byte数组</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> outputStream.toByteArray();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span><span class=\"params\">(Integer... values)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onProgressUpdate(values);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(<span class=\"keyword\">byte</span>[] bytes)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>.onPostExecute(bytes);</span><br><span class=\"line\">            ImageView imageView=findViewById(R.id.images);</span><br><span class=\"line\">            Bitmap bitmap= BitmapFactory.decodeByteArray(bytes,<span class=\"number\">0</span>,bytes.length);</span><br><span class=\"line\">            imageView.setImageBitmap(bitmap);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"预加载与缓存\"><a href=\"#预加载与缓存\" class=\"headerlink\" title=\"预加载与缓存\"></a>预加载与缓存</h1><h2 id=\"LruCache\"><a href=\"#LruCache\" class=\"headerlink\" title=\"LruCache\"></a><a href=\"https://developer.android.google.cn/reference/android/util/LruCache\" target=\"_blank\" rel=\"noopener\">LruCache</a></h2><p><strong><li>创建对象</li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> cacheSize = <span class=\"number\">4</span> * <span class=\"number\">1024</span> * <span class=\"number\">1024</span>; <span class=\"comment\">// 4MiB</span></span><br><span class=\"line\">LruCache&lt;String, Bitmap&gt; bitmapCache = <span class=\"keyword\">new</span> LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> <span class=\"title\">sizeOf</span><span class=\"params\">(String key, Bitmap value)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.getByteCount();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> SIZE=<span class=\"number\">4</span>*<span class=\"number\">1024</span>*<span class=\"number\">1024</span>;</span><br><span class=\"line\">LruCache&lt;String, Bitmap&gt; lurCache=<span class=\"keyword\">new</span> LruCache(SIZE);</span><br></pre></td></tr></table></figure>\n<p><strong><li>常用方法以及使用</li></strong></p>\n<blockquote>\n<p>final V put(K key,V value)</p>\n</blockquote>\n<blockquote>\n<p>final V get(K key)</p>\n</blockquote>\n<blockquote>\n<p>final V    remove(K key)</p>\n</blockquote>\n<blockquote>\n<p>final int    size()</p>\n</blockquote>\n<blockquote>\n<p>final void    evictAll()</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bitmap cache=(Bitmap) lruCache.get(target)</span><br><span class=\"line\"><span class=\"keyword\">if</span>(cache==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    lruCache.put(key,bitmap);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    Bitmap bitmap=(Bitmap)lruCache.get(key);</span><br><span class=\"line\">    lruCache.remove(key);</span><br><span class=\"line\">    size=lruCache.size();</span><br><span class=\"line\">    lurCache.evictAll();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"！\"><a href=\"#！\" class=\"headerlink\" title=\"！\"></a>！</h1><p><li> AsyncTasker</li></p>\n<p>当调用<strong>onCancelled</strong>方法时，<strong>onPostExecute</strong>将不会被调用</p>\n","categories":["Android"],"tags":[]},{"title":"Service详解","url":"https://grooters.github.io/2018/08/03/Service详解/","content":"<p><strong><font size=\"5sp\"><a href=\"https://developer.android.google.cn/reference/android/app/Service\" target=\"_blank\" rel=\"noopener\">Service</a></font></strong></p>\n<p><strong>Service与Thread？</strong></p>\n<p>两者毫无关系，Thread是一个子线程，而Service是运行在<strong>主线程</strong>中的，所以要在服务中进行耗时操作，需要另开一个Thread子线程，否则容易出现ARN异常</p>\n<h1 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h1><h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.app.Service;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Intent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.IBinder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Servicer</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=Servicer.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Servicer</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"Servicer\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onStartCommand\"</span>);</span><br><span class=\"line\">        stopService(intent);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onDestroy\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><li> 显式启动</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent(MainActivity.<span class=\"keyword\">this</span>, Servicer.class);</span><br><span class=\"line\">startService(intent);</span><br></pre></td></tr></table></figure>\n<p><li> 隐式启动</li></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">intent.setPackage(getPackageName());</span><br><span class=\"line\">intent.setAction(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">startService(intent);</span><br></pre></td></tr></table></figure>\n<p><em>AndroidManifest.xml：</em><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\".ServerTest\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"test\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Service与Activity的通信\"><a href=\"#Service与Activity的通信\" class=\"headerlink\" title=\"Service与Activity的通信\"></a>Service与Activity的通信</h2><p>用Service而不用Thread的一大原因就是Activity能方便地与Service联系，可以操控管理Service</p>\n<p><em>客户端：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> ServiceConnection connection=<span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"SERVER_DEBUG\"</span>,<span class=\"string\">\"onServiceConnected\"</span>);</span><br><span class=\"line\">        ((ServerTest.MyBinder)service).test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName name)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(<span class=\"string\">\"SERVER_DEBUG\"</span>,<span class=\"string\">\"onServiceConnected\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Intent intent=<span class=\"keyword\">new</span> Intent();</span><br><span class=\"line\">intent.setPackage(getPackageName());</span><br><span class=\"line\">intent.setAction(<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//startService(intent);</span></span><br><span class=\"line\">bindService(intent,connection,BIND_AUTO_CREATE);</span><br></pre></td></tr></table></figure>\n<p><em>服务端：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServerTest</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG=<span class=\"string\">\"SERVER_DEBUG\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServerTest</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"onCreate\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">onStartCommand</span><span class=\"params\">(Intent intent, <span class=\"keyword\">int</span> flags, <span class=\"keyword\">int</span> startId)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"onStartCommand\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onStartCommand(intent, flags, startId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"onDestroy\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onUnbind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"onUnbind\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onUnbind(intent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Log.d(TAG,<span class=\"string\">\"onBind\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MyBinder();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBinder</span> <span class=\"keyword\">extends</span> <span class=\"title\">Binder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            Log.d(TAG,<span class=\"string\">\"test\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>分别触发启动服务，绑定服务和解绑服务：</p>\n<blockquote>\n<p>SERVER_DEBUG: onCreate<br><br>SERVER_DEBUG: onStartCommand<br><br>SERVER_DEBUG: onBind<br><br>SERVER_DEBUG: onServiceConnected<br><br>SERVER_DEBUG: test</p>\n</blockquote>\n<p><em>值得注意的是：</em></p>\n<ol>\n<li><p>第一次启动服务会创建一个服务，即调用Binder的<strong>构造方法</strong>，当再次启动服务，则不会调用该构造方法，而是直接调用<strong>onStartCommand</strong>。</p>\n</li>\n<li><p>当绑定了一个服务，然后stop该服务，在没有解绑该服务前，是不会调用onDestory方法，需要解绑后才会调用。</p>\n</li>\n<li><p>当在启动服务前，就直接绑定服务，由于绑定服务方法第三个参数为<strong>BIND_AUTO_CREATE</strong>，所以会自动创建一个服务</p>\n</li>\n</ol>\n<h1 id=\"Service生命周期\"><a href=\"#Service生命周期\" class=\"headerlink\" title=\"Service生命周期\"></a>Service生命周期</h1><p><img src=\"/img/Android/Service详解/Service生命周期.png\" alt=\"Service生命周期\"></p>\n<p><em>参考：</em></p>\n<p><a href=\"https://www.cnblogs.com/smyhvae/p/4070518.html\" target=\"_blank\" rel=\"noopener\">Android组件系列—-Android Service组件深入解析</a></p>\n<h1 id=\"后台服务\"><a href=\"#后台服务\" class=\"headerlink\" title=\"后台服务\"></a>后台服务</h1><h2 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a><a href=\"https://developer.android.google.cn/reference/android/app/IntentService\" target=\"_blank\" rel=\"noopener\">IntentService</a></h2><p><em>IntentService是Service的基类，可根据需要处理异步请求。客户端通过Context.startService(Intent)呼叫发送请求</em></p>\n<p>需重写两个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//此处注意，Android studio导出的默认构造器为public ServiceIntent(String name),这会报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServiceIntent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(<span class=\"string\">\"ServiceIntent\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onHandleIntent</span><span class=\"params\">(@Nullable Intent intent)</span> </span>&#123;</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"onHandleIntent\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>该类是通过HandleThread和Handler进行异步操作，具有较高的优先级，其每次进行异步操作都是将任务加入消息队列，通过HandleThread和Handler来进行异步操作</p>\n<p>使用实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ServiceIntent</span> <span class=\"keyword\">extends</span> <span class=\"title\">IntentService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=ServiceIntent.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ServiceIntent</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(<span class=\"string\">\"ServiceIntent\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onHandleIntent</span><span class=\"params\">(@Nullable Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"onHandleIntent\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Intent <span class=\"title\">newInstance</span><span class=\"params\">(Context context)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Intent(context,ServiceIntent.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isOn</span><span class=\"params\">(Context context)</span></span>&#123;</span><br><span class=\"line\">        Intent intent=ServiceIntent.newInstance(context);</span><br><span class=\"line\">        PendingIntent pi=PendingIntent.getService(context,<span class=\"number\">0</span>,intent,PendingIntent.FLAG_NO_CREATE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pi!=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//启动服务</span></span><br><span class=\"line\">Intent intent=ServiceIntent.newInstance(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">startService(intent);</span><br></pre></td></tr></table></figure>\n<h1 id=\"JobScheduler\"><a href=\"#JobScheduler\" class=\"headerlink\" title=\"JobScheduler\"></a><a href=\"https://developer.android.google.cn/reference/android/app/job/JobScheduler\" target=\"_blank\" rel=\"noopener\">JobScheduler</a></h1><p><strong>用于根据将在应用程序自己的进程中执行的框架来安排各种类型的作业</strong></p>\n<h2 id=\"JobService\"><a href=\"#JobService\" class=\"headerlink\" title=\"JobService\"></a><a href=\"https://developer.android.google.cn/reference/android/app/job/JobService\" target=\"_blank\" rel=\"noopener\">JobService</a></h2><p><strong>需要手动开线程</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JobSchedulerService</span> <span class=\"keyword\">extends</span> <span class=\"title\">JobService</span> </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStartJob</span><span class=\"params\">(JobParameters params)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onStopJob</span><span class=\"params\">(JobParameters params)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><li>onStartJob</li></strong></p>\n<p>当任务开始时调用，如果返回false的话，系统会自动结束本job</p>\n<p><strong><li>onStopJob</li></strong></p>\n<p>当任务被取消时调用，<strong>jobFinished方法导致的任务结束不算在内</strong></p>\n<blockquote>\n<p>当返回值为<strong>true</strong>表示任务应该计划在下次继续即可在被强制停止后再度启动起来，返回<strong>false</strong>表示不管怎样，到此结束，不要计划下次</p>\n</blockquote>\n<p><strong><li>jobFinished</li></strong></p>\n<blockquote>\n<p>final void    jobFinished(JobParameters params, boolean wantsReschedule)</p>\n</blockquote>\n<p>当完成任务时调用该方法通知系统，该方法执行完后不会回调<strong>onStopJob()</strong>,但是会回调<strong>onDestroy()</strong></p>\n<blockquote>\n<p>若<strong>wantsReschedule</strong>为<strong>true</strong>则表示这次事情做不完了，请计划下次继续</p>\n</blockquote>\n<h2 id=\"JobInfo\"><a href=\"#JobInfo\" class=\"headerlink\" title=\"JobInfo\"></a><a href=\"https://developer.android.google.cn/reference/android/app/job/JobInfo\" target=\"_blank\" rel=\"noopener\">JobInfo</a></h2><p>由<a href=\"https://developer.android.google.cn/reference/android/app/job/JobInfo.Builder\" target=\"_blank\" rel=\"noopener\">JobInfo.Builder</a>构建一个JobInfo对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JobInfo jobInfo = <span class=\"keyword\">new</span> JobInfo.Builder(i, mServiceComponent)</span><br><span class=\"line\">      <span class=\"comment\">//设置任务允许最少延迟时间</span></span><br><span class=\"line\">     .setMinimumLatency(<span class=\"number\">2000</span>)</span><br><span class=\"line\">      <span class=\"comment\">//设置deadline,若到期还没有到达规定的条件也会执行</span></span><br><span class=\"line\">     .setOverrideDeadline(<span class=\"number\">50000</span>)</span><br><span class=\"line\">      <span class=\"comment\">//设置网络条件，非蜂窝数据的</span></span><br><span class=\"line\">     .setRequireNetworkType(JobInfo.NETWORK_TYPE_UNMETERED)</span><br><span class=\"line\">      <span class=\"comment\">//设置充电条件</span></span><br><span class=\"line\">     .setRequiresCharging(<span class=\"keyword\">true</span>)</span><br><span class=\"line\">      <span class=\"comment\">//设置手机是否idle状态</span></span><br><span class=\"line\">     .setRequiresDeviceIdle(<span class=\"keyword\">false</span>)</span><br><span class=\"line\">     .build();</span><br></pre></td></tr></table></figure>\n<p><em>启动一个JobService：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> JobScheduler scheduler = context.getSystemService(JobScheduler.class);</span><br><span class=\"line\"><span class=\"keyword\">final</span> JobInfo.Builder builder = <span class=\"keyword\">new</span> JobInfo.Builder(MyJobService.ELLISONS_JOB_ID,<span class=\"keyword\">new</span> ComponentName(context, MyJobService.class));</span><br><span class=\"line\">builder.setOverrideDeadline(<span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"The endpoint that you implement that will receive the callback from the JobScheduler.\">JobInfo.Builder(int jobId, ComponentName jobService)</a></p>\n</blockquote>\n<p><strong><font size=\"4sp\"><a href=\"https://blog.csdn.net/allisonchen/article/details/79282651\" target=\"_blank\" rel=\"noopener\">JobService和Service的多角度对比</a></font></strong></p>\n<h2 id=\"AlarmManager\"><a href=\"#AlarmManager\" class=\"headerlink\" title=\"AlarmManager\"></a><a href=\"https://developer.android.google.cn/reference/android/app/AlarmManager.html#setRepeating(int,%20long,%20long,%20android.app.PendingIntent\" target=\"_blank\" rel=\"noopener\">AlarmManager</a></h2><p>参考：</p>\n<p><a href=\"https://www.cnblogs.com/ProtectedDream/p/6351447.html\" target=\"_blank\" rel=\"noopener\">AlarmManager使用</a></p>\n<h2 id=\"PedingIntent\"><a href=\"#PedingIntent\" class=\"headerlink\" title=\"PedingIntent\"></a><a href=\"https://developer.android.google.cn/reference/android/app/PendingIntent\" target=\"_blank\" rel=\"noopener\">PedingIntent</a></h2><p>一种特殊的，携带有Intent和Context，不会立即执行的意图</p>\n<p>常通过以下静态方法获取实例：</p>\n<p><strong><li> getActivity</li></strong></p>\n<p><strong><li> getBroadcast</li></strong></p>\n<p><strong><li> getService</li></strong></p>\n<p>方法参数均为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Context context, int requestCode, Intent intent, int flags</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>第一个为上下文，第二个为请求码，第三个为具体意图，第四个为内部属性</p>\n</blockquote>\n<p>常用属性为：</p>\n<blockquote>\n<p>FLAG_NO_CREATE,即使不存在也不创建，运用如下：</p>\n</blockquote>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断PendingIntent是否存在，若不存在pi=null</span></span><br><span class=\"line\">PendingIntent pi=getService(content,<span class=\"number\">0</span>,intent,FLAG_NO_CREATE);</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> isOn=(pi!=<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"4sp\">该类常用于状态栏通知，定时器设置</font></strong></p>\n","categories":[],"tags":[]},{"title":"Android的IO操作","url":"https://grooters.github.io/2018/08/01/Android的IO操作/","content":"<h1 id=\"通过Environment\"><a href=\"#通过Environment\" class=\"headerlink\" title=\"通过Environment\"></a>通过<strong>Environment</strong></h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//\"/storage/emulated/0\"</span></span><br><span class=\"line\">Environment.getExternalStorageDirectory().getPath()</span><br><span class=\"line\"><span class=\"comment\">//\"/data\"</span></span><br><span class=\"line\">Environment.getDataDirectory().getPath()</span><br><span class=\"line\"><span class=\"comment\">//\"/cache \"                               </span></span><br><span class=\"line\">Environment.getDownloadCacheDirectory().getPath()</span><br><span class=\"line\"><span class=\"comment\">//\"/system\"            </span></span><br><span class=\"line\">Environment.getRootDirectory().getPath()</span><br></pre></td></tr></table></figure>\n<p><em>注：</em></p>\n<blockquote>\n<p>不同手机的获取到目录可能不同，例如我的荣耀V8通过getExternalStorageDirectory获取到的目录为/storage/emulated/0是作为根目录，所以通过getDataDirectory获取的/data便是一个无效目录</p>\n</blockquote>\n<p><em>补充：</em></p>\n<p><strong>将bitmap座位jpg图片写到本地：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FileOutputStream out=<span class=\"keyword\">new</span> FileOutputStream(qbFile);</span><br><span class=\"line\">bitmap.compress(Bitmap.CompressFormat.JPEG,<span class=\"number\">100</span>,out);</span><br><span class=\"line\">out.flush();</span><br><span class=\"line\">out.close();</span><br></pre></td></tr></table></figure>\n<h1 id=\"通过Context\"><a href=\"#通过Context\" class=\"headerlink\" title=\"通过Context\"></a>通过<strong>Context</strong></h1><p><em>来自：</em><br><a href=\"https://blog.csdn.net/qq_26296197/article/details/51909423\" target=\"_blank\" rel=\"noopener\">android获取各种系统路径的方法</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//返回通过Context.openOrCreateDatabase 创建的数据库文件</span></span><br><span class=\"line\">Context.getDatabasePath()   </span><br><span class=\"line\"><span class=\"comment\">//用于获取APP的cache目录 /data/data/&lt;application package&gt;/cache目录                                                   </span></span><br><span class=\"line\">Context.getCacheDir().getPath()</span><br><span class=\"line\"><span class=\"comment\">//用于获取APP的在SD卡中的cache目录/mnt/sdcard/Android/data/&lt;application package&gt;/cache                                      </span></span><br><span class=\"line\">Context.getExternalCacheDir().getPath()</span><br><span class=\"line\"><span class=\"comment\">//用于获取APP的files目录 /data/data/&lt;application package&gt;/files                        </span></span><br><span class=\"line\">Context.getFilesDir().getPath()</span><br><span class=\"line\"><span class=\"comment\">//用于获取APP SDK中的obb目录 /mnt/sdcard/Android/obb/&lt;application package&gt;                                         </span></span><br><span class=\"line\">Context.getObbDir().getPath()</span><br><span class=\"line\"><span class=\"comment\">//用于获取APP的所在包目录                                              </span></span><br><span class=\"line\">Context.getPackageName()</span><br><span class=\"line\"><span class=\"comment\">//来获得当前应用程序对应的 apk 文件的路径                                       </span></span><br><span class=\"line\">Context.getPackageCodePath()</span><br><span class=\"line\"><span class=\"comment\">//获取该程序的安装包路径                                        </span></span><br><span class=\"line\">Context.getPackageResourcePath()</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"WebView的使用","url":"https://grooters.github.io/2018/07/24/WebView的使用与封装/","content":"<h1 id=\"WebView的封装\"><a href=\"#WebView的封装\" class=\"headerlink\" title=\"WebView的封装\"></a>WebView的封装</h1><p><em>源码应用：</em></p>\n<p><strong><a href=\"https://github.com/Grooters/WebBrower\" target=\"_blank\" rel=\"noopener\">WebBrower</a></strong></p>\n<p><strong><li>public WebViewWidget(Context context)</li></strong></p>\n<p>实例化WebViewWidget，自动完成setWebViewClient(new WebViewClient()和setWebChromeClient(new WebChromeClient()的基本方法重写工作</p>\n<p><strong><li>setWebView(WebViewWidget webView,RelativeLayout container)</li></strong></p>\n<p>初始化WebViewWidget，设置默认值，并把WebView添加到布局视图中</p>\n<blockquote>\n<p>WebViewWidget的对象</p>\n</blockquote>\n<blockquote>\n<p>WebView的布局容器</p>\n</blockquote>\n<p><strong><li>public void setHome(String[] urls)</li></strong></p>\n<p>设置主页，注意传入的参数为字符串数组，所以支持多个主页设定</p>\n<p><strong><li>public void setCache(int domOrData)</li></strong></p>\n<p>设置缓存方式</p>\n<blockquote>\n<p>缓存类型，有以下几种</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CACHE_DOM_STORAGE=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CACHE_DATABASE_STORAGE=<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CACHE_DATABASE_DOM_STORAGE=<span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n<p><strong><li>public String getTitle()</li></strong></p>\n<p>获取当前页面标题</p>\n<p><strong><li>public void setFullView(View[] customView)</li></strong></p>\n<p>设置是否具备全屏功能</p>\n<blockquote>\n<p>若全屏需要隐藏的组件</p>\n</blockquote>\n<p><strong><li>public void load(String url)</li></strong></p>\n<p>加载网页</p>\n<p><strong><li>destroyWebView(WebViewWidget webViewWidget)</li></strong></p>\n<p>彻底销毁WebView，记得在不需要WebView的时候调用，该方法可以彻底销毁</p>\n<p><strong><li>setZoom(boolean isZoom,boolean controller)</li></strong></p>\n<p>设置是否支持缩放，是否存在缩放按钮</p>\n<p><strong><li>setAdapteScrean(boolean isAdapte)</li></strong></p>\n<p>是否支持屏幕适配</p>\n<p><strong><li>setJsEnable(boolean isEnable)</li></strong></p>\n<p>是否支持js</p>\n<p><strong><li>void useDefaultLoadingView(boolean useLoadingView)</li></strong></p>\n<p>是否使用封装好的默认加载动画</p>\n<p><strong>以上很多方法已在封装的时候默认设置的了，可不做设置</strong></p>\n<p><em>以下代码调用便可以得到一个可以直接使用的WebView：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webView=<span class=\"keyword\">new</span> WebViewWidget(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">webView.setWebView(webView,webViewContainer);</span><br><span class=\"line\">webView.setHome(homeUrls);</span><br><span class=\"line\">webView.useDefaultLoadingView(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">webView.load(HOME_URL);</span><br></pre></td></tr></table></figure>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><p><li>Webview加载网页时出现NET::ERR_CACHE_MISS</li></p>\n<p>没有加网络访问权限：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<p><li>android.view.InflateException: Binary XML file line #19: Binary XML file lin</li></p>\n<p>封装重写WebView时没有重写其默认构造方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public WebViewWidget(Context context, AttributeSet attrs) &#123;</span><br><span class=\"line\">    super(context, attrs);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> AbsoluteSizeSpan absoluteSizeSpan=<span class=\"keyword\">new</span> AbsoluteSizeSpan(<span class=\"number\">300</span>);</span><br><span class=\"line\"><span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                builder.setSpan(absoluteSizeSpan,p,p+<span class=\"number\">1</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">                ++p;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(p==str.length())</span><br><span class=\"line\">                    p=<span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).start();</span><br></pre></td></tr></table></figure>\n<p>这样写字体变大后会恢复原有大小,但：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">builder.setSpan(<span class=\"keyword\">new</span> AbsoluteSizeSpan(<span class=\"number\">300</span>),p,p+<span class=\"number\">1</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br></pre></td></tr></table></figure>\n<p>就不会恢复大小</p>\n","categories":["Android"],"tags":[]},{"title":"SQLite的使用","url":"https://grooters.github.io/2018/07/23/SQLite的使用/","content":"<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p><em>参考：</em><br><a href=\"https://blog.csdn.net/l_215851356/article/details/71410683\" target=\"_blank\" rel=\"noopener\">Android SQLite详解</a></p>\n<p><strong> <li> <a href=\"https://developer.android.google.cn/reference/android/database/sqlite/SQLiteOpenHelper\" target=\"_blank\" rel=\"noopener\">SQLiteOpenHelper</a> </li></strong></p>\n<p>getWritableDatabase</p>\n<blockquote>\n<p>Create and/or open a database that will be used for reading and writing.</p>\n</blockquote>\n<blockquote>\n<p>创建或打开一个数据库，返回SQLiteDatabase对象</p>\n</blockquote>\n<p><em>当该方法被调用时，会执行继承了SQLiteOpenHelper的类中重写了的onCreate方法</em></p>\n<p><strong> <li> 创建表 </li></strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqLiteDatabase.execSQL(<span class=\"string\">\"create table if not exists \"</span> + TABLE_NAME + <span class=\"string\">\" (Id integer primary key, CustomName text, OrderPrice integer, Country text)\"</span>);</span><br></pre></td></tr></table></figure>\n<p><strong> <li> 插入数据 </li></strong></p>\n<blockquote>\n<p>insert(String table,String nullColumnHack,ContentValues values)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ContentValues values = <span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">values.put(<span class=\"string\">\"NAME\"</span>, <span class=\"string\">\"lilnt\"</span>);</span><br><span class=\"line\">sqLiteDatabase.insert(TABLE_NAME,<span class=\"keyword\">null</span>,values);</span><br><span class=\"line\"><span class=\"comment\">//或者：</span></span><br><span class=\"line\">sqLiteDatabase.execSQL(<span class=\"string\">\"insert into \"</span> + TABLE_NAME + <span class=\"string\">\" (Id, CustomName, OrderPrice, Country) values (1, 'Arc', 100, 'China')\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong> <li> 查询数据 </li></strong></p>\n<p><img src=\"/img/Android/SQLite的使用与封装/query语句.jpg\" alt=\"query语句\"></p>\n<blockquote>\n<p>table为表名</p>\n</blockquote>\n<blockquote>\n<p>columns为列名</p>\n</blockquote>\n<blockquote>\n<p>selectionArgs为约束条件</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String selection=<span class=\"string\">\"ID=?\"</span><span class=\"string\">\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>selectionArgs为约束条件的值</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] args=<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"1\"</span>&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cursor cursor=sqLiteDatabase.query(tableName,columns,selection,args,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>,<span class=\"keyword\">null</span>);</span><br></pre></td></tr></table></figure>\n<p><em>Cursor为查询数据后返回的指针对象，通过该指针对象可获取数据</em></p>\n<p><img src=\"/img/Android/SQLite的使用与封装/Cursor方法.png\" alt=\"Cursor方法\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(cursor.moveToNext())&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> id=cursor.getInt(<span class=\"number\">0</span>);</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"ID：\"</span>+id);</span><br><span class=\"line\">    String name=cursor.getString(<span class=\"number\">1</span>);</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"Name：\"</span>+name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//使用完后记得关闭指针</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cursor!=<span class=\"keyword\">null</span>)</span><br><span class=\"line\">  cursor.close();</span><br></pre></td></tr></table></figure>\n<p><strong><li>删除数据</li></strong></p>\n<blockquote>\n<p>delete(String table,String whereClause,String[] whereArgs)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqLiteDatabase.delete(TABLE_NAME, <span class=\"string\">\"ID=?\"</span>, <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"1\"</span>&#125;);</span><br><span class=\"line\"><span class=\"comment\">//或者：</span></span><br><span class=\"line\">delete from Orders where Id = <span class=\"number\">7</span></span><br></pre></td></tr></table></figure>\n<p><strong><li>修改更新数据</li></strong></p>\n<blockquote>\n<p>update(String table,ContentValues values,String whereClause, String[] whereArgs)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ContentValues values = <span class=\"keyword\">new</span> ContentValues();</span><br><span class=\"line\">values.put(<span class=\"string\">\"NAME\"</span>, <span class=\"string\">\"lilnt\"</span>);</span><br><span class=\"line\">sqLiteDatabase.update(TABLE_NAME,values,<span class=\"string\">\"NAME = ?\"</span>,<span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"lilnl\"</span>&#125;);</span><br></pre></td></tr></table></figure>\n<h1 id=\"sqlite3的使用\"><a href=\"#sqlite3的使用\" class=\"headerlink\" title=\"sqlite3的使用\"></a>sqlite3的使用</h1><p><strong>查看虚拟机数据库文件：</strong></p>\n<blockquote>\n<p>Device File Explorer -&gt; data -&gt; data -&gt; app包名 -&gt; database</p>\n</blockquote>\n<p>在android studio的Terminal上切到SDK目录下的platform-tools文件夹，输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb shell</span><br><span class=\"line\">cd data/data/app包名/database</span><br><span class=\"line\">sqlite3 数据库名称.db</span><br></pre></td></tr></table></figure>\n<p>则来到：</p>\n<blockquote>\n<p>sqlite&gt;</p>\n</blockquote>\n<p>即可操作</p>\n<p>若出现没有权限，则：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su</span><br><span class=\"line\">chmod 777 需要获取权限的文件夹</span><br></pre></td></tr></table></figure>\n<p>具体命令可参考：<a href=\"https://blog.csdn.net/navioo/article/details/51397243\" target=\"_blank\" rel=\"noopener\">SQLite 基本操作–查看数据表信息</a></p>\n<p><strong>控制台命令：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//分行显示</span><br><span class=\"line\">.mode line</span><br><span class=\"line\"></span><br><span class=\"line\">//打开数据库</span><br><span class=\"line\">sqlite3 [表名].db</span><br><span class=\"line\"></span><br><span class=\"line\">//列出数据表</span><br><span class=\"line\">.table</span><br><span class=\"line\"></span><br><span class=\"line\">//退出数据库</span><br><span class=\"line\">.quit</span><br><span class=\"line\"></span><br><span class=\"line\">//显示数据表内容</span><br><span class=\"line\">select * from sqlite_mastar where name=&apos;[表名]&apos;</span><br></pre></td></tr></table></figure>\n<h1 id=\"常用Sql语句\"><a href=\"#常用Sql语句\" class=\"headerlink\" title=\"常用Sql语句\"></a>常用Sql语句</h1><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataHelper.execute(\"<span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">NOT</span> <span class=\"keyword\">EXISTS</span> Setting ( HOME_URL <span class=\"built_in\">TEXT</span> PRIMARY <span class=\"keyword\">KEY</span> <span class=\"keyword\">NOT</span> <span class=\"literal\">NULL</span>, HOME_NAME <span class=\"built_in\">TEXT</span> );\");</span><br><span class=\"line\"></span><br><span class=\"line\">dataHelper.execute(\"<span class=\"keyword\">DROP</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">IF</span> <span class=\"keyword\">EXISTS</span> Setting;\");</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"泛型","url":"https://grooters.github.io/2018/07/22/泛型/","content":"<p>泛型出现于<strong>Java SE5</strong>，泛型的出现使编写可以应用于多种类型的代码成为可能，实现了参数化类型，而且解耦了类或方法与使用的类型之间的约束。</p>\n<p><em>eg：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;T&gt;</span><br></pre></td></tr></table></figure>\n<p>该List容器可装入的对象类型定义为泛型，即没有明确规定要装生命类型的对象</p>\n<h1 id=\"元组类库\"><a href=\"#元组类库\" class=\"headerlink\" title=\"元组类库\"></a>元组类库</h1><p>当需要通过return语句返回多个对象时，可通过创建一个对象，将需要返回的多个对象存在该对象中，这种对象就称为<strong>元组</strong></p>\n<p><em>注意：</em></p>\n<p>该对象<strong>只允许读取其中的元素，而不允许像其中存入新对象</strong>，这也被称为数据传送对象或行使</p>\n<p><strong>元组的应用：</strong></p>\n<p><em>FirstTuple：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FirstTuple</span> &lt;<span class=\"title\">A</span>,<span class=\"title\">B</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> A a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> B b;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FirstTuple</span><span class=\"params\">(A a,B b)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a=a;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.b=b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> A <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> B <span class=\"title\">getB</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A:\"</span>+a+<span class=\"string\">\"  B:\"</span>+b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>SecondTuple：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SecondTuple</span>&lt;<span class=\"title\">A</span> ,<span class=\"title\">B</span>,<span class=\"title\">C</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">FirstTuple</span>&lt;<span class=\"title\">A</span>,<span class=\"title\">B</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> A a;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> B b;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> C c;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">SecondTuple</span><span class=\"params\">(A a,B b,C c)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(a,b);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.a=a;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.b=b;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.c=c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> A <span class=\"title\">getA</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> B <span class=\"title\">getB</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> C <span class=\"title\">getC</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A:\"</span>+a+<span class=\"string\">\"  B:\"</span>+b+<span class=\"string\">\"  C:\"</span>+c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>TupleUser：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TupleUser</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> FirstTuple&lt;String,Integer&gt; <span class=\"title\">f</span><span class=\"params\">(String str,Integer inte)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FirstTuple&lt;&gt;(str,inte);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SecondTuple&lt;String,Integer,String&gt; <span class=\"title\">s</span><span class=\"params\">(String str,Integer inte,String stri)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SecondTuple&lt;&gt;(str,inte,stri);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String...args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(f(<span class=\"string\">\"fs\"</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\">        System.out.println(s(<span class=\"string\">\"ss\"</span>,<span class=\"number\">2</span>,<span class=\"string\">\"ssi\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>由以上代码可知，通过泛型就可以灵活地将各种数据存入元组对象，数据类型可由客户端开发人员自己决定，而不用频繁地更改存储对象类</p>\n<h1 id=\"泛型的进一步使用\"><a href=\"#泛型的进一步使用\" class=\"headerlink\" title=\"泛型的进一步使用\"></a>泛型的进一步使用</h1><p>但不难发现以上功能通过定义超类Object类也可以实现，此时泛型的另一独到之处又体现出来，即是指定容器需要存放的对象类型，如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt;</span><br></pre></td></tr></table></figure>\n<p>同时也可以实现”限定性的泛化”，即同时起到指定需要什么类型和先定义后决定用在限定范围内的具体类型。</p>\n<p><em>应用如下：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span>  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThirdTuple</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">FirstTuple</span>&lt;<span class=\"title\">String</span>,<span class=\"title\">Integer</span>&gt;&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> T <span class=\"title\">f</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TupleUser</span> <span class=\"keyword\">extends</span> <span class=\"title\">ThirdTuple</span>&lt;<span class=\"title\">TupleUser</span>.<span class=\"title\">ExtendFirstTuple</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String...args)</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* error：String类型不满足定义的泛型约束（T extends FirstTuple&lt;String,Integer&gt;）</span></span><br><span class=\"line\"><span class=\"comment\">    @Override</span></span><br><span class=\"line\"><span class=\"comment\">    public String f() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        return \"f\";</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ExtendFirstTuple <span class=\"title\">f</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ExtendFirstTuple(<span class=\"string\">\"str\"</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExtendFirstTuple</span> <span class=\"keyword\">extends</span> <span class=\"title\">FirstTuple</span>&lt;<span class=\"title\">String</span>,<span class=\"title\">Integer</span>&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ExtendFirstTuple</span><span class=\"params\">(String str, Integer inte)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(str, inte);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>Android源码上的一个小应用：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@NonNull</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">VH</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewHolder</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> VH <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(@NonNull ViewGroup parent, <span class=\"keyword\">int</span> viewType)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InerHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView textView;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">InerHolder</span><span class=\"params\">(@NonNull View itemView)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(itemView);</span><br><span class=\"line\">        textView=findViewById(R.id.recycler_textView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span>&lt;<span class=\"title\">InerHolder</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> InerHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(@NonNull ViewGroup viewGroup, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InerHolder(LayoutInflater.from(getApplicationContext()).inflate(R.layout.recycler_item,viewGroup,<span class=\"keyword\">false</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(@NonNull InerHolder inerHolder, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        inerHolder.textView.setText(<span class=\"string\">\"i:\"</span>+i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getItemId(position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>若不使用泛型写法：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InerHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ViewHolder</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView textView;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">InerHolder</span><span class=\"params\">(@NonNull View itemView)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(itemView);</span><br><span class=\"line\">        textView=itemView.findViewById(R.id.recycler_textView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">Adapter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RecyclerAdapter</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context=context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RecyclerView.<span class=\"function\">ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(@NonNull ViewGroup viewGroup, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InerHolder(LayoutInflater.from(context).inflate(R.layout.recycler_item,viewGroup,<span class=\"keyword\">false</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(@NonNull RecyclerView.ViewHolder viewHolder, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//此处若不想转型，可按第二种写法创建Adapter</span></span><br><span class=\"line\">        ((InerHolder)viewHolder).textView.setText(<span class=\"string\">\"i:\"</span>+i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getItemId(position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//输出一个Item</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"泛型方法\"><a href=\"#泛型方法\" class=\"headerlink\" title=\"泛型方法\"></a>泛型方法</h1><p>上面讲的都是类泛型，以下主要以方法泛型展开：</p>\n<p>定义泛型方法秩序将泛型参数列表至于返回值前，eg：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public &lt;T&gt; void f(T t)&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"杠杆利用类型参数推断\"><a href=\"#杠杆利用类型参数推断\" class=\"headerlink\" title=\"杠杆利用类型参数推断\"></a>杠杆利用类型参数推断</h2><p>为了简化代码，可编写一个泛型工具类：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class TUtil&#123;</span><br><span class=\"line\">\tpublic static &lt;k,V&gt; Map&lt;K,V&gt; map()&#123;</span><br><span class=\"line\">\t\tMap&lt;K,V&gt; map=new HashMap&lt;K,V&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static final void main(String...args)&#123;</span><br><span class=\"line\">\t\tMap&lt;String,String&gt; maper=TUtil.map();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型方法中的可变参数\"><a href=\"#泛型方法中的可变参数\" class=\"headerlink\" title=\"泛型方法中的可变参数\"></a>泛型方法中的可变参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Ter&#123;</span><br><span class=\"line\">\tpublic &lt;T&gt; void t(T...args)&#123;</span><br><span class=\"line\">\t\tfor(T a:args)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"泛型的擦除\"><a href=\"#泛型的擦除\" class=\"headerlink\" title=\"泛型的擦除\"></a>泛型的擦除</h2><p><strong>Java泛型是使用擦出来实现的，在使用泛型时，任何具体的类型都会被擦除</strong></p>\n<p>如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class To&#123;</span><br><span class=\"line\">\tpublic void f()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Ter &lt;T&gt;&#123;</span><br><span class=\"line\">\tpublic T t;</span><br><span class=\"line\">\tpublic Ter(T t)&#123;</span><br><span class=\"line\">\t\tthis.t=t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void fer()&#123;</span><br><span class=\"line\">\t\t//Erro：cannot find symbol</span><br><span class=\"line\">\t\tt.tf();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">public class TerT&#123;</span><br><span class=\"line\">\tpublic static final void main(String...args)&#123;</span><br><span class=\"line\">\t\tTo to=new To();</span><br><span class=\"line\">\t\tTer ter&lt;To&gt; ter=new Ter(to);</span><br><span class=\"line\">\t\tter.fer();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>由于To被擦除了类型，所以无法找到方法tf</p>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Ter &lt;T extends To&gt;&#123;</span><br><span class=\"line\">\tpublic T t;</span><br><span class=\"line\">\tpublic Ter(T t)&#123;</span><br><span class=\"line\">\t\tthis.t=t;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic void fer()&#123;</span><br><span class=\"line\">\t\t//Erro：cannot find symbol</span><br><span class=\"line\">\t\tt.tf();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>T -&gt; T extends To</p>\n</blockquote>\n<p>使其擦除到To边界</p>\n","categories":["Java"],"tags":[]},{"title":"探索RecyclerView","url":"https://grooters.github.io/2018/07/20/探索RecyclerView/","content":"<p>首先需要添加进来</p>\n<blockquote>\n<p>com.android.support:recyclerview-v7:28.0.0-beta01</p>\n</blockquote>\n<h1 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"源码实现\"></a>源码实现</h1><p><strong>eg：</strong></p>\n<p><em>LuffyRecycler：</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class=\"line\">    super.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">    setContentView(R.layout.recycler_layout);</span><br><span class=\"line\"></span><br><span class=\"line\">    RecyclerView recyclerView=findViewById(R.id.recyclerView);</span><br><span class=\"line\">    recyclerView.setLayoutManager(new LinearLayoutManager(this));</span><br><span class=\"line\">    RecyclerAdapter adapter=new RecyclerAdapter(this);</span><br><span class=\"line\">    recyclerView.setAdapter(adapter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>RecyclerAdapter：</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import android.content.Context;</span><br><span class=\"line\">import android.support.annotation.NonNull;</span><br><span class=\"line\">import android.support.v7.widget.RecyclerView;</span><br><span class=\"line\">import android.view.LayoutInflater;</span><br><span class=\"line\">import android.view.View;</span><br><span class=\"line\">import android.view.ViewGroup;</span><br><span class=\"line\">import android.widget.TextView;</span><br><span class=\"line\"></span><br><span class=\"line\">import io.github.grooters.luffy.R;</span><br><span class=\"line\"></span><br><span class=\"line\">private class InerHolder extends RecyclerView.ViewHolder&#123;</span><br><span class=\"line\">    private TextView textView;</span><br><span class=\"line\">    private InerHolder(@NonNull View itemView) &#123;</span><br><span class=\"line\">        super(itemView);</span><br><span class=\"line\">        textView=itemView.findViewById(R.id.recycler_textView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private class RecyclerAdapter extends RecyclerView.Adapter &#123;</span><br><span class=\"line\">    private Context context;</span><br><span class=\"line\">    public RecyclerAdapter(Context context) &#123;</span><br><span class=\"line\">        super();</span><br><span class=\"line\">        this.context=context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @NonNull</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) &#123;</span><br><span class=\"line\">        return new InerHolder(LayoutInflater.from(context).inflate(R.layout.recycler_item,viewGroup,false));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder viewHolder, int i) &#123;</span><br><span class=\"line\">        //此处若不想转型，可按第二种写法创建Adapter</span><br><span class=\"line\">        ((InerHolder)viewHolder).textView.setText(&quot;i:&quot;+i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public long getItemId(int position) &#123;</span><br><span class=\"line\">        return super.getItemId(position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int getItemCount() &#123;</span><br><span class=\"line\">        //输出一个Item</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>第二种Adapter写法（详见泛型）：</strong><br><em>LuffyRecycler：</em><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private class InerHolder extends RecyclerView.ViewHolder&#123;</span><br><span class=\"line\">    private TextView textView;</span><br><span class=\"line\">    private InerHolder(@NonNull View itemView) &#123;</span><br><span class=\"line\">        super(itemView);</span><br><span class=\"line\">        textView=findViewById(R.id.recycler_textView);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">private class InerAdapter extends RecyclerView.Adapter&lt;InerHolder&gt;&#123;</span><br><span class=\"line\">    @NonNull</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public InerHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) &#123;</span><br><span class=\"line\">        return new InerHolder(LayoutInflater.from(getApplicationContext()).inflate(R.layout.recycler_item,viewGroup,false));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onBindViewHolder(@NonNull InerHolder inerHolder, int i) &#123;</span><br><span class=\"line\">        inerHolder.textView.setText(&quot;i:&quot;+i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public int getItemCount() &#123;</span><br><span class=\"line\">        return 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public long getItemId(int position) &#123;</span><br><span class=\"line\">        return super.getItemId(position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"RecyclerView的滚动事件\"><a href=\"#RecyclerView的滚动事件\" class=\"headerlink\" title=\"RecyclerView的滚动事件\"></a>RecyclerView的滚动事件</h1><p>RecyclerView有两种滚动状态：</p>\n<ol>\n<li><p>静止 -&gt; 被迫拖拽移动 -&gt; 静止</p>\n</li>\n<li><p>静止 -&gt; 被迫拖拽移动 -&gt; 自己滚动 -&gt; 静止</p>\n</li>\n</ol>\n<p>在滚动过程中，会回调两个方法：</p>\n<ol>\n<li><strong>onScrollStateChanged</strong></li>\n</ol>\n<p><em>滚动状态变化时</em></p>\n<ol start=\"2\">\n<li><strong>onScrolled</strong></li>\n</ol>\n<p><em>滚动时</em></p>\n<p><strong>eg:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">recycler.addOnScrollListener(new RecyclerView.OnScrollListener() &#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onScrollStateChanged(RecyclerView recyclerView, int newState) &#123;</span><br><span class=\"line\">        super.onScrollStateChanged(recyclerView, newState);</span><br><span class=\"line\">        Log.i(TAG, &quot;onScrollStateChanged&quot;);</span><br><span class=\"line\">        //目前的状态</span><br><span class=\"line\">        Log.i(TAG, &quot;newState: &quot; + newState);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void onScrolled(RecyclerView recyclerView, int dx, int dy) &#123;</span><br><span class=\"line\">        super.onScrolled(recyclerView, dx, dy);</span><br><span class=\"line\">        Log.i(TAG, &quot;onScrolled&quot;);</span><br><span class=\"line\">        //水平滚动距离</span><br><span class=\"line\">        Log.i(TAG, &quot;dx: &quot; + dx);</span><br><span class=\"line\">        //垂直滚动距离</span><br><span class=\"line\">        Log.i(TAG, &quot;dy: &quot; + dy);</span><br><span class=\"line\">        Log.i(TAG, &quot;CHECK_SCROLL_UP: &quot; + recyclerView.canScrollVertically(TAG_CHECK_SCROLL_UP));</span><br><span class=\"line\">        Log.i(TAG, &quot;CHECK_SCROLL_DOWN: &quot; + recyclerView.canScrollVertically(TAG_CHECK_SCROLL_DOWN));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>newState:</strong></p>\n<blockquote>\n<p>public static final int SCROLL_STATE_IDLE = 0; //停止滚动<br>public static final int SCROLL_STATE_DRAGGING = 1; //正在被外部拖拽,一般为用户正在用手指滚动<br>public static final int SCROLL_STATE_SETTLING = 2; //自动滚动开始</p>\n</blockquote>\n<h1 id=\"点击事件\"><a href=\"#点击事件\" class=\"headerlink\" title=\"点击事件\"></a>点击事件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private class StudentViewHolder extends RecyclerView.ViewHolder&#123;</span><br><span class=\"line\">    private TextView textViewId,textViewName,textViewDepartment;</span><br><span class=\"line\">    private ImageView imageView;</span><br><span class=\"line\">    private StudentViewHolder(@NonNull View itemView) &#123;</span><br><span class=\"line\">        super(itemView);</span><br><span class=\"line\">        itemView.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void onClick(View view) &#123;</span><br><span class=\"line\">                //adapter.notifyItemChanged(1,1);</span><br><span class=\"line\">                adapter.notifyItemChanged(1);</span><br><span class=\"line\">                Log.i(TAG,&quot;onClick&quot;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        imageView=itemView.findViewById(R.id.img);</span><br><span class=\"line\">        textViewId=itemView.findViewById(R.id.textView_id);</span><br><span class=\"line\">        textViewName=itemView.findViewById(R.id.textVew_name);</span><br><span class=\"line\">        textViewDepartment=itemView.findViewById(R.id.textView_department);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>void notifyItemChanged (int position)</strong></p>\n<p>更新指定行</p>\n<p><strong>void notifyItemChanged (int position, Object payload)</strong></p>\n<blockquote>\n<p>payload只需传入任意值</p>\n</blockquote>\n<p>更新position行，可防止图片闪现,配合以下使用：</p>\n<p><strong>public void onBindViewHolder(@NonNull StudentViewHolder holder, int position, @NonNull List<object> payloads)</object></strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Override</span><br><span class=\"line\">public void onBindViewHolder(@NonNull StudentViewHolder studentViewHolder, int i) &#123;</span><br><span class=\"line\">    Log.i(TAG,&quot;onBindViewHolder&quot;);</span><br><span class=\"line\">    studentViewHolder.textViewId.setText(students.get(i).getId());</span><br><span class=\"line\">    studentViewHolder.textViewName.setText(students.get(i).getName());</span><br><span class=\"line\">    studentViewHolder.textViewDepartment.setText(students.get(i).getDepartment());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@Override</span><br><span class=\"line\">public void onBindViewHolder(@NonNull StudentViewHolder holder, int position, @NonNull List&lt;Object&gt; payloads) &#123;</span><br><span class=\"line\">    super.onBindViewHolder(holder, position, payloads);</span><br><span class=\"line\">    if(payloads.isEmpty())&#123;</span><br><span class=\"line\">        onBindViewHolder(holder,position);</span><br><span class=\"line\">    &#125;else&#123;</span><br><span class=\"line\">        holder.textViewId.setText(&quot;haha:&quot;+position);</span><br><span class=\"line\">        holder.textViewName.setText(students.get(position).getName());</span><br><span class=\"line\">        holder.textViewDepartment.setText(students.get(position).getDepartment());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"其它常用方法\"><a href=\"#其它常用方法\" class=\"headerlink\" title=\"其它常用方法\"></a>其它常用方法</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//从位置0移动到5</span></span><br><span class=\"line\">recyclerView.getAdapter().notifyItemMoved(<span class=\"number\">0</span>,<span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure>\n<h1 id=\"RecyclerView的封装\"><a href=\"#RecyclerView的封装\" class=\"headerlink\" title=\"RecyclerView的封装\"></a>RecyclerView的封装</h1><h2 id=\"第一次拙劣-错误-的封装\"><a href=\"#第一次拙劣-错误-的封装\" class=\"headerlink\" title=\"第一次拙劣(错误)的封装\"></a>第一次拙劣(错误)的封装</h2><p><em>源码如下：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerWidget</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=RecyclerWidget.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Context context;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> viewId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> RecyclerMethodInterface recyclerMethodInterface;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">RecyclerWidget</span><span class=\"params\">(@NonNull Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"RecyclerWidget\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">initRecycler</span><span class=\"params\">(Context context, <span class=\"keyword\">int</span> vireId)</span></span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"initRecycler:\"</span>+vireId);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.context=context;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.viewId=vireId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RecyclerAdapter <span class=\"title\">setRecyclerAdapter</span><span class=\"params\">(RecyclerMethodInterface recyclerMethodInterface)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.recyclerMethodInterface=recyclerMethodInterface;</span><br><span class=\"line\">        RecyclerAdapter adapter=<span class=\"keyword\">new</span> RecyclerAdapter();</span><br><span class=\"line\">        <span class=\"comment\">//注意不能漏掉这句</span></span><br><span class=\"line\">        setLayoutManager(<span class=\"keyword\">new</span> LinearLayoutManager(context));</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"setRecyclerAdapter\"</span>);</span><br><span class=\"line\">        setAdapter(adapter);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> adapter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerHolder</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewHolder</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">InnerHolder</span><span class=\"params\">(@NonNull View itemView)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">super</span>(itemView);</span><br><span class=\"line\">            Log.i(TAG,<span class=\"string\">\"InnerHolder\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecyclerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">Adapter</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> ViewHolder <span class=\"title\">onCreateViewHolder</span><span class=\"params\">(@NonNull ViewGroup viewGroup, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">            Log.i(TAG,<span class=\"string\">\"onCreateViewHolder\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> InnerHolder(LayoutInflater.from(context).inflate(viewId,viewGroup,<span class=\"keyword\">false</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(@NonNull ViewHolder viewHolder, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">            Log.i(TAG,<span class=\"string\">\"onBindViewHolder\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(recyclerMethodInterface!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                recyclerMethodInterface.onBindViewHolder(viewHolder,i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(recyclerMethodInterface!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> recyclerMethodInterface.getItemId(position);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.getItemId(position);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(recyclerMethodInterface!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> recyclerMethodInterface.getItemCount();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">RecyclerMethodInterface</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(@NonNull ViewHolder viewHolder, <span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span></span>;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>eg：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RecyclerWidget recyclerWidget=findViewById(R.id.widget_recycler);</span><br><span class=\"line\">recyclerWidget.initRecycler(context,R.layout.dialog_page_item);</span><br><span class=\"line\">adapter=recyclerWidget.setRecyclerAdapter(<span class=\"keyword\">new</span> RecyclerWidget.RecyclerMethodInterface() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onBindViewHolder</span><span class=\"params\">(@NonNull RecyclerView.ViewHolder viewHolder, <span class=\"keyword\">int</span> i)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getItemId</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> position;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getItemCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"通用框架\"><a href=\"#通用框架\" class=\"headerlink\" title=\"通用框架\"></a>通用框架</h2><p>从以下文章获取思路：<br><a href=\"https://blog.csdn.net/lmj623565791/article/details/51118836\" target=\"_blank\" rel=\"noopener\">为RecyclerView打造通用Adapter 让RecyclerView更加好用</a></p>\n<p><strong><font size=\"4sp\">创建通用Holder</font></strong></p>\n<blockquote>\n<p>由于在Holder中需要获取未知数量与类型的控件，所以可通过View型集合来存储</p>\n</blockquote>\n<ol>\n<li><p>在Holder构造方法中获取Context，Item布局赋值和创建View集合对象</p>\n</li>\n<li><p>定义一个静态方法创建Holder对象，并传入Context，Item布局</p>\n</li>\n<li><p>定义一个方法根据id获取控件，并将其以id为索引添加到view集合中，以供下次直接获取</p>\n</li>\n</ol>\n<p><strong><font size=\"4sp\">创建通用Adapter</font></strong>，包括单布局，多布局和分类布局三种</p>\n<p><li> 单布局</li></p>\n<ol>\n<li><p>构造方法获取Context，布局id和数据内容</p>\n</li>\n<li><p>定义一个抽象方法(该方法提供给客户端重写)</p>\n</li>\n<li><p>在onCreateViewHolder中调用静态方法创建Holder</p>\n</li>\n<li><p>在onBindViewHolder中调用抽象方法</p>\n</li>\n</ol>\n<p><li> 多布局</li></p>\n<blockquote>\n<p>需要多创建一个接口，里面定义根据type获取布局和根据数据和位置返回type两个接口方法</p>\n</blockquote>\n<ol>\n<li><p>在重写方法getItemViewType中调用获取type的接口方法</p>\n</li>\n<li><p>在重写方法onCreateViewHolder中调用根据type获取布局的接口方法</p>\n</li>\n<li><p>调用静态方法传入相应布局创建Holder</p>\n</li>\n</ol>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h1><h2 id=\"notifyDataSetChange不起作用\"><a href=\"#notifyDataSetChange不起作用\" class=\"headerlink\" title=\"notifyDataSetChange不起作用\"></a>notifyDataSetChange不起作用</h2><blockquote>\n<p>数据对象更新前和更新后必须是同一个对象，否则notifyDataSetChange将无效</p>\n</blockquote>\n<p><strong>因为其绑定的是第一个数据对象，更新数据时重新创建了一个数据对象，但原来那个数据对象并未改变，所以notifyDataSetChange后不会产生改变</strong></p>\n<blockquote>\n<p>控件，即RecyclerView也必须是同一个对象</p>\n</blockquote>\n<h2 id=\"只显示一条Item\"><a href=\"#只显示一条Item\" class=\"headerlink\" title=\"只显示一条Item\"></a>只显示一条Item</h2><blockquote>\n<p>若使用new LinearLayoutManager(this)Item布局高度不能使用match_parent</p>\n</blockquote>\n<p><strong>因为如果高度使用match_parent，一条Item便会占据整个屏幕，导致只显示一条Item</strong></p>\n<h2 id=\"无法操作Item中的控件\"><a href=\"#无法操作Item中的控件\" class=\"headerlink\" title=\"无法操作Item中的控件\"></a>无法操作Item中的控件</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> GeneralHolder <span class=\"title\">getHolder</span><span class=\"params\">(Context context, ViewGroup parent, <span class=\"keyword\">int</span> layoutId)</span></span>&#123;</span><br><span class=\"line\">    View itemView=LayoutInflater.from(context).inflate(layoutId,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> GeneralHolder(itemView,context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>想要操作Item中的控件，就必须为itemView提供parent布局</p>\n</blockquote>\n<p><strong>无法通过以上代码中的itemView操作Item中的控件，因为没有提供parent布局，需要更改为：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">View itemView=LayoutInflater.from(context).inflate(layoutId,parent,<span class=\"keyword\">false</span>);</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"探索TextView","url":"https://grooters.github.io/2018/07/20/探索TextView/","content":"<h1 id=\"TextWatcher\"><a href=\"#TextWatcher\" class=\"headerlink\" title=\"TextWatcher\"></a>TextWatcher</h1><blockquote>\n<p>TextView内容变化监听器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">textView.addTextChangedListener(<span class=\"keyword\">new</span> TextWatcher() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">beforeTextChanged</span><span class=\"params\">(CharSequence charSequence, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> i1, <span class=\"keyword\">int</span> i2)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"c:\"</span>+charSequence+<span class=\"string\">\" i:\"</span>+i+<span class=\"string\">\" i1:\"</span>+i1+<span class=\"string\">\" i2:\"</span>+i2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onTextChanged</span><span class=\"params\">(CharSequence charSequence, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> i1, <span class=\"keyword\">int</span> i2)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"c:\"</span>+charSequence+<span class=\"string\">\" i:\"</span>+i+<span class=\"string\">\" i1:\"</span>+i1+<span class=\"string\">\" i2\"</span>+i2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">afterTextChanged</span><span class=\"params\">(Editable editable)</span> </span>&#123;</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"editable:\"</span>+editable.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong><li> beforeTextChanged(CharSequence s, int start, int count, int after)</li></strong></p>\n<p>该方法在文本改变之前调用，传入了四个参数：</p>\n<ol>\n<li>CharSequence s：文本改变之前的内容</li>\n<li>int start：文本开始改变时的起点位置，从0开始计算</li>\n<li>int count：要被改变的文本字数，即将要被替代的选中文本字数</li>\n<li>int after：改变后添加的文本字数，即替代选中文本后的文本字数</li>\n</ol>\n<blockquote>\n<p>在当前文本s中，从start位置开始之后的count个字符（即将）要被after个字符替换掉</p>\n</blockquote>\n<p><strong><li>onTextChanged(CharSequence charSequence, int i, int i1, int i2)</li></strong></p>\n<p>该方法在文本改变时调用，传入了四个参数：</p>\n<ol>\n<li>CharSequence charSequence：文本改变之后的内容</li>\n<li>int i：文本改变的时的起点位置，从0开始计算</li>\n<li>int i1：要被改变的文本字数</li>\n<li>int i2：改变后添加的文本字数</li>\n</ol>\n<blockquote>\n<p>在当前文本charSequence中，从start位置开始之后的before个字符（已经）被count个字符替换掉了</p>\n</blockquote>\n<p><strong><li> public void afterTextChanged(Editable editable)</li></strong></p>\n<p>该方法在文本改变之后调用，传入了1个参数：</p>\n<ol>\n<li>Editable editable：改变后的最终文本</li>\n</ol>\n<blockquote>\n<p>该方法是在执行完beforeTextChanged、onTextChanged两个方法后才会被调用，此时的文本editable为最终显示给用户看到的文本。我们可以再对该文本进行下一步处理，比如把文本editable显示在UI界面上</p>\n</blockquote>\n<h1 id=\"改变TextView中部分内容\"><a href=\"#改变TextView中部分内容\" class=\"headerlink\" title=\"改变TextView中部分内容\"></a>改变TextView中部分内容</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ForegroundColorSpan foreground=<span class=\"keyword\">new</span> ForegroundColorSpan(ContextCompat.getColor(context,R.color.colorAccent));</span><br><span class=\"line\">BackgroundColorSpan background=<span class=\"keyword\">new</span> BackgroundColorSpan(ContextCompat.getColor(context,R.color.colorPrimary));</span><br><span class=\"line\">SpannableStringBuilder builder=<span class=\"keyword\">new</span> SpannableStringBuilder(textView.getText().toString());</span><br><span class=\"line\">builder.setSpan(foreground,<span class=\"number\">0</span>,<span class=\"number\">4</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">builder.setSpan(background,<span class=\"number\">6</span>,<span class=\"number\">9</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">builder.setSpan(<span class=\"keyword\">new</span> AbsoluteSizeSpan(<span class=\"number\">60</span>),<span class=\"number\">6</span>,<span class=\"number\">9</span>, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">textView.setText(builder);</span><br></pre></td></tr></table></figure>\n<p><em>注意：</em></p>\n<p><strong>0,4 指的是第一个值到第四个值，并不是第五个</strong></p>\n<blockquote>\n<p>Spannable.SPAN_EXCLUSIVE_EXCLUSIVE</p>\n</blockquote>\n<p>在改变部分的<strong>前后</strong>新增内容都不发生改变</p>\n<blockquote>\n<p>Spanned.SPAN_INCLUSIVE_EXCLUSIVE</p>\n</blockquote>\n<p>在改变部分的<strong>前面</strong>新增内容会改变在<strong>后面</strong>新增内容不发生改变</p>\n<h1 id=\"xml实现省略号表示剩余内容\"><a href=\"#xml实现省略号表示剩余内容\" class=\"headerlink\" title=\"xml实现省略号表示剩余内容\"></a>xml实现省略号表示剩余内容</h1><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android:lines=\"1\"</span><br><span class=\"line\">android:ellipsize=\"end\"</span><br></pre></td></tr></table></figure>\n<h1 id=\"文本折叠\"><a href=\"#文本折叠\" class=\"headerlink\" title=\"文本折叠\"></a>文本折叠</h1><h2 id=\"自定义实现\"><a href=\"#自定义实现\" class=\"headerlink\" title=\"自定义实现\"></a>自定义实现</h2><p><a href=\"https://developer.android.google.cn/reference/android/view/ViewTreeObserver\" target=\"_blank\" rel=\"noopener\">ViewTreeObserver</a></p>\n<blockquote>\n<p>视图树观察器</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TextVieWer</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=TextVieWer.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView textView;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String str;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_textviwer);</span><br><span class=\"line\">        textView=findViewById(R.id.textView);</span><br><span class=\"line\">        str=textView.getText().toString();</span><br><span class=\"line\">        <span class=\"comment\">//设置TextView可点击</span></span><br><span class=\"line\">        textView.setMovementMethod(LinkMovementMethod.getInstance());</span><br><span class=\"line\">        <span class=\"comment\">//添加视图树观察器，以避免在布局控件还未完全初始化前操作控件而报错</span></span><br><span class=\"line\">        ViewTreeObserver observer=textView.getViewTreeObserver();</span><br><span class=\"line\">        observer.addOnGlobalLayoutListener(<span class=\"keyword\">new</span> ViewTreeObserver.OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                ViewTreeObserver observer=textView.getViewTreeObserver();</span><br><span class=\"line\">                observer.removeOnGlobalLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">                Log.i(TAG,<span class=\"string\">\"textView.getLineCount(): \"</span>+textView.getLineCount());</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(textView.getLineCount()&gt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                    <span class=\"comment\">//获取前二行的字数</span></span><br><span class=\"line\">                    <span class=\"keyword\">int</span> lineEnd=textView.getLayout().getLineEnd(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    Log.i(TAG,<span class=\"string\">\"lineEnd: \"</span>+lineEnd);</span><br><span class=\"line\">                    <span class=\"comment\">//截取前两行字数个数-3的字，然后再添加省略号</span></span><br><span class=\"line\">                    str=str.subSequence(<span class=\"number\">0</span>,lineEnd-<span class=\"number\">3</span>)+<span class=\"string\">\"...\"</span>;</span><br><span class=\"line\">                    Log.i(TAG,<span class=\"string\">\"str: \"</span>+str);</span><br><span class=\"line\">                    textView.setText(getClickableSpan(str,lineEnd));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//对省略号进行操作，添加点击事件监听，和改变省略号颜色与大小</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> SpannableString <span class=\"title\">getClickableSpan</span><span class=\"params\">(String str,<span class=\"keyword\">int</span> count)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//指定部分字体监听器创建</span></span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Listener</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClickableSpan</span> <span class=\"keyword\">implements</span> <span class=\"title\">View</span>.<span class=\"title\">OnClickListener</span></span>&#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">                Toast.makeText(TextVieWer.<span class=\"keyword\">this</span>, <span class=\"string\">\"Click Success\"</span>, Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">updateDrawState</span><span class=\"params\">(TextPaint ds)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">super</span>.updateDrawState(ds);</span><br><span class=\"line\">                ds.setUnderlineText(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        SpannableString spanableInfo = <span class=\"keyword\">new</span> SpannableString(str);</span><br><span class=\"line\">        BackgroundColorSpan colorSpan=<span class=\"keyword\">new</span> BackgroundColorSpan(ContextCompat.getColor(<span class=\"keyword\">this</span>,R.color.white));</span><br><span class=\"line\">        ForegroundColorSpan colorSpan1=<span class=\"keyword\">new</span> ForegroundColorSpan(ContextCompat.getColor(<span class=\"keyword\">this</span>,R.color.colorPrimary));</span><br><span class=\"line\">        spanableInfo.setSpan(<span class=\"keyword\">new</span> AbsoluteSizeSpan(<span class=\"number\">100</span>),count-<span class=\"number\">3</span>, count,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">        spanableInfo.setSpan(<span class=\"keyword\">new</span> Listener(), count-<span class=\"number\">3</span>, count, Spanned.SPAN_MARK_MARK);</span><br><span class=\"line\">        spanableInfo.setSpan(colorSpan,count-<span class=\"number\">3</span>,count, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">        spanableInfo.setSpan(colorSpan1,count-<span class=\"number\">3</span>,count, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> spanableInfo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>视图树观察器还可用于在onCreate方法中获取View的宽高：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mHeaderViewHeight;</span><br><span class=\"line\"><span class=\"keyword\">private</span> View mHeaderView;</span><br><span class=\"line\">mHeaderView.getViewTreeObserver().addOnGlobalLayoutListener(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> OnGlobalLayoutListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onGlobalLayout</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            mHeaderViewHeight = mHeaderView.getHeight();</span><br><span class=\"line\">            mHeaderView.getViewTreeObserver()</span><br><span class=\"line\">                    .removeGlobalOnLayoutListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"ExpandableTextView\"><a href=\"#ExpandableTextView\" class=\"headerlink\" title=\"ExpandableTextView\"></a>ExpandableTextView</h2><blockquote>\n<p>Android提供的可折叠TextView</p>\n</blockquote>\n<p>以下代码来自于：</p>\n<p><a href=\"https://blog.csdn.net/u010356768/article/details/78114884\" target=\"_blank\" rel=\"noopener\">可折叠TextView控件使用：ExpandableTextView</a></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.ms.square.android.expandabletextview.ExpandableTextView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">xmlns:expandableTextView</span>=<span class=\"string\">\"http://schemas.android.com/apk/res-auto\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/expand_text_view\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">expandableTextView:maxCollapsedLines</span>=<span class=\"string\">\"4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">expandableTextView:animDuration</span>=<span class=\"string\">\"200\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">TextView</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@id/expandable_text\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_marginLeft</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_marginRight</span>=<span class=\"string\">\"10dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"16sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"#666666\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ImageButton</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:id</span>=<span class=\"string\">\"@id/expand_collapse\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:padding</span>=<span class=\"string\">\"16dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:layout_gravity</span>=<span class=\"string\">\"right|bottom\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:background</span>=<span class=\"string\">\"@android:color/transparent\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">com.ms.square.android.expandabletextview.ExpandableTextView</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExpandableTextView expTv1 = (ExpandableTextView) findViewById(R.id.expand_text_view);</span><br><span class=\"line\">expTv1.setText(getString(R.string.dummy_text1));</span><br></pre></td></tr></table></figure>\n<p><img src=\"/img/Android/探索TextView/ExpandableTextView.gif\" alt=\"ExpandableTextView演示\"></p>\n","categories":["Android"],"tags":[]},{"title":"Context","url":"https://grooters.github.io/2018/07/20/Context/","content":"<h1 id=\"android-Content-Context\"><a href=\"#android-Content-Context\" class=\"headerlink\" title=\"android.Content.Context\"></a>android.Content.Context</h1><p>Interface to global information about an application environment.</p>\n<p>This is an abstract class whose implementation is provided by the Android system.</p>\n<p>It allows access to application-specific resources and classes, as well as up-calls for application-level operations such as launching activities, broadcasting and receiving intents, etc.</p>\n<h2 id=\"Context分为以下几种类型：\"><a href=\"#Context分为以下几种类型：\" class=\"headerlink\" title=\"Context分为以下几种类型：\"></a>Context分为以下几种类型：</h2><ol>\n<li><p><strong>Application</strong>:</p>\n<p>Application在应用程序中是单例运行.可以在Activity或者Service中通过getApplication()方法获取,或者在任何继承Context的类中通过getApplicationContext()方法获取.不过无论是通过哪种方法获取Application的实例,Application的实例都是唯一的,相同的.</p>\n</li>\n<li><p><strong>Activity/Service</strong>:</p>\n<p>Activity/Service都继承自ContextWrapper,因为具有相同的Context API.每当Framework创建一个新的Activity或者Service实例的时候,同时会创建一个新的ContextImpl对象,ContextImpl就是最终处理所有Context API方法的内部对象.不同的Activity或者Service的Context都是不一样的.</p>\n</li>\n<li><p><strong>BroadcastReceiver</strong>:</p>\n<p>BroadcastReceiver本身不是Context,但是Framework在每次发布它监听的broadcast event事件的时候,会给它的onReceive函数中传递了一个Context对象.这个Context对象是ReceiverRestrictedContext对象的实例,但是有两个方法是无法使用的:registerReceiver()和bindService().每次BroadcastReceiver通过onReceive()函数收到一个broadcast evnent时,传递过来的Context对象都是一个新的实例.</p>\n</li>\n<li><p><strong>ContentProvider</strong>:</p>\n<p>ContentProvider本身不是Context,但是内部可以通过getContext()方法获取Context对象.如果ContentProvider的调用者和ContentProvider处于同一进程中,通过getContext()获取的就是当前进程唯一的Application Context.如果不在同一进程中,通过getContext()方法就会创建一个ContentProvider所在包的一个Context实例.</p>\n</li>\n</ol>\n<h2 id=\"Context功能表\"><a href=\"#Context功能表\" class=\"headerlink\" title=\"Context功能表\"></a>Context功能表</h2><p><img src=\"/img/Android/Context.jpg\" alt=\"Context功能表\"></p>\n<h1 id=\"Context导致的内存泄漏\"><a href=\"#Context导致的内存泄漏\" class=\"headerlink\" title=\"Context导致的内存泄漏\"></a>Context导致的内存泄漏</h1><p><em>eg：</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomManager &#123;</span><br><span class=\"line\">    private static CustomManager sInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static CustomManager getInstance(Context context) &#123;</span><br><span class=\"line\">        if (sInstance == null) &#123;</span><br><span class=\"line\">            sInstance = new CustomManager(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Context mContext;</span><br><span class=\"line\">    private CustomManager(Context context) &#123;</span><br><span class=\"line\">        mContext = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>按照以上代码会通过静态方法getInstance传入一个Context给该类，但该Context对应的activity可能会被销毁，但此时传过去的Context会依然存在，最终导致内存泄漏。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class CustomManager &#123;</span><br><span class=\"line\">    private static CustomManager sInstance;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static CustomManager getInstance(Context context) &#123;</span><br><span class=\"line\">        if (sInstance == null) &#123;</span><br><span class=\"line\">            // Always pass in the Application Context</span><br><span class=\"line\">            sInstance = new CustomManager(context.getApplicationContext());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return sInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private Context mContext;</span><br><span class=\"line\">    private CustomManager(Context context) &#123;</span><br><span class=\"line\">        mContext = context;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在上面的例子中,由于我们使用保存的是Application Context,这样我们就不需要关心Context是谁的实例了.因为Application生命周期是跟当前应用进程一致的,也就不存在内存泄露的风险了</p>\n</blockquote>\n<p>但由于每个Context实例都不是相同的,它们的功能也是不同的,例如Application Context就没法startActivity，参考上面的Context功能表.</p>\n","categories":["Android"],"tags":[]},{"title":"探索Fragment","url":"https://grooters.github.io/2018/07/20/探索Fragment/","content":"<p><strong><font size=\"4sp\">我们坚持AUF（Always Use Fragments）原则</font></strong></p>\n<h1 id=\"Fragemnt的生命周期\"><a href=\"#Fragemnt的生命周期\" class=\"headerlink\" title=\"Fragemnt的生命周期\"></a>Fragemnt的生命周期</h1><p><img src=\"/img/Android/Activity的生命周期/FragmentLife.jpg\" alt=\"Fragment的生命周期\"></p>\n<p><li> onAttach()</li></p>\n<p>当碎片和活动建立关联的时候调用。</p>\n<p><li> onCreateView()</li></p>\n<p>为碎片创建视图（加载布局）时调用。</p>\n<p><li> onActivityCreated()</li></p>\n<p>确保与碎片相关联的活动一定已经创建完毕的时候调用。</p>\n<p><li> onDestroyView()</li></p>\n<p>当与碎片关联的视图被移除的时候调用。</p>\n<p><li> onDetach()</li></p>\n<p>当碎片和活动解除关联的时候调用。</p>\n<h1 id=\"源码实现\"><a href=\"#源码实现\" class=\"headerlink\" title=\"源码实现\"></a>源码实现</h1><p><strong>静态加载：</strong></p>\n<p><em>主布局文件：</em><br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">fragment</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/first_fragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:name</span>=<span class=\"string\">\"io.github.grooters.FirstFragment\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"0dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_weight</span>=<span class=\"string\">\"1\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>android:name指明Fragment类</p>\n</blockquote>\n<p><em>FirstFragment.class：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_first, container, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>动态加载：</strong></p>\n<p><em>MainActivity，activity_main：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentManager manager=getSupportFragmentManager();</span><br><span class=\"line\">FragmentTransaction transaction=manager.beginTransaction();</span><br><span class=\"line\">FragmentOne fragmentOne=<span class=\"keyword\">new</span> FragmentOne();</span><br><span class=\"line\">transaction.replace(R.id.fragment_container,fragmentOne,<span class=\"string\">\"one\"</span>);</span><br><span class=\"line\">transaction.commit();</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;FrameLayout</span><br><span class=\"line\">    android:id=<span class=\"string\">\"@+id/fragment_container\"</span></span><br><span class=\"line\">    android:layout_marginTop=<span class=\"string\">\"10dp\"</span></span><br><span class=\"line\">    android:layout_width=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    android:layout_height=<span class=\"string\">\"match_parent\"</span>/&gt;</span><br></pre></td></tr></table></figure></p>\n<p><em>FragmentOne：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG=FragmentOne.class.getSimpleName();</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    View v=inflater.inflate(R.layout.fragment_one,container,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    Button button=v.findViewById(R.id.create_fragment);</span><br><span class=\"line\">    button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View view)</span> </span>&#123;</span><br><span class=\"line\">            FragmentManager manager=getFragmentManager();</span><br><span class=\"line\">            FragmentTransaction transaction=manager.beginTransaction();</span><br><span class=\"line\">            transaction.replace(R.id.fragment_container,<span class=\"keyword\">new</span> FragmentTwo(),<span class=\"string\">\"two\"</span>);</span><br><span class=\"line\">            transaction.addToBackStack(<span class=\"string\">\"one\"</span>);</span><br><span class=\"line\">            transaction.commit();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroyView();</span><br><span class=\"line\"></span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"onDestroyView\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\"></span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"onDestroy\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDetach();</span><br><span class=\"line\"></span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"onDetach\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>FragmentTwo：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG=FragmentTwo.class.getSimpleName();</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    View v=inflater.inflate(R.layout.fragment_two,container,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroyView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroyView();</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"onDestroyView\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"onDestroy\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetach</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onDetach();</span><br><span class=\"line\">    Log.i(TAG,<span class=\"string\">\"onDetach\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在FragmentOne中的transaction.addToBackStack(“one”)是将FragmentOne添加进回退栈中，在跳转到下一个Fragment时只会销毁FragmentView，即只执行DestroyView方法，当在下一个Fragment回退时会返回到该Fragment，若没有该行代码，在跳转到下一个Fragment时会销毁整个Fragment，即执行DestoryView，Destroy和Detach方法</p>\n</blockquote>\n<h1 id=\"Fragment与Activity之间的通信\"><a href=\"#Fragment与Activity之间的通信\" class=\"headerlink\" title=\"Fragment与Activity之间的通信\"></a>Fragment与Activity之间的通信</h1><p><strong>从属关系下的Fragment和Activity：</strong></p>\n<p>Activity拥有Fragment的引用，Fragment可调用getActivity获取Activity的上下文</p>\n<p><strong>要进行通信的Fragment不属于该Activity：</strong></p>\n<p>Activity可以通过FragmentManager对象中的findFragmentByTag或findFragmentById<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentTwo fragment=(FragmentTwo) getSupportFragmentManager().findFragmentByTag(&quot;two&quot;);</span><br><span class=\"line\">fragment.getInfo(&quot;give you ok?&quot;);</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>tag为之前replace或add传入的tag</p>\n</blockquote>\n<p>Fragment可以通过getActivity获取关联的Activity的上下文然后通过在该Activity中获取目标activity的相关方法，即通过关联Activity作为代理</p>\n<p><strong>通过setArgument传送数据：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//取出传过来的学生，再次封装到bundle中</span></span><br><span class=\"line\">bundle.putSerializable(<span class=\"string\">\"Student\"</span>,getIntent().getSerializableExtra(<span class=\"string\">\"Student\"</span>));</span><br><span class=\"line\"><span class=\"comment\">//通过setArguments方法存入该fragment</span></span><br><span class=\"line\">studentListFragment.setArguments(bundle);</span><br><span class=\"line\"><span class=\"keyword\">return</span> studentListFragment;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过getArguments方法取出对象，不能在构造方法取，因为实例化该Fragment时，还未setArgument</span></span><br><span class=\"line\">Student student=(Student) getArguments().getSerializable(<span class=\"string\">\"Student\"</span>);</span><br></pre></td></tr></table></figure>\n<h1 id=\"Fragment数据的保留\"><a href=\"#Fragment数据的保留\" class=\"headerlink\" title=\"Fragment数据的保留\"></a>Fragment数据的保留</h1><p>当遇到活动销毁时其托管的Fragment也会随之销毁，为了保留Fragment的数据，可以通过Fragment类中的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setRetainInstance(<span class=\"keyword\">true</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>当调用了该方法，传入的参数为true时，在Activity销毁时，会立即销毁Fragment绑定的视图，即调用onDestroyView方法（为了适应屏幕旋转后视图的改变）</p>\n</blockquote>\n<h1 id=\"Fragment的封装与解耦\"><a href=\"#Fragment的封装与解耦\" class=\"headerlink\" title=\"Fragment的封装与解耦\"></a>Fragment的封装与解耦</h1><p><em>BaseFragment.class：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    setContainer(R.layout.fragment_main);</span><br><span class=\"line\">    Fragment fragment=createFragment();</span><br><span class=\"line\">    FragmentManager fm=getFragmentManager();</span><br><span class=\"line\">    fm.beginTransaction().replace(R.id.frame_container,fragment).commit();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> Fragment <span class=\"title\">createFragment</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n","categories":["Android"],"tags":[]},{"title":"Dialog的使用","url":"https://grooters.github.io/2018/07/20/Dialog的使用/","content":"<p>以Fragment作为对话框载体：</p>\n<p><em>eg:</em></p>\n<p><em>LufyDialogFragment.class：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> android.app.Dialog;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.app.DialogFragment;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.DialogInterface;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AlertDialog;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.LayoutInflater;</span><br><span class=\"line\"><span class=\"keyword\">import</span> io.githubs.grooters.luffy.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LufyDialogFragment</span> <span class=\"keyword\">extends</span> <span class=\"title\">DialogFragment</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG=LufyDialogFragment.class.getSimpleName();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> InfoFromDialog infoFromDialog=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Dialog <span class=\"title\">onCreateDialog</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> AlertDialog.Builder(getActivity())</span><br><span class=\"line\">                .setTitle(R.string.alertDialog_title)</span><br><span class=\"line\">                .setView(LayoutInflater.from(getActivity()).inflate(R.layout.view_dialog,<span class=\"keyword\">null</span>))</span><br><span class=\"line\">                .setPositiveButton(android.R.string.ok, <span class=\"keyword\">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(DialogInterface dialogInterface, <span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">                        Log.i(TAG,<span class=\"string\">\"onClick\"</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(infoFromDialog!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                            Log.i(TAG,<span class=\"string\">\"infoFromDialog\"</span>);</span><br><span class=\"line\">                            infoFromDialog.getDialogInfo(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\">                .create();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InfoFromDialog</span></span>&#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getDialogInfo</span><span class=\"params\">(String a,String b)</span></span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setInfoFromDialog</span><span class=\"params\">(InfoFromDialog infoFromDialog)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.infoFromDialog=infoFromDialog;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>MainActivity,class：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FragmentManager manager=getFragmentManager();</span><br><span class=\"line\">LufyDialogFragment dialogFragment=<span class=\"keyword\">new</span> LufyDialogFragment();</span><br><span class=\"line\">dialogFragment.setInfoFromDialog(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">dialogFragment.show(manager,<span class=\"string\">\"I am FragmentDialog\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getDialogInfo</span><span class=\"params\">(String a,String b)</span> </span>&#123;</span><br><span class=\"line\">    Log.i(TAG,a+<span class=\"string\">\" \"</span>+b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><em>new AlertDialog.Builder(getActivity()).setView</em>方法用来自定义对话框视图</p>\n<blockquote>\n<p>InfoFromDialog是用于传递数据给MainActivity的接口，该接口在MainActivity中重写，故在MainActivity中可以通过接口方法参数拿到LufyDialogFragment中的数据，setInfoFromDialog方法用来给LufyDialogFragment提供MainActivity的上下文，使LufyDialogFragment能调用经MainActivity重写过的接口方法。</p>\n</blockquote>\n<p><em>注意：</em></p>\n<p><strong>作为对话框的布局视图，线性布局的match_parent是无效的，需要用相对布局</strong></p>\n","categories":[],"tags":[]},{"title":"探索PagerView","url":"https://grooters.github.io/2018/07/19/探索PagerView/","content":"<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><p>  在主activity布局添加android.support.v4.view.ViewPager控件</p>\n<p>  创建几个页面布局</p>\n<p>  将页面布局与Fragment绑定，将Fragment添加进容器</p>\n<p>  也可以不绑定，类似于以下PagerAdapter上编写方式，直接获取View</p>\n<p>  创建适配器，在容器中取出Fragment，然后将其显示在ViewPager中</p>\n<h1 id=\"适配器\"><a href=\"#适配器\" class=\"headerlink\" title=\"适配器\"></a>适配器</h1><h2 id=\"FragmentPagerAdapter\"><a href=\"#FragmentPagerAdapter\" class=\"headerlink\" title=\"FragmentPagerAdapter\"></a>FragmentPagerAdapter</h2><p>  该适配器会将生成的每一个Fragment保存在内存中，因此适用于PagerView页面不多的情况</p>\n<p>  <em>eg：</em></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewPagerAdapter</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentPagerAdapter</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ViewPagerAdapter</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(fm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pagers.size();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pagers.get(position);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  只需重写</p>\n<ol>\n<li><p>带FragmentManager参数的构造方法</p>\n</li>\n<li><p>getCount</p>\n</li>\n<li><p>getItem</p>\n</li>\n</ol>\n<p><strong>Fragment页面生命周期：</strong></p>\n<p><em>进入第一个页面：</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PagerFragmentOne: onAttach</span><br><span class=\"line\">    \t\t      onCreate</span><br><span class=\"line\">PagerFragmentTwo: onAttach</span><br><span class=\"line\">PagerFragmentTwo: onCreate</span><br><span class=\"line\">PagerFragmentOne: onCreateView</span><br><span class=\"line\">PagerFragmentOne: onActivityCreated</span><br><span class=\"line\">    \t\t      onStart</span><br><span class=\"line\">    \t \t     onResume</span><br><span class=\"line\">PagerFragmentTwo: onCreateView</span><br><span class=\"line\">PagerFragmentTwo: onActivityCreated</span><br><span class=\"line\">    \t\t      onStart</span><br><span class=\"line\">    \t\t      onResume</span><br></pre></td></tr></table></figure>\n<p><em>进入第二个页面：</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PagerFragmentThird: onAttach</span><br><span class=\"line\">                    onCreate</span><br><span class=\"line\">PagerFragmentThird: onCreateView</span><br><span class=\"line\">PagerFragmentThird: onActivityCreated</span><br><span class=\"line\">PagerFragmentThird: onStart</span><br><span class=\"line\">                    onResume</span><br></pre></td></tr></table></figure>\n<p><em>进入第三个页面：</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PagerFragmentOne: onPause</span><br><span class=\"line\">PagerFragmentOne: onStop</span><br><span class=\"line\">                  onDestroyView</span><br></pre></td></tr></table></figure>\n<p>由上可知ViewPagerAdapter会将左右两个页面预先加载（执行到<strong>onResume</strong>），当翻页到某页不在该页左右，则该页视图会被销毁（执行到<strong>onDestroyView</strong>），但不会销毁Fragment对象</p>\n<h2 id=\"FragmentStatePagerAdapter\"><a href=\"#FragmentStatePagerAdapter\" class=\"headerlink\" title=\"FragmentStatePagerAdapter\"></a>FragmentStatePagerAdapter</h2><p>  该适配器不会将Fragment保存在内存中，适合较多页面的PagerView</p>\n<p>  <em>eg:</em></p>\n  <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ViewPagerAdapterr</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">support</span>.<span class=\"title\">v4</span>.<span class=\"title\">app</span>.<span class=\"title\">FragmentStatePagerAdapter</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ViewPagerAdapterr</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(fm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pagers.size();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> pagers.get(position);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>  与FragmentPagerAdapter一样需要重写三个方法</p>\n<p>  <strong>Fragment的生命周期：</strong></p>\n<p>  与FragmentPagerAdapter不同之处在于当翻页到某页不在该页左右，则该页Fragment销毁（执行到<strong>onDetch</strong>）</p>\n<h2 id=\"ViewPagerAdapter\"><a href=\"#ViewPagerAdapter\" class=\"headerlink\" title=\"ViewPagerAdapter\"></a>ViewPagerAdapter</h2><p>  至少需要重写</p>\n<ol>\n<li><p>instantiateItem</p>\n</li>\n<li><p>isViewFromObjec</p>\n</li>\n<li><p>getCount</p>\n<p><em>eg:</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PagerAdapterr</span> <span class=\"keyword\">extends</span> <span class=\"title\">PagerAdapter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PagerAdapterr</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pagers.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">instantiateItem</span><span class=\"params\">(@NonNull ViewGroup container, <span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">        container.addView(views.get(position));</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"instantiateItem\"</span>+position);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> views.get(position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isViewFromObject</span><span class=\"params\">(@NonNull View view, @NonNull Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> view==object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">destroyItem</span><span class=\"params\">(@NonNull ViewGroup container, <span class=\"keyword\">int</span> position, @NonNull Object object)</span> </span>&#123;</span><br><span class=\"line\">        container.removeView(views.get(position));</span><br><span class=\"line\">        Log.i(TAG,<span class=\"string\">\"destroyItem\"</span>+position);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>instantiateItem创建显示的视图</p>\n<p>isViewFromObject判断当前视图是否与object对象相同</p>\n<p>destroyItem销毁指定视图</p>\n<p><em>生命周期：</em></p>\n<p><em>位于第一页：</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewPagerActivity: instantiateItem0</span><br><span class=\"line\">                      instantiateItem1</span><br></pre></td></tr></table></figure>\n<p><em>滑向第二页：</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewPagerActivity: instantiateItem2</span><br></pre></td></tr></table></figure>\n<p><em>滑向第三页：</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ViewPagerActivity: destroyItem0</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"ViewPager的优化和封装\"><a href=\"#ViewPager的优化和封装\" class=\"headerlink\" title=\"ViewPager的优化和封装\"></a>ViewPager的优化和封装</h1><blockquote>\n<p>见<strong>lller库的使用</strong>文章中的<strong>ViewPageRer</strong>的使用</p>\n</blockquote>\n<h1 id=\"疑问\"><a href=\"#疑问\" class=\"headerlink\" title=\"疑问\"></a>疑问</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Fragment&gt; fragments=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">fragments.add(<span class=\"keyword\">new</span> FirstFragment());</span><br><span class=\"line\">fragments.add(<span class=\"keyword\">new</span> SecondFragment());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setPages</span><span class=\"params\">(List&lt;Fragment&gt; fragments, List&lt;View&gt; views)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.fragments=fragments;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.views=views;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FragmentPagerAdapterr</span> <span class=\"keyword\">extends</span> <span class=\"title\">FragmentPagerAdapter</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FragmentPagerAdapterr</span><span class=\"params\">(FragmentManager fm)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">super</span>(fm);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getCount</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">      Log.i(TAG,<span class=\"string\">\"fragments.size()：\"</span>+fragments.size());</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fragments.size();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> Fragment <span class=\"title\">getItem</span><span class=\"params\">(<span class=\"keyword\">int</span> position)</span> </span>&#123;</span><br><span class=\"line\">      Log.i(TAG,<span class=\"string\">\"position：\"</span>+position);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fragments.get(position);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//FirstFragment.class</span></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateView</span><span class=\"params\">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">  Log.i(TAG,<span class=\"string\">\"onCreateView\"</span>);</span><br><span class=\"line\">  <span class=\"comment\">//若传入container会出错</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> inflater.inflate(R.layout.fragment_first,<span class=\"keyword\">null</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>07-31 15:00:13.732 13036-13036/? E/AndroidRuntime:     at android.view.ViewGroup.jumpDrawablesToCurrentState(ViewGroup.java:6505)<br>        at android.view.ViewGroup.jumpDrawablesToCurrentState(ViewGroup.java:6505)<br>        at android.view.ViewGroup.jumpDrawablesToCurrentState(ViewGroup.java:6505)<br>        at android.view.ViewGroup.jumpDrawablesToCurrentState(ViewGroup.java:6505)<br>        at android.view.ViewGroup.jumpDrawablesToCurrentState(ViewGroup.java:6505)<br>        at android.view.ViewGroup.jumpDrawablesToCurrentState(ViewGroup.java:6505)<br>        …………..</p>\n</blockquote>\n","categories":["Android"],"tags":[]},{"title":"动态规划法","url":"https://grooters.github.io/2018/07/01/动态规划法/","content":"<h1 id=\"基本思想\"><a href=\"#基本思想\" class=\"headerlink\" title=\"基本思想\"></a>基本思想</h1><p>利用问题的最优子结构构造动态函数，通过递推计算得到问题的解，再通过回溯得到问题解的具体形式</p>\n<p>特征：<br>（1）最优子结构<br>（2）子问题重叠</p>\n<p>基本步骤：<br>（1）寻找递推式（核心）<br>（2）设置初始解<br>（3）填表，求解问题<br>（4）回溯，得到问题解的具体形式</p>\n<h1 id=\"数塔问题\"><a href=\"#数塔问题\" class=\"headerlink\" title=\"数塔问题\"></a>数塔问题</h1><p><img src=\"/img/数据结构与算法/动态规划法/数塔的存储方式.PNG\" alt=\"树塔的存储方式\"></p>\n<p><img src=\"/img/数据结构与算法/动态规划法/数塔问题解题过程1.PNG\" alt=\"数塔问题解题过程\"></p>\n<p><img src=\"/img/数据结构与算法/动态规划法/数塔问题解题过程2.PNG\" alt=\"数塔问题解题过程\"></p>\n<p><img src=\"/img/数据结构与算法/动态规划法/数塔问题解题过程3.PNG\" alt=\"数塔问题解题过程\"></p>\n<h1 id=\"多段图最短路径问题\"><a href=\"#多段图最短路径问题\" class=\"headerlink\" title=\"多段图最短路径问题\"></a>多段图最短路径问题</h1><p><strong>递推式为：</strong></p>\n<blockquote>\n<p>d(0,j) = min ( d(0,s) + Cs,j )</p>\n</blockquote>\n<p><img src=\"/img/数据结构与算法/动态规划法/多段图最短路径问题.PNG\" alt=\"多段图最短路径问题\"></p>\n<p><em>解题思路：</em></p>\n<p>d(0,4) = min(d(0,1) + C1,4, d(0,2) + C2,4) = 8<br>d(0,5) = min(d(0,1) + C1,5, d(0,2) + C2,5,   d(0,3) + C3,5) = 7<br>d(0,6) = min(d(0,2) + C2,6, d(0,3) + C3,6) = 10</p>\n<p>d(0,7) = 13<br>d(0,8) = min(d(0,4) + C4,8, d(0,5) + C5,8,d(0,6) + C6,8) = 13</p>\n<p>d(0,9) = min(d(0,7) + c7,9, d(0,8) + c8,9) = 16</p>\n<p><strong>故最短路径为：16</strong></p>\n<p><em>时间复杂度：</em><br>O(m+k)，其中，m为图的边数，k为图的段数</p>\n<h1 id=\"最长递增子序列\"><a href=\"#最长递增子序列\" class=\"headerlink\" title=\"最长递增子序列\"></a>最长递增子序列</h1><p><em>递推式：</em></p>\n<p><img src=\"/img/数据结构与算法/动态规划法/最长递增子序列递推式.PNG\" alt=\"递推式\"></p>\n<p><img src=\"/img/数据结构与算法/动态规划法/最长递增子序列解题思路.PNG\" alt=\"最长递增子序列解题思路\"></p>\n<p><em>时间复杂度：</em></p>\n<p><strong>O(n^2)</strong></p>\n<h1 id=\"0-1背包问题\"><a href=\"#0-1背包问题\" class=\"headerlink\" title=\"0/1背包问题\"></a>0/1背包问题</h1><p><em>考虑5个物品，重量分别是{2, 2, 6, 5, 4}，价值分别为{6, 3, 5, 4, 6}，背包容量为10</em></p>\n<p><em>初始值：</em><br>1、不往背包里放物品，即C(0, <em>)，背包最大价值为0；<br>2、背包不能装任何东西，即C(</em>, 0)，背包最大价值也是0。</p>\n<p><img src=\"/img/数据结构与算法/动态规划法/01背包问题解题过程.PNG\" alt=\"0/1背包问题解题过程\"></p>\n<p>V[5,10]&gt;V[4,10] =&gt; 第五个物品装进背包，背包容量减到6</p>\n<p>V[4,6]=V[3,6]=V[2,6] =&gt; 不装进背包，向上回溯</p>\n<p>V[2,6]&gt;V[1,6] =&gt; 第2个物品装入背包，背包容量减到4</p>\n<p>V[1,4]&gt;V[0,4] =&gt; 第1个物品装入背包，背包容量减到2</p>\n<p><em>时间复杂度：</em></p>\n<p><strong>O(n×C)</strong>，n为物品数，C为背包大小</p>\n","categories":["数据结构与算法"],"tags":[]},{"title":"分支限界算法","url":"https://grooters.github.io/2018/07/01/分支限界法/","content":"<h1 id=\"算法基本思想\"><a href=\"#算法基本思想\" class=\"headerlink\" title=\"算法基本思想\"></a>算法基本思想</h1><p>按<strong>广度优先</strong>的顺序搜索解空间树，若结点的限界值不在限界范围内则实行剪枝，否则压入待处理结点表。</p>\n<p>基本步骤：<br>1) 确定问题的上下界。通常采用贪心算法得到上界；用理想状态分析得到下界。<br>2) 计算部分解的下界。即已确定部分解的情况下，估算能得到的最优解，通常分两部分计算：已确定部分直接计算；未确定部分采用理想状态计算。<br>3) 按广度优先的顺序搜索解空间树，每次从PT表中选择最优结点进行展开。每搜索一个结点，计算该结点的下界，若超出已确定的上下界，则实行剪枝；否则压入PT表等待展开。</p>\n<h1 id=\"多段图最短路径问题\"><a href=\"#多段图最短路径问题\" class=\"headerlink\" title=\"多段图最短路径问题\"></a>多段图最短路径问题</h1><p><em>基本思想：</em></p>\n<p><font size=\"4sp\"><strong>确定问题的界</strong></font></p>\n<p>采用贪心算法得到问题的上界；<br>每段最短边之和作为下界</p>\n<p><font size=\"4sp\"><strong>部分解的下界</strong></font></p>\n<p>L1部分为已确定部分路径长度；</p>\n<p>L2由两部分组成：<br>  1) 尾结点往下走一步的最短边<br>  2) 除已确定结点外，取各段最短边之和</p>\n<p><em>解题思路：</em></p>\n<p><img src=\"/img/数据结构与算法/分支限界法/多段图最小路径问题.PNG\" alt=\"多段图最小路径问题\"></p>\n<p>0 -&gt; 1 = 20 =》 4（已确定） + 8（下一步最短） + (5 + 3)（各段最短边） = 20</p>\n<h1 id=\"0-1背包问题\"><a href=\"#0-1背包问题\" class=\"headerlink\" title=\"0/1背包问题\"></a>0/1背包问题</h1><p><em>基本思想：</em></p>\n<p><font size=\"4sp\"><strong>确定问题的界</strong></font></p>\n<p>采用贪心算法单位价值最大优先策略得到问题的下界；<br>剩余空间填满未确定物品中单位价值最高的物品所得到的价值作为问题上界</p>\n<p><font size=\"4sp\"><strong>部分解的下界</strong></font></p>\n<p>L1部分为已确定放进包里的物品价值；<br>L2部分为剩余空间填满未确定物品中单位价值最高的物品所得到的价值</p>\n<p><img src=\"/img/数据结构与算法/分支限界法/01背包问题求上界.PNG\" alt=\"01背包问题求上界\"></p>\n<p><img src=\"/img/数据结构与算法/分支限界法/01背包问题求下界.PNG\" alt=\"01背包问题求下界\"></p>\n<p><img src=\"/img/数据结构与算法/分支限界法/01背包问题解题思路.PNG\" alt=\"01背包问题解题思路\"></p>\n<p>第一个结点什么都不放，ub = 0 +  (10 - 0) * V1+1/Wi+1 (10) = 100</p>\n<p>第二个结点放入物品1，ub = 40 + (10 - 4) * 6 = 76</p>\n<h1 id=\"任务分配问题\"><a href=\"#任务分配问题\" class=\"headerlink\" title=\"任务分配问题\"></a>任务分配问题</h1><p><img src=\"/img/数据结构与算法/分支限界法/任务分配问题.PNG\" alt=\"任务分配问题\"></p>\n<p>贪心法：2 + 6 + 1 + 4 = 14<br>最优解：2 + 3 + 1+  4 = 10</p>\n<p>故范围为：[10,14]</p>\n","categories":["数据结构与算法"],"tags":[]},{"title":"计算机网络概述","url":"https://grooters.github.io/2018/06/28/计算机网络概述/","content":"<p>计算机网络提供的两个主要功能为：<strong>连通性</strong>和<strong>共享</strong></p>\n<p>应用层的PDU 称为数据；<br>传输层的PDU 称为数据段；<br>网络层的PDU 称为数据包；<br>网络接口层的PDU 称为帧；</p>\n<ol start=\"27\">\n<li>计算机网络主要有七个常用的性能指标：速率，带宽，吞吐量，时延，时延带宽积，往返时间，利用率</li>\n</ol>\n","categories":["计算机网络"],"tags":[]},{"title":"回溯算法","url":"https://grooters.github.io/2018/06/28/回溯法/","content":"<h1 id=\"八皇后问题\"><a href=\"#八皇后问题\" class=\"headerlink\" title=\"八皇后问题\"></a>八皇后问题</h1><p><em>解题思路：</em></p>\n<p><img src=\"/img/数据结构与算法/回溯法/八皇后问题.PNG\" alt=\"八皇后问题\"></p>\n<p><em>程序实现：</em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Place</span><span class=\"params\">(<span class=\"keyword\">int</span> c[], <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c[k] == c[i] || <span class=\"built_in\">abs</span>(c[i] - c[k]) == <span class=\"built_in\">abs</span>(i - k)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Queen</span><span class=\"params\">(<span class=\"keyword\">int</span> c[], <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (k &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t++c[k];</span><br><span class=\"line\">    <span class=\"comment\">//若不满足要求就列加1</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (c[k] &lt; n&amp;&amp;Place(c, k)) &#123;</span><br><span class=\"line\">\t\t\t++c[k];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//完成</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (c[k] &lt; n&amp;&amp;k == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; c[i] + <span class=\"number\">1</span> &lt;&lt; <span class=\"string\">\" \"</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//还有未摆放皇后的行</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c[k] &lt; n&amp;&amp;k &lt; n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t++k;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//都尝试摆放了但都没完成</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">cout</span> &lt;&lt; k &lt;&lt;<span class=\"string\">\" \"</span>&lt;&lt; c[k] &lt;&lt; <span class=\"string\">\" 回溯\"</span> &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//重置c[k]然后回溯</span></span><br><span class=\"line\">\t\t\tc[k--] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c[<span class=\"number\">5</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> n = <span class=\"number\">5</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\tc[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tQueen(c, n);</span><br><span class=\"line\">\tsystem(<span class=\"string\">\"pause\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>2 4 回溯<br>3 4 回溯<br>2 4 回溯<br>1 4 回溯<br>2 4 1 3<br>3 4 回溯<br>2 4 回溯<br>1 4 回溯<br>3 1 4 2<br>3 4 回溯<br>2 4 回溯<br>1 4 回溯<br>3 4 回溯<br>2 4 回溯<br>2 4 回溯<br>1 4 回溯<br>0 4 回溯</p>\n</blockquote>\n<p><strong>k和c[k]分别代表第k行和第c[k]列</strong></p>\n<h1 id=\"图着色问题\"><a href=\"#图着色问题\" class=\"headerlink\" title=\"图着色问题\"></a>图着色问题</h1><p><img src=\"/img/数据结构与算法/回溯法/图着色问题.PNG\" alt=\"图着色问题\"></p>\n<p><img src=\"/img/数据结构与算法/回溯法/图着色问题解题思路.PNG\" alt=\"图着色问题解题思路\"></p>\n<p><em>时间复杂度：</em><br><strong>O(mn)</strong>，m为颜色数；n为结点数</p>\n<h1 id=\"哈密顿回路问题\"><a href=\"#哈密顿回路问题\" class=\"headerlink\" title=\"哈密顿回路问题\"></a>哈密顿回路问题</h1><p><img src=\"/img/数据结构与算法/回溯法/哈密顿回路问题.PNG\" alt=\"哈密顿回路问题\"></p>\n<p><img src=\"/img/数据结构与算法/回溯法/哈密顿回路解题思路.PNG\" alt=\"哈密顿回路解题思路\"></p>\n","categories":["数据结构与算法"],"tags":[]},{"title":"串匹配","url":"https://grooters.github.io/2018/06/20/串匹配/","content":"<h1 id=\"BF算法\"><a href=\"#BF算法\" class=\"headerlink\" title=\"BF算法\"></a>BF算法</h1><p><strong>基本思想：</strong></p>\n<p>模式串字符依次与主串信息比较。匹配不成功时，模式串后移一个字符，并重头开始与主串比较</p>\n<p><em>如：S:  cabcac     T:cac</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c a b c a c</span><br><span class=\"line\">c a c</span><br><span class=\"line\">  c a c</span><br><span class=\"line\">    c a c</span><br><span class=\"line\">      c a c</span><br></pre></td></tr></table></figure>\n<p><strong>时间复杂度：</strong></p>\n<p>O(mn)（m，n分别为主串和模式串的长度）</p>\n<h1 id=\"KMP算法\"><a href=\"#KMP算法\" class=\"headerlink\" title=\"KMP算法\"></a>KMP算法</h1><p><strong>基本思想：</strong></p>\n<p>模式串字符依次与主串信息比较。匹配不成功时，模式串根据next数组跳转，并在不匹配处开始与主串比较</p>\n<p><em>如：设主串S=“ababaababcb”,模式串T=”ababc”</em></p>\n<p>i，j分别作为主串的下标和模式串下标</p>\n<p><img src=\"/img/数据结构与算法/kmp算法next的求法.PNG\" alt=\"kmp算法next的求法\"></p>\n<p><img src=\"/img/数据结构与算法/KMP执行过程.PNG\" alt=\"KMP执行过程\"></p>\n<p><strong>时间复杂度：</strong></p>\n<p>O(m+n)（m，n分别为主串和模式串的长度）</p>\n","categories":["数据结构与算法"],"tags":[]},{"title":"分治和减治算法","url":"https://grooters.github.io/2018/06/16/分治和减治法/","content":"<h1 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h1><h2 id=\"最大子段和\"><a href=\"#最大子段和\" class=\"headerlink\" title=\"最大子段和\"></a>最大子段和</h2><p><em>基本思想：</em></p>\n<p>1) 划分：将序列划在长度相等的两段<br>2) 求解子问题（考虑跨子段）：<br>   2.1)将子段分成左半段和右半段<br>   2.2)左半段从中心点处往左搜索，得到最大左子段和Suml<br>   2.3)右半段从中心点处往右搜索，得到最大右子段和Sumr<br>   2.4)将两个半段的子段和加起来，MaxSum=Suml+Sumr</p>\n<p><em>如：</em><br>求-20，11，-4，13，-5，-22的最大子段和</p>\n<p><em>解题思路：</em></p>\n<p><img src=\"/img/数据结构与算法/分治法求最大子段和.png\" alt=\"分治法求最大子段和\"></p>\n<h2 id=\"其它基于分治法的算法有：\"><a href=\"#其它基于分治法的算法有：\" class=\"headerlink\" title=\"其它基于分治法的算法有：\"></a>其它基于分治法的算法有：</h2><p><strong>归并排序</strong></p>\n<p><strong>快速排序</strong></p>\n<h1 id=\"减治法\"><a href=\"#减治法\" class=\"headerlink\" title=\"减治法\"></a>减治法</h1><p><strong>基本思想：</strong><br>原问题的解可以通过规模更小的子问题的解得到，迭代缩减问题的规模，直到最后将子问题求解。</p>\n<h2 id=\"中位数问题\"><a href=\"#中位数问题\" class=\"headerlink\" title=\"中位数问题\"></a>中位数问题</h2><p><em>如：S1={11,13,15,17,19}， S2={2,4,6,8,20}，求S1∪S2={2,4,6,8,11,13,15,17,19,20}的中位数</em></p>\n<p><img src=\"/img/数据结构与算法/中位数问题基本思想.PNG\" alt=\"中位数问题基本思想\"></p>\n<p><img src=\"/img/数据结构与算法/中位数问题解题思路.PNG\" alt=\"中位数问题解题思路\"></p>\n<p>在进行到第7步时有一个特殊情况，就是去除16前的元素却去除了16本身</p>\n<h2 id=\"折半查找\"><a href=\"#折半查找\" class=\"headerlink\" title=\"折半查找\"></a>折半查找</h2><p><strong>首先需要保证为升序序列</strong></p>\n<p><strong>基本思想：</strong></p>\n<p>将待查找的数k与序列的中位数mid进行比较：<br>① 若k = rmid，返回结果；<br>② 若k &lt; rmid，表明k在rmid往前的半段子序列中，下一步在前半段中寻找k；<br>③ 若k &gt; rmid，表明k在rmid往后的半段子序列中，下一步在后半段中寻找k</p>\n<p><strong>程序实现：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BinSearchch</span><span class=\"params\">(<span class=\"keyword\">int</span> r[],<span class=\"keyword\">int</span> n,<span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>, high = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (low &lt;= high) &#123;</span><br><span class=\"line\">\t\tmid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (k &lt; r[mid]) &#123;</span><br><span class=\"line\">\t\t\thigh = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; r[mid]) &#123;</span><br><span class=\"line\">\t\t\tlow = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>时间复杂度：</strong></p>\n<p><em>最好情况：</em>O(1)，即中值即为待查找数</p>\n<p><em>最坏情况：</em>O(log2n)</p>\n<p><em>平均情况：</em>O(log2n)</p>\n<h2 id=\"选择问题\"><a href=\"#选择问题\" class=\"headerlink\" title=\"选择问题\"></a>选择问题</h2><p>即寻找T的第k小元素</p>\n<p><strong>基本思想：</strong></p>\n<ol>\n<li>采用快速排序中的划分操作将无序序列分成两个子列，其中，轴值左侧子序列均比轴值小，轴值右侧子序列均比轴值大</li>\n<li>划分后，轴值所在的位置i实质上是轴值在序列按升序排序后所在的位置，即第i小</li>\n<li>比较k和i：<br> ① k=i, 表示ri即为要查找的数，返回；<br> ② k&lt;i, 表明要查的数比ri小，则递归在左侧子序列找第k小；<br> ③ k&gt;i, 表明要查的数比ri大，则递归找右侧子序列找第k小。</li>\n</ol>\n<p><img src=\"/img/数据结构与算法/分治和减治法/选择问题解题过程.PNG\" alt=\"选择问题解题过程\"></p>\n<p><strong>时间复杂度：</strong></p>\n<p><em>最好情况：</em>O(n)，即中值即为待查找数</p>\n<p><em>最坏情况：</em>O(n^2)</p>\n<p><em>平均情况：</em>O(n)</p>\n<h2 id=\"其它运用了减治法的问题\"><a href=\"#其它运用了减治法的问题\" class=\"headerlink\" title=\"其它运用了减治法的问题\"></a>其它运用了减治法的问题</h2><p><strong>插入排序</strong></p>\n<p><strong>堆排序</strong></p>\n","categories":["数据结构与算法"],"tags":[]},{"title":"算法基础","url":"https://grooters.github.io/2018/06/14/算法基础/","content":"<h1 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h1><p><strong>算法分析：</strong><br>对计算机运行某算法时所需的时间和存储资源上进行分析，包括时间复杂度分析和空间复杂度分析</p>\n<p><strong>基本语句：</strong><br>执行次数与整个算法的执行次数成正比——贡献最大，最重要的语句</p>\n<p><strong>数据规模：</strong><br>表征算法处理数据的大小，通常为输入数据的大小或总循环次数</p>\n<p><strong>时间复杂度：</strong><br>基本语句执行的次数，通常用T(n)表示</p>\n<p><strong>渐近时间复杂度：</strong><br> 时间复杂度T(n)的阶，用O表示，如T(n)=4+n^2 :: O(n^2)</p>\n<p>获取T(n)中最高阶项 的方法，即根据T(n)求O的方法：</p>\n<ol>\n<li>将T(n)中与n有关的项互相相除</li>\n<li>求该除式关于n-&gt;∞时的极限（洛必达法则），令f(n)/g(n)<br>a. 若极限位0，则f(n)&lt;g(n)<br>b. 若极限为∞，则f(n)&gt;g(n)<br>c.若极限位1，则f(n)和g(n)等价</li>\n</ol>\n<h1 id=\"递推算法时间复杂度的求法\"><a href=\"#递推算法时间复杂度的求法\" class=\"headerlink\" title=\"递推算法时间复杂度的求法\"></a>递推算法时间复杂度的求法</h1><p><em>如：T(n)=2T(n-1)+1,T(1)=3</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T(n)=2T(n-1)+1</span><br><span class=\"line\">      =2[2T(n-1-1)+1]+1  &lt;=  T(n-1)=2[T(n-1-1)+1]</span><br><span class=\"line\">        =2^2T(n-2)+2</span><br><span class=\"line\">          =2^2[2T(n-2-1)+1]+2</span><br><span class=\"line\">            =2^3T(n-3)+3</span><br><span class=\"line\">              =......</span><br><span class=\"line\">                =2^(n-2)[2T(n-(n-2)-1)+1]+n-2</span><br><span class=\"line\">                  =2^(n-1)T(1)+n-1</span><br><span class=\"line\">                    =3·2n-1+n-1=(3/2)·2^n+n-1</span><br><span class=\"line\">                      =O(2^n)</span><br></pre></td></tr></table></figure>\n<p><strong><font size=\"4sp\">公式法</font></strong></p>\n<p><img src=\"/img/数据结构与算法/递推算法分析之公式法.PNG\" alt=\"递推算法分析之公式法\"></p>\n","categories":["数据结构与算法"],"tags":[]},{"title":"排序算法","url":"https://grooters.github.io/2018/06/14/排序算法/","content":"<h1 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h1><p><strong>基本思想</strong></p>\n<p>1) 将序列划分成有序区（左边）和无序区（右边）<br>2) 初始时，有序区为空，无序区为序列全部<br>3) 每一次选择出无序区中最小元素，与无序区中第1个元素交换，成为有序区的最后一个元素</p>\n<p><em>如：对数据48,70,8,30,23,11,15进行选择排序，写出每趟的结果</em></p>\n<p><img src=\"/img/数据结构与算法/选择排序.PNG\" alt=\"选择排序\"></p>\n<p><strong>时间复杂度：</strong><br><strong>O(n2)</strong></p>\n<h1 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h1><p><strong>基本思想</strong></p>\n<p>1) 将序列划分成有序区（右边）和无序区（左边）<br>2) 初始时，有序区为空，无序区为序列全部<br>3) 每一次“起泡”相邻元素依次两两比较，将较大/小者交换到后面，成为有序区的第一个元素</p>\n<p><em>如：对48，70，8，30，23，11，15进行冒泡排序</em></p>\n<p><img src=\"/img/数据结构与算法/冒泡排序.PNG\" alt=\"冒泡排序\"><br>第二趟：<br>8,30,23,11,15,（48, 70）<br>第三趟：<br>8,23,11,15,（30,48, 70）<br>第四躺：<br>8,11,15,（23,30,48, 70）<br>第五躺：<br>8,11,（15,23,30,48, 70）<br>第六趟：<br>8,（11,15,23,30,48, 70）</p>\n<p><strong>时间复杂度：</strong><br>最好O(n)；最坏O(n^2)；平均O(n^2)</p>\n<h1 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h1><p><strong>基本思想：</strong><br>将序列划分成两个长度相等的子序列，分别进行排序，最后将两个有序序列合并</p>\n<p><em>如：对数据48,70,8,30,23,11,15,28进行归并排序</em></p>\n<p><img src=\"/img/数据结构与算法/归并排序例题.PNG\" alt=\"归并排序例题\"></p>\n<p><strong>时间复杂度：</strong><br>O(nlog2n)</p>\n<h1 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h1><p><strong>基本思想：</strong></p>\n<p>1) 划分：选定一个数做为轴值，把序列分成比轴值小（左边）和比轴值大（右边）两个子序列<br>2) 求解子问题：分别对两个子序列进行轴值划分</p>\n<p><strong>划分步骤：</strong></p>\n<p>1) 选择区域内第一个元素为轴值；<br>2) 设立i，j分别指向区域第一和最后一个元素；<br>3) 重复以下步骤：</p>\n<ol>\n<li>j往前走，寻找比轴值小的元素与轴值交换</li>\n<li>i住后走，寻找比轴值大的元素与轴值交换</li>\n</ol>\n<p><em>如：快速排序 34,20,71,26,23,9,44,35，求解思路为：</em></p>\n<p><img src=\"/img/数据结构与算法/快速排序过程.PNG\" alt=\"快速排序过程\"></p>\n<p><strong>时间复杂度：</strong><br>最好（子序列等长）O(nlog2n)、最坏（基本有序）O(n^2)、平均O(nlog2n)</p>\n<p><strong>快速排序的特点为：</strong></p>\n<ol>\n<li>快速排序对已有序（不管是正序还是逆序）的序列，效率最差。</li>\n<li>每次划分实质上是找出轴值在排序后的位置，即每次划分是对轴值进行排序</li>\n<li>假如某次划分后，轴值所在位置为i，实质上表明该轴值在序列中是第i小的值（注意，这里说的序列是参与划分的序列），因此可借助快速排序的划分操作实现“求序列第i小数”</li>\n</ol>\n<h1 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h1><p><strong>基本思想：</strong></p>\n<p>1) 将序列划分为有序区和无序区。有序区为序列第一个元素，无序区为剩下的元素。<br>2) 每一次操作都将无序区的第一个元素ri与有序区里从第一个元素开始比较，直到找到一个元素rj比ri大；如果找不到元素比ri大，则ri要插入的位置为序列尾部<br>3) 将ri插到rj前面，调整有序区中其它元素位置</p>\n<p><em>如：对数据34,20,71,26,23,9,44进行插入排序</em></p>\n<p><img src=\"/img/数据结构与算法/插入排序例题.PNG\" alt=\"插入排序例题\"></p>\n<p><strong>时间复杂度：</strong></p>\n<p>最好（基本有序）：O(n)，最坏（逆序）：O(n^2)，一般情况O(n^2)</p>\n<h1 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h1><p><strong>基本思想：</strong></p>\n<p>1) 根据待排序序列，建立堆。升序排序采用大根堆；降底排序采用小根堆<br>2) 堆顶元素为最大值（大根堆）或最小值（小根堆），将该元素与最后一个元素交换并移入有序区<br>3) 调整无序区为一个堆结构<br>4) 重复（2）和（3）直到无序区剩一个元素</p>\n<ol>\n<li>构建初始堆</li>\n<li>调整为大根堆（升序）或小根堆（降序）</li>\n<li>将堆顶值与从尾部开始的值交换，每交换一次就需要调整一次堆</li>\n</ol>\n<p><em>如：4，6，8，5，9</em></p>\n<p><img src=\"/img/数据结构与算法/堆排序解题思路.PNG\" alt=\"堆排序解题思路\"></p>\n<p><img src=\"/img/数据结构与算法/排序算法时间复杂度.PNG\" alt=\"排序算法时间复杂度\"></p>\n","categories":["数据结构与算法"],"tags":[]},{"title":"类型信息","url":"https://grooters.github.io/2018/06/03/类型信息/","content":"<p><strong>运行时类型信息使得你可以在程序运行时发现和使用类型信息</strong></p>\n<p><em>方法包括：</em></p>\n<p><strong><li>传统的RTTI(Run-Time Type Identification)</li></strong></p>\n<p>在运行时，识别一个对象的类型。<br><br></p>\n<p><strong><li>反射机制</li></strong></p>\n<p>可以获取和使用所有的方法和属性信息</p>\n<p><em>获取所有方法，构造器和属性：</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cl = Class.forName(<span class=\"string\">\"Reflect.BeReflect\"</span>);</span><br><span class=\"line\">Constructor constructor=cl.getConstructor();</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(constructor.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">Object obj = constructor.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">Method[] methods=cl.getMethods();</span><br><span class=\"line\"><span class=\"comment\">//包括私有方法</span></span><br><span class=\"line\">Method[] priMethods=cl.getDeclaredMethods();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Method method:methods)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(method.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Method method:priMethods)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(method.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Field[] fields=cl.getDeclaredFields();</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Field f:fields)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//param：被调用类的实例</span></span><br><span class=\"line\">    System.out.println(f.get(obj));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>调用方法和属性：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//param：方法名，参数类型</span></span><br><span class=\"line\">Method m=cl.getDeclaredMethod(<span class=\"string\">\"setA\"</span>,<span class=\"keyword\">int</span>.class);</span><br><span class=\"line\">Object[] args=<span class=\"keyword\">new</span> Object[]&#123;<span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//设置为可操作私有方法</span></span><br><span class=\"line\">method.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//param：被调用类实例，要传的参数值</span></span><br><span class=\"line\">method.invoke(obj,args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//param：属性名</span></span><br><span class=\"line\">Field f=cl.getDeclaredField(<span class=\"string\">\"a\"</span>);</span><br><span class=\"line\">f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//param：被调用类的实例，要设置的属性值</span></span><br><span class=\"line\">f.set(obj,<span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure></p>\n<p><br></p>\n<p><em>面向对象的最基本目的是：</em><br><strong>让代码只操纵对基类的引用，多态也是面向对象编程的基本目标</strong></p>\n<h1 id=\"Class对象\"><a href=\"#Class对象\" class=\"headerlink\" title=\"Class对象\"></a>Class对象</h1><p><strong>Java使用Class对象来执行其RTTI</strong></p>\n<p>每当编写并且编译一个新类就会产生一个<em>Class对象</em>，而为了生成这个类的对象，Java虚拟机(JVM)将会使用被称为<strong>类加载器</strong>的子系统。</p>\n<p>类加载器子系统包含一条类加载器链，但只有一个<em>原生类加载器</em>即可信类，包括java API类，</p>\n<p><em>类从加载到虚拟机到卸载的生命周期为：</em><br><img src=\"/img/Java/Class的生命周期.png\" alt=\"类从加载到虚拟机到卸载的生命周期\"></p>\n<p>解析阶段也可能会在初始化后才执行，以为<em>动态绑定</em>提供可能。</p>\n<p><strong><li>动态绑定</li></strong></p>\n<p>在程序运行时根据具体对象的类型进行绑定，动态绑定的过程为：</p>\n<ol>\n<li>JVM提供对象的实际类型的方法表</li>\n<li>虚拟机搜索方法签名</li>\n<li>调用方法</li>\n</ol>\n<p><strong><li>静态绑定</li></strong><br>在程序执行前方法就被绑定，Java方法中只有static，final，private和构造方法是属于静态绑定。</p>\n<p><strong><font size=\"4sp\">类的初始化</font></strong></p>\n<p><strong>静态变量先于静态代码块初始化</strong></p>\n<p><em>类初始化的条件为：</em></p>\n<ol>\n<li>创建类的实例</li>\n<li>访问类的静态变量</li>\n<li>访问类的静态方法</li>\n<li>反射</li>\n</ol>\n<p><strong>当初始化的子类有父类时先初始化其父类，调用类常量不会初始化该类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassInfo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClassInfo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String...args)</span></span>&#123;</span><br><span class=\"line\">        Test.str=<span class=\"string\">\"main\"</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"执行完Test.str=\\\"main\\\"后\"</span>);</span><br><span class=\"line\">        Test test=<span class=\"keyword\">new</span> Test();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String str=<span class=\"string\">\"str\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Test</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Test\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"static\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"normal\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>static<br>执行完Test.str=”main”后<br>normal<br>Test</p>\n</blockquote>\n<p>由此可见当访问Test类的静态成员时即完成对Test类的加载，并在加载期间执行了静态代码块</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleTon</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> SingleTon singleTon = <span class=\"keyword\">new</span> SingleTon();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count1;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> count2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">SingleTon</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        count1++;</span><br><span class=\"line\">        count2++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> SingleTon <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> singleTon;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SingleTon singleTon = SingleTon.getInstance();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"count1=\"</span> + singleTon.count1);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"count2=\"</span> + singleTon.count2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>count1=1<br>count2=0</p>\n</blockquote>\n<p>当调用getInstance方法获取对象的引用时，会初始化count1，count2为0，实例化SingleTon静态对象，然后调用构造方法，将count1和count2自加1，最后在main方法中访问静态变量</p>\n<p><strong>加载</strong></p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流。</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在Java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。</li>\n</ol>\n<p><strong>验证</strong><br>文件格式验证、元数据验证、字节码验证和符号引用验证。</p>\n<p><strong>准备</strong><br>是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在Java堆中。</p>\n<p><strong>解析</strong><br> 解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。</p>\n<p><em>符号引用：</em> 以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定已经加载到内存中。</p>\n<p><em>直接引用：</em> 直接引用可以是直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用是与虚拟机实现的内存布局相关的，如果有了直接引用，那么引用的目标必定已经在内存中存在。</p>\n<h2 id=\"类字面常量\"><a href=\"#类字面常量\" class=\"headerlink\" title=\"类字面常量\"></a>类字面常量</h2><p>类字面常量是对class对象引用的另一种方法，如FancyToy.Class</p>\n<p>由于其在编译阶段就会受到检查，所以更安全。</p>\n<p>对于基本数据类型的包装器类还有一个标准字段TYPE:</p>\n<table>\n<thead>\n<tr>\n<th>boolean.class</th>\n<th>Boolean.TYPE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>short.Class</td>\n<td>Short.TYPE</td>\n</tr>\n</tbody>\n</table>\n<p>当使用.class来创建Class对象的引用时，该Class对象不会被初始化。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Class1</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String str=<span class=\"string\">\"Class1_str\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String str_static=<span class=\"string\">\"Class1.str_static\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Class1_static\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Class2</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String str=<span class=\"string\">\"Class2_str\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Class2_static\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Classer</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String...args)</span> </span>&#123;</span><br><span class=\"line\">        Class class1=Class1.class;</span><br><span class=\"line\">        System.out.println(Class1.str);</span><br><span class=\"line\">        System.out.println(Class1.str_static);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class class2=Class.forName(<span class=\"string\">\"thinkinjava.Class2\"</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Class2.str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Class1_str<br>Class1_static<br>Class1.str_static<br><br>Class2_static<br>Class2_str</p>\n</blockquote>\n<p>static final作为编译器常量，不需要初始化后便能读取，但访问static域不是final值时会强制实现初始化。</p>\n<p>为了使用类的准备工作要经历三个步骤：</p>\n<ol>\n<li><strong>加载</strong>，由类加载器执行，该步骤将查找字节码（通常在classpath所指定的路径中查找），并从这些字节码中创建一个Class对象。</li>\n<li><strong>链接</strong>，验证类中的字节码，为静态域分配内存空间，并且如果必需的话将解析这个类创建的其它类的所以引用。</li>\n<li><strong>初始化</strong>，如果该类具有超类，则对其进行初始化，执行静态初始化器和静态初始化块。</li>\n</ol>\n<h2 id=\"泛化的Class引用\"><a href=\"#泛化的Class引用\" class=\"headerlink\" title=\"泛化的Class引用\"></a>泛化的Class引用</h2><p>如：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;Integer&gt; intClass=<span class=\"keyword\">int</span>.class</span><br></pre></td></tr></table></figure></p>\n<p>通过使用泛型语法可以强制编译器执行额外的类型检查</p>\n<p><em>创建一个Class引用，限定为Number类型的任何子类型：</em><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;? extends Number&gt; numberClass=<span class=\"keyword\">int</span>.class;</span><br><span class=\"line\">numberClass=<span class=\"keyword\">double</span>.class;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"新的转型语法\"><a href=\"#新的转型语法\" class=\"headerlink\" title=\"新的转型语法\"></a>新的转型语法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Building b=<span class=\"keyword\">new</span> House();</span><br><span class=\"line\">Class&lt;House&gt; hs=House.class;</span><br><span class=\"line\">House h=hs.cast(b);</span><br><span class=\"line\"><span class=\"comment\">//or:</span></span><br><span class=\"line\">h=(House)b;</span><br></pre></td></tr></table></figure>\n<p>#</p>\n","categories":["Java"],"tags":[]},{"title":"贪心算法","url":"https://grooters.github.io/2018/06/02/贪心算法/","content":"<p><strong><font size=\"5sp\">埃及分数</font></strong></p>\n<p><strong><font size=\"4sp\">把一个真分数表示为最少的埃及分数之和的形式</font></strong></p>\n<p><em>令真分数为A/B，A/B的整数部分为C，余数为D，埃及分数字母为E，有：</em></p>\n<p><li>策略一</li></p>\n<blockquote>\n<p>从最大的一个埃及分数即1/2开始试，当A/B &gt; 1/E，则A/B-1/E，E++，继续判断尝试。</p>\n</blockquote>\n<p><li>策略二</li></p>\n<blockquote>\n<p>从最接近真分数的一个埃及分数开始，然后A/B = A/B - 1/E(离A/B最近的埃及分数)，然后再求最接近A/B的埃及分数。</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CommFactor</span><span class=\"params\">(<span class=\"keyword\">int</span> A, <span class=\"keyword\">int</span> B)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">EgyptScore</span><span class=\"params\">(<span class=\"keyword\">int</span> A, <span class=\"keyword\">int</span> B)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> A=<span class=\"number\">9</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> B = <span class=\"number\">10</span>;</span><br><span class=\"line\">\tEgyptScore(A, B);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">EgyptScore</span><span class=\"params\">(<span class=\"keyword\">int</span> A, <span class=\"keyword\">int</span> B)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> E, F;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\tE = B / A + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tA = A * E - B;</span><br><span class=\"line\">\t\tB = E * B;</span><br><span class=\"line\">\t\tF = CommFactor(A, B);</span><br><span class=\"line\">\t\tA = A / F;</span><br><span class=\"line\">\t\tB = B / F;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (A ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//返回最后一个埃及分数的分母</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> E;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*求最大公约数*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">CommFactor</span><span class=\"params\">(<span class=\"keyword\">int</span> A,<span class=\"keyword\">int</span> B)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a, b, temp;</span><br><span class=\"line\">\ta = A;</span><br><span class=\"line\">\tb = B;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (a &lt; b) &#123;</span><br><span class=\"line\">\t\ttemp = a;</span><br><span class=\"line\">\t\ta = b;</span><br><span class=\"line\">\t\tb = temp;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (a%b != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\ttemp = a % b;</span><br><span class=\"line\">\t\ta = b;</span><br><span class=\"line\">\t\tb = temp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">B=A*C+D =&gt; B/A=C+D/A&lt;C+1,则：</span><br><span class=\"line\"></span><br><span class=\"line\">A/B&gt;1/(C+1)，故：</span><br><span class=\"line\"></span><br><span class=\"line\">1/(C+1) = 1/E为A/B的最大埃及分数</span><br><span class=\"line\"></span><br><span class=\"line\">A/B=C,1/(C+1),则：</span><br><span class=\"line\"></span><br><span class=\"line\">E=B/A+1</span><br><span class=\"line\"></span><br><span class=\"line\">A/B-1/E=A/B-1/E : *AE/B*E-B/B*E=A*E-B/B*E,故:</span><br><span class=\"line\"></span><br><span class=\"line\">A=A*E-B ,B=B*E</span><br></pre></td></tr></table></figure>\n<h1 id=\"图问题中的贪心法\"><a href=\"#图问题中的贪心法\" class=\"headerlink\" title=\"图问题中的贪心法\"></a>图问题中的贪心法</h1><h2 id=\"TSP问题\"><a href=\"#TSP问题\" class=\"headerlink\" title=\"TSP问题\"></a>TSP问题</h2><p><strong><li>最近顶点策略</li></strong></p>\n<p><img src=\"/img/数据结构与算法/贪心算法中的TSP问题.PNG\" alt=\"贪心算法中的TSP问题\"></p>\n<p>如图，C矩阵中代表的是两点之间的距离，无穷代表对应的两点没有连线，如：C14=2就指第一行的第四列的值为2即点1到点4的距离为2。</p>\n<p><em>解题思路：</em></p>\n<p><img src=\"/img/数据结构与算法/TSP问题贪心算法求解思路.PNG\" alt=\"TSP问题贪心算法求解思路\"></p>\n<p>P表示要走的边的集合，故P=n-1，V表示所有点的集合，选定一个起点w，判断出一个与该点距离最近的v点，令u=w（此时第一个点是起点），故Cuv便是起点到下一个点的最短距离</p>\n<p><strong><li>最短链接策略</li></strong></p>\n<p><img src=\"/img/数据结构与算法/TSP问题最短链接策略.PNG\" alt=\"TSP问题最短链接策略\"></p>\n<p>连接距离最短的两点，注意要满足这两点没有被连过且出发点连接相应点后不再连接其它点</p>\n<p><em>解题思路：</em></p>\n<p><img src=\"/img/数据结构与算法/TSP问题最短链接策略解题思路.PNG\" alt=\"TSP问题最短链接策略解题思路\"></p>\n<p>u和v在P中不连通即u和v两点还未连接过，不产生分支指即u连接了v后u就不能连接过其它点的边</p>\n<p><em>时间复杂度：</em><br><strong>O(n^2)</strong><br><strong>O(nlog2n)</strong></p>\n<h2 id=\"图着色问题\"><a href=\"#图着色问题\" class=\"headerlink\" title=\"图着色问题\"></a>图着色问题</h2><p><img src=\"/img/数据结构与算法/贪心法中的图着色问题.png\" alt=\"贪心法中的图着色问题\"></p>\n<p><em>解题思路：</em></p>\n<ol>\n<li>用颜色1着色<br> (1) A着色1，无冲突<br> (2) BC着色1，与A冲突<br> (3) D着色1，无冲突<br> (4) E着色1，与D冲突</li>\n<li>用颜色2着色<br> (1) AD已着色<br> (2) B着色2，无冲突<br> (3) CE着色2，与B冲突</li>\n<li>用颜色3着色<br> (1) ABD已着色<br> (2) C着色3，无冲突<br> (3) E着色3，与C冲突</li>\n<li>E着色4，无冲突</li>\n</ol>\n<p><em>时间复杂度：</em><br><strong>O(k×n)</strong>，k为颜色数；n为结点数</p>\n<h2 id=\"最小生成树\"><a href=\"#最小生成树\" class=\"headerlink\" title=\"最小生成树\"></a>最小生成树</h2><p><strong><li> Prime算法</li></strong></p>\n<p><em>基本思路：</em><br>在带权连通图中V是包含所有顶点的集合， U已经在最小生成树中的节点，从图中任意某一顶点v开始，此时集合U={v}，重复执行下述操作：在所有u∈U,w∈V-U的边(u,w)∈E中找到一条权值最小的边，将(u,w)这条边加入到已找到边的集合，并且将点w加入到集合U中，当U=V时，就找到了这颗最小生成树。</p>\n<p><strong>适用于稠密图</strong></p>\n<p><strong><li> Kruskal算法</li></strong></p>\n<p><em>基本思路：</em><br>将每个顶点放入其自身的数据集合中。然后，按照权值的升序来选择边。当选择每条边时，判断定义边的顶点是否在不同的数据集中。如果是，将此边插入最小生成树的集合中，同时，将集合中包含每个顶点的联合体取出，如果不是，则产生回路，就移动到下一条边。重复这个过程直到所有的边都探查过。</p>\n<p><strong>适用于稀疏图</strong></p>\n<h1 id=\"组合问题中的贪心法\"><a href=\"#组合问题中的贪心法\" class=\"headerlink\" title=\"组合问题中的贪心法\"></a>组合问题中的贪心法</h1><h2 id=\"背包问题\"><a href=\"#背包问题\" class=\"headerlink\" title=\"背包问题\"></a>背包问题</h2><p>0/1背包：物品不可拆分</p>\n<p>部分背包：物品可以拆分</p>\n<p><li>策略一</li></p>\n<p>先放价值最高的物品</p>\n<p><li>策略二</li></p>\n<p>先放容量最小的物品</p>\n<p><li>策略三</li></p>\n<p>先放单位价值最高的物品</p>\n<p><em>eg:</em></p>\n<p>给定5个物品，其重量分别是（2,2,6,5,4），价值分别为（6, 3, 5, 4, 6），背包容量为10. 用贪心法求解该背包问题的最优解</p>\n<p><em>解题过程：</em></p>\n<p><img src=\"/img/数据结构与算法/贪心算法背包问题.PNG\" alt=\"贪心算法背包问题\"></p>\n<p><em>程序实现：</em><br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Bag</span><span class=\"params\">(<span class=\"keyword\">int</span> w[], <span class=\"keyword\">int</span> v[], <span class=\"keyword\">int</span> C, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//单位重量</span></span><br><span class=\"line\">\t<span class=\"keyword\">double</span> x[<span class=\"number\">50</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> maxValue = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (; x[i] &lt; C; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//整个物品</span></span><br><span class=\"line\">\t\tx[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tmaxValue += v[i];</span><br><span class=\"line\">\t\tC -= w[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//剩余不完整或没有物品</span></span><br><span class=\"line\">\tx[i] = (<span class=\"keyword\">double</span>)C / w[i];</span><br><span class=\"line\">\tmaxValue += x[i] * v[i];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> maxValue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>若为01背包这不考虑物品i装入一部分的情况</strong></p>\n<p><em>时间复杂度：</em></p>\n<p><strong>O(nlog2n)</strong></p>\n","categories":["数据结构与算法"],"tags":[]},{"title":"网络层","url":"https://grooters.github.io/2018/05/28/网络层/","content":"<p><strong><font size=\"5sp\">网络层在TCP/IP网络体系常被称为网际层</font></strong></p>\n<h1 id=\"网络层的连发各种服务\"><a href=\"#网络层的连发各种服务\" class=\"headerlink\" title=\"网络层的连发各种服务\"></a>网络层的连发各种服务</h1><p><strong>TCP/IP体系的网络层提供的是数据报服务</strong><br><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527492697315&amp;di=ea6e1f592be046de321a7fd9ab8db535&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.educity.cn%2Farticle_images%2F2013-12-23%2F6c7e0632-13b4-4089-8c0b-1203e1f51ba4.jpg\" alt=\"虚电路服务于数据报服务的对比\"></p>\n<p><strong>网络层的两种重要的功能分别是路由选择和分组转发</strong></p>\n<h1 id=\"网际协议IP\"><a href=\"#网际协议IP\" class=\"headerlink\" title=\"网际协议IP\"></a>网际协议IP</h1><p>与其配套使用的还有：<br><strong><li>地址解析协议(ARP)</li></strong></p>\n<ol>\n<li>根据IP地址获取物理地址。</li>\n<li>收到返回消息后将该IP地址和物理地址存入本机ARP缓存中并保留一定时间。</li>\n<li>其他主机收到应答报文时不会检测该报文的真实性就会将其记入本机ARP缓存。</li>\n</ol>\n<p><strong>ARP 是 TCP/IP 协议簇中的网络接入层协议</strong></p>\n<p><strong><li>网际控制报文协议(ICMP)</li></strong></p>\n<ol>\n<li>管理网络通不通、主机是否可达、路由是否可用等网络本身的消息。</li>\n<li>ICMP靠IP协议来完成任务，所以ICMP报文中要封装在IP头部。</li>\n</ol>\n<p><strong><li>网际组管理协议(IGMP)</li></strong></p>\n<ol>\n<li>提供internet网际多点传送的功能,即将一个ip包拷贝给多个host,windows系列采用了这个协议。</li>\n<li>尚未成熟。</li>\n</ol>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527493098528&amp;di=f6142ee5d0a58d186c07a741e485ea5f&amp;imgtype=0&amp;src=http%3A%2F%2Fstatic.yihaodou.com%2Ftec_data%2F2015%2F06%2F14349587585587bba69eec32bqPi.gif\" alt=\"网际协议IP及其配套协议\"></p>\n<h2 id=\"虚拟互联网络\"><a href=\"#虚拟互联网络\" class=\"headerlink\" title=\"虚拟互联网络\"></a>虚拟互联网络</h2><p>网络互联需要一些中间设备：</p>\n<p><li>物理层：转发器</li></p>\n<p><li>数据链路层：网桥或桥接器</li></p>\n<p><li>网际层：路由器</li></p>\n<p><li>网际层以上：网关</li></p>\n<p>虚拟互联网络简称为IP网，在这种覆盖全球的IP网上层使用TCP协议则是现在的互联网(Internet)。</p>\n<p><strong>IP由互联网名字和数字分配机构(ICANN)分配。</strong></p>\n<p><strong>IP编址方法：</strong></p>\n<ol>\n<li>分类的IP地址</li>\n<li>子网的划分</li>\n<li>构成超网</li>\n</ol>\n<p><font size=\"5dp\">分类的IP地址</font></p>\n<p>IP地址分为五类：A,B,C,D,E.<br><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527495014733&amp;di=4b2ec0c1f0d4f9c2ef613d6de3bfa4d8&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.ikafan.com%2Fimgp%2FL3Byb3h5L2h0dHAvaW1hZ2U4LjM2MGRvYy5jb20vRG93bmxvYWRJbWcvMjAxMC8wNC8xMzE2LzI4NTQ3MjhfNy5qcGc%3D.jpg\" alt=\"ip地址中网络号字段和主机号字段\"></p>\n<p>D类地址为网络地址，E类地址为广播地址</p>\n<p><strong><li>A类</li></strong><br><strong>1.0.0.1—126.155.255.254</strong></p>\n<ol>\n<li>网络号有8位，第一位已固定为0，固有7位可用。</li>\n<li>10.0.0.0到10.255.255.255是私有地址（在互联网上不使用，而被用在局域网络中的地址）。</li>\n</ol>\n<p>127.0.0.0到127.255.255.255是保留地址，用做循环测试用的。<br>0.0.0.0到0.255.255.255也是保留地址，用做表示所有的IP地址。<br>故有<strong>2^7-2=126</strong>个网络号</p>\n<p><strong><li>B类</li></strong><br><strong>128.0.0.1—191.255.255.254</strong><br>网络号有16位，但第一二位已确定为10，所以只有14位可用，虽然由于前两位导致网络号不可能全零或全一，但128.0.0.0是不指派的，故可分配的网络号有：2^14-1=65534个。</p>\n<p><strong><li>C类</li></strong><br><strong>192.0.0.1—223.255.255.254</strong><br>前三位固定为110，192.0.0.0也是不指派的，有2^21-1=2097151个网络号</p>\n<p><strong><li>D类</li></strong><br><strong>224.0.0.1—239.255.255.254</strong><br>前四位固定为1110<br>作为网络地址</p>\n<p><strong><li>E类</li></strong><br><strong>240.0.0.1—255.255.255.254</strong><br>前五位固定为11110<br>作为广播地址</p>\n<p><img src=\"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=4174955677,1754196954&amp;fm=27&amp;gp=0.jpg\" alt=\"IP地址指派范围\"></p>\n<p><img src=\"/img/计算机网络/一般不使用的特殊IP地址.png\" alt=\"一般不使用的特殊IP地址\"></p>\n<p><strong>主机位全1为广播地址，全为0为网络地址，其它为主机地址</strong></p>\n<p><em>如果网络 150.25.0.0 的子网掩码是 255.255.224.0，下面的哪一个是合法的主机地址（    ）。</em><br><img src=\"/img/计算机网络/子网合法主机地址.PNG\" alt=\"子网合法主机地址\"></p>\n<p><strong>IP地址是标志一台主机或路由器和一条链路的接口。具有两个IP地址的主机称为多归属主机</strong></p>\n<ol>\n<li>路由器具有两个或两个以上的IP地址即没一个路由器的接口都有一个不同网络号的IP地址</li>\n<li>当两个路由器直接相连时，两端的接口可以分配也可以不分配IP地址，若分配了IP地址，这一段连线就构成了一种只包含一段线路的特殊网络。若不分配则把这段特殊网络叫做无编号网络。</li>\n</ol>\n<h2 id=\"IP地址与硬件地址\"><a href=\"#IP地址与硬件地址\" class=\"headerlink\" title=\"IP地址与硬件地址\"></a>IP地址与硬件地址</h2><p><strong>物理地址是数据链路层和物理层使用的地址，而IP地址是网络层及以上使用的地址，是一种逻辑地址</strong></p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527567245209&amp;di=000b2986c44ab85376cb3061ef8ff64a&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg2.imgtn.bdimg.com%2Fit%2Fu%3D563448447%2C944371832%26fm%3D214%26gp%3D0.jpg\" alt=\"IP地址与硬件地址的区别\"></p>\n<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1527567254695&amp;di=462393863f9df2f25257a110ec7cc85c&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.educity.cn%2Farticle_images%2F2013-11-04%2F2bd42780-fbd4-49a0-a36b-c011755c342f.jpg\" alt=\"不同层次和不同区间的源地址和目的地址\"></p>\n<ol>\n<li>在IP层抽象的互联网上只能看到IP数据报</li>\n<li>路由器只根据目的站的IP地址的网络号进行路由选择</li>\n<li>在局域网的链路层只能看到MAC帧</li>\n</ol>\n<h2 id=\"地址解析协议ARP\"><a href=\"#地址解析协议ARP\" class=\"headerlink\" title=\"地址解析协议ARP\"></a>地址解析协议ARP</h2><p><img src=\"/img/计算机网络/ARP协议的作用.png\" alt=\"ARP协议的作用\"></p>\n<p><strong>ARP协议会在主机ARP高速缓存（ARP cache）中存放一个IP地址到硬件地址的映射表。</strong></p>\n<p>当主机A要向本局域网上的某台主机B发送IP数据报时就在其ARP cache中查找是否有主机B的IP地址，如有就在ARP cache中找出对应的MAC地址，再把该硬件地址写入MAX帧，然后通过局域网把该MAC帧发往此硬件地址。</p>\n<p><strong>若高速缓存为空，则需要执行以下步骤：</strong><br>ARP进程会在本局域网广播一个ARP请求分组，结构为：“源IP地址，目的IP地址，请求内容”，当匹配到了IP地址相同的主机时，该主机就将发送一个ARP响应分组，将自己的MAC地址写入该分组中，同时该主机也会把发送端的MAC地址记录到本地的MAC Cache中。</p>\n<p><strong>ARP对保存在高速缓存中的每一个映射地址都设置了生存空间，即该映射地址能在该缓存存活多久。</strong></p>\n<p><strong>ARP报文封装在以太帧中传送</strong></p>\n<h2 id=\"IP数据报的格式\"><a href=\"#IP数据报的格式\" class=\"headerlink\" title=\"IP数据报的格式\"></a>IP数据报的格式</h2><p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1528178775&amp;di=570a021de5291d09c4da176057b4e546&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fimg.kuqin.com%2Fupimg%2Fallimg%2F160918%2F2104592X0-6.jpg%3FimageMogr2%2Fauto-orient%2Fstrip%257CimageView2%2F2%2Fw%2F1240\" alt=\"IP数据报格式\"></p>\n<p><strong><li>版本</li></strong><br>占4位，目前广泛使用的是4，即IPv4。</p>\n<p><strong><li>首部长度</li></strong><br>占4位，转换成十进制数为15，但注意：<strong>首部长度字段所表示的单位是32位字即4个字节</strong>，因为IP首部的固定长度为20字节，所以首部字段长度最小值为5，即就只有固定长度那20字节，当首部长度为最大值时则有15*4=60字节。</p>\n<p><strong><li>区分服务</li></strong><br>占8位，该字段在就标准中叫做服务类型，后来被IETF改名为区分服务DS</p>\n<p><strong><li>总长度</li></strong><br>指首部和数据之和的长度，单位为字节。总长度字段为16位，故该数据报的最大长度为2^16-1=65535字节。<br>在IP层下面的每一种数据链路层协议都规定了一个数据帧中的数据字段的最大长度，这被称为最大传送单元MTU。若所传送的数据报长度超过数据链路层的MTU值，就必须把过长的数据报进行分片处理。</p>\n<p><strong><li>标识</li></strong><br>占16位，IP软件在存储器中维持一个计数器，每产生一个数据报，计数器就加1，并将辞职赋给标识字段。</p>\n<p><strong><li>标志</li></strong><br>占3位</p>\n<ol>\n<li><strong>标志字段最低位记为MF。当MF=1时即表示后面“还有分片”的数据报；MF=0表示这已是若干数据报片中的最后一个</strong></li>\n<li><strong>标志字段中间的一位记为DF，指不能分片，只有当DF=0时才允许分片</strong></li>\n</ol>\n<p><strong><li>片偏移</li></strong><br>占13位，分片后某片在原分组中的相对位置，<strong>片偏移以8个字节为偏移单位，也就是说每个分片的长度必须是8字节的整数倍</strong></p>\n<p><strong><li>生存时间</li></strong><br>指定数据报在网络中的寿命，以秒为TTL的值的单位，没经过一个路由就减去在路由器中所花费的时间，当TTL小于1秒就减1，直到TTL值减为0就丢弃该数据报。<br>如今TTL单位为跳数，TTL的意义为在互联网中至多可以经过多少个路由器，最多可经过255（其占8位）个路由器。</p>\n<p><strong><li>首部检验和</li></strong><br>占16位，<strong>只检验数据报首部，但不包括数据部分</strong><br><strong><font size=\"4sp\">检验方法：</font></strong><br>发送方：先把IP数据报首部划分为16位的序列，然后将检验和部分置零，将所有单元进行反码和运算，将得到的结果写入检验和字段。<br>接收方：将首部所有字段再进行一次反码和运算，若得出的结果为0，则说明数据正常。</p>\n<p><img src=\"/img/计算机网络/IP数据报检验和的计算过程.png\" alt=\"IP数据报检验和的计算过程\"></p>\n<p><em>求首部检验和：</em></p>\n<p><img src=\"/img/计算机网络/求首部检验和.png\" alt=\"求首部检验和\"></p>\n<p><em>解首部检验和：</em></p>\n<p><img src=\"/img/计算机网络/解首部检验和.png\" alt=\"解首部检验和\"></p>\n<blockquote>\n<p>1.版本4和首部长度5各占4位，区分服务0占8位，写成16位序列为：<br>0100010100000000<br>2.总长度28占16位，写成16位序列为：<br>0000000000011100<br>…</p>\n</blockquote>\n<h2 id=\"IP转发分组的流程\"><a href=\"#IP转发分组的流程\" class=\"headerlink\" title=\"IP转发分组的流程\"></a>IP转发分组的流程</h2><p><img src=\"/img/计算机网络/路由表举例.png\" alt=\"路由表举例\"></p>\n<p><strong><font size=\"5sp\">分组转发算法如下：</font></strong></p>\n<ol>\n<li>从数据报首部提取目的主机的IP地址D，得出目的网络地址N。</li>\n<li>若N就是此路由器直接相连的某个网络地址，则直接交付，否则执行3进行间接交付。</li>\n<li>若路由表中的目的地址为D的特定主机路由，则把数据报传送给路由表所指明的下一跳路由器，否则执行4.</li>\n<li>若路由表中有到达N的路由，则把数据报传送给路由表中所指明的下一跳路由器，否则执行5.</li>\n<li>若路由表中有默认路由，则把数据报传送给默认路由，否则执行6.</li>\n<li>报告转发分组失败。</li>\n</ol>\n<h1 id=\"划分子网和构造超网\"><a href=\"#划分子网和构造超网\" class=\"headerlink\" title=\"划分子网和构造超网\"></a>划分子网和构造超网</h1><h2 id=\"划分子网\"><a href=\"#划分子网\" class=\"headerlink\" title=\"划分子网\"></a>划分子网</h2><p><strong>IP地址：：{&lt;网络号&gt;,&lt;子网号&gt;,&lt;主机号&gt;}</strong></p>\n<p><img src=\"/img/计算机网络/子网.png\" alt=\"子网\"></p>\n<p><strong>子网掩码：</strong><br>从IP数据报首部无法看出源主机和目的在主机所连接的网络是否进行过子网划分，所以需要子网掩码进行判断和求出网络地址</p>\n<p><img src=\"/img/计算机网络/IP各字段和子网掩码.png\" alt=\"IP各字段和子网掩码\"></p>\n<p>如上图子网号为3的网络的网络地址为145.13.3.0</p>\n<p><strong>通过子网掩码和IP地址进行逐位相与，可得出所要找的子网的网络地址145.13.3.0</strong></p>\n<p><strong>子网掩码是一个网络或一个子网的重要属性</strong></p>\n<p>子网数是根据子网号算出来的，若subnet-id有n位，则共有2^n种可能的排列，<strong>除去全0和全1这两种情况</strong>就可得出子网数</p>\n<p><em>计算对应目的地址的下一跳：</em></p>\n<table>\n<thead>\n<tr>\n<th>目的网络</th>\n<th>子网掩码</th>\n<th>下一跳</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>128.96.39.0</td>\n<td>255.255.255.128</td>\n<td>m0</td>\n</tr>\n</tbody>\n</table>\n<p>128.96.39.10</p>\n<p>128.96.39.10 与 255.255.255.128 求与的：128.96.39.0，故：<br>对应的下一跳是m0</p>\n<p><img src=\"/img/计算机网络/求IP数据报片偏移MF值.png\" alt=\"求IP数据报片偏移MF值\"></p>\n<p><em>求数目为6的A类子网掩码：</em><br>设nbit，则6=2^n-2,=&gt;n=3,故有:<br><strong>11111111.11100000…..=&gt; 255.192.0.0</strong></p>\n<p><img src=\"/img/计算机网络/地址块匹配问题.png\" alt=\"地址块匹配问题\"></p>\n<h2 id=\"使用子网时分组的转发\"><a href=\"#使用子网时分组的转发\" class=\"headerlink\" title=\"使用子网时分组的转发\"></a>使用子网时分组的转发</h2><p><strong>路由表必须包括：目的网络地址，子网掩码和下一跳地址</strong></p>\n<p>在划分子网的情况下，路由器转发分组的算法如下：</p>\n<ol>\n<li>从收到的数据报首部获取目的IP地址D。</li>\n<li>先判断是否为直接交付，即对与路由器直接相连的网络的子网掩码与D逐位相与，看结果是否与相应的网络地址匹配，若匹配则直接交付（需要把D转换成物理地址封装成帧发送出去），否则执行3.</li>\n<li>若路由表中有目的地址为D的特定主机路由器，则把数据报传送给路由表所指明的下一跳路由器，否则执行4.</li>\n<li>对路由表中的每一行，用其中的子网掩码与D逐位相与，其结果若与改行目的网络地址相匹配，则把数据传给改行指定的下一跳路由器，否则执行5。</li>\n<li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器，否则执行6。</li>\n<li>报告转发分组错误。</li>\n</ol>\n<p><img src=\"/img/计算机网络/求使用子网时分组转发的过程.png\" alt=\"求使用子网时分组转发的过程\"><br><img src=\"/img/计算机网络/解使用子网时分组转发的过程.png\" alt=\"解使用子网时分组转发的过程\"></p>\n<h2 id=\"无分类编址CIDR-构造超网\"><a href=\"#无分类编址CIDR-构造超网\" class=\"headerlink\" title=\"无分类编址CIDR(构造超网)\"></a>无分类编址CIDR(构造超网)</h2><p>在变长子网掩码VLSM的基础上研究出了无分类编址，即无分类域间路由选择CIDR。</p>\n<p><em>CIDR特点：</em></p>\n<ol>\n<li>CIDR消除了传统的A类，B类和C类地址以及划分子网的概念。</li>\n<li>CIDR吧网络前缀相同的连续的IP地址组成一个“CIDR地址块”。</li>\n</ol>\n<p><strong>IP地址 :: = {&lt;网络前缀&gt;，&lt;主机号&gt;}</strong><br>da sejhuiosaHJDKLAshndjkl;asJdnmksl;Zcmn LZDK:<br>有三级编址（使用子网掩码）转为两级编址</p>\n<p><em>eg：128.14.35.7/20</em></p>\n<p>写成二进制：10000000 00001110 00100011 00000111，则：<br><strong>前二十位为网络号，后十二位为主机号</strong></p>\n<table>\n<thead>\n<tr>\n<th>最小地址</th>\n<th>128.14.32.0</th>\n<th>10000000 00001110 00100000 00000000</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>最大地址</td>\n<td>128.14.47.255</td>\n<td>10000000 00001110 00101111 11111111</td>\n</tr>\n</tbody>\n</table>\n<p>CIDR使用的地址掩码也可以继续称为子网掩码，例如以上的子网掩码就是：<br><strong>11111111 11111111 11110000 00000000</strong></p>\n<p>路由表中利用CIDR地址块来查找目的网络，这种地址的聚合称为路由聚合，也称为构成超网</p>\n<p>CIDR的特殊写法：<br>10.0.0.0/10 = 10/10<br>00001010 00*</p>\n<p><strong>每一个CIDR地址数一定是2的整数次幂</strong></p>\n<p><strong>路由表中的每一个项目由“网络前缀”和”下一跳地址”组成”</strong></p>\n<h1 id=\"网际控制报文协议ICMP\"><a href=\"#网际控制报文协议ICMP\" class=\"headerlink\" title=\"网际控制报文协议ICMP\"></a>网际控制报文协议ICMP</h1><p>ICMP允许主机或路由器提供差错情况和有关异常情况的报告。</p>\n<p>ICMP是存在于IP数据报中的，故不是高层协议。</p>\n<p><img src=\"/img/计算机网络/ICMP报文格式.png\" alt=\"ICMP报文格式\"></p>\n<p><em>ICMP报文种类有两种：</em></p>\n<p><strong><li>ICMP差错报告报文</li></strong></p>\n<p><img src=\"/img/计算机网络/几种常用的ICMP报文类型.png\" alt=\"几种常用的ICMP报文类型\"></p>\n<p><em>改变路由：路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器。</em></p>\n<p><em>ICMP差错报告报文格式为：</em><br>把收到的需要进行差错报告的IP数据报的前8个字节提取出来（为了得到运输层的端口号），作为ICMP报文的数据字段。再加上相应的ICMP差错报告报文的前8个字节，就构成了ICMP差错报告报文。</p>\n<p><img src=\"/img/计算机网络/ICMP差错报告报文的数据字段的内容.png\" alt=\"ICMP差错报告报文的数据字段的内容\"></p>\n<p><strong><li>ICMP询问报文</li></strong></p>\n<p>常见的询问报文有以下两种：</p>\n<ol>\n<li><p>回送请求和回答<br>给特定主机或路由发送一个询问，对应主机必需做出一个应答，该询问报文用来测试目的站是否可达以及了解其有关状态。</p>\n</li>\n<li><p>时间戳请求和回答<br>让某台主机或路由器回答一个当前的日期和时间，该报文中有一个32字节的字段，其中写入的整数代表从1900年1月1日到当今时刻一共有多少秒。该报文用于时钟同步和时间测量。</p>\n</li>\n</ol>\n<h1 id=\"互联网的路由选择协议\"><a href=\"#互联网的路由选择协议\" class=\"headerlink\" title=\"互联网的路由选择协议\"></a>互联网的路由选择协议</h1><p>从路由算法能否随网络的通信量或拓扑自适应地进行调整变化来划分，则有<strong>静态路由选择策略（非自适应路由选择）</strong>与<strong>动态路由选择策略（自适应路由选择）</strong></p>\n<p>自治系统（AS）是在单一技术管理下的一组路由器，而这些路由器使用<strong>一种</strong>自治系统内部的路由选择协议和<strong>共同的</strong>度量。一个AS对其它AS表现出的是一个<strong>单一的</strong>和<strong>一致的</strong>路由选择策略。</p>\n<p>互联网将路由选择协议分为两大类：</p>\n<ol>\n<li>内部网关协议（IGP）：RIP和OSPF</li>\n<li>外部网关协议（EGP）：EGP和BGP（边界网关协议）</li>\n</ol>\n<p><img src=\"/img/计算机网络/自治系统和内部网关协议和外部网关协议.png\" alt=\"自治系统和内部网关协议和外部网关协议\"></p>\n<h2 id=\"内部网关协议RIP\"><a href=\"#内部网关协议RIP\" class=\"headerlink\" title=\"内部网关协议RIP\"></a>内部网关协议RIP</h2><p>RIP叫做路由信息协议，是一种分布式的基于距离向量的路由选择协议。</p>\n<p>RIP协议要求网络中的每一个路由器都要维护从它自己到其它目的网络的距离记录，故该距离为一组距离即距离向量。</p>\n<p>RIP协议将距离称作为<strong>跳数</strong>，每经过一个路由器跳数就加1，只允许一条路径最多只能有15个路由器，即距离为15以上时则将该路径看作不通，因此该协议仅仅适用于小型互联网。</p>\n<p>RIP不能使用多条路由线路，只会先择一条距离最短的线路。</p>\n<p><em>RIP协议的特点是：</em></p>\n<ol>\n<li>仅和相邻路由器交换信息</li>\n<li>路由器交换的信息是当前本路由器所知道的全部信息，即自己现在的路由表</li>\n<li>按固定的时间间隔交换路由信息</li>\n</ol>\n<h3 id=\"距离向量算法\"><a href=\"#距离向量算法\" class=\"headerlink\" title=\"距离向量算法\"></a>距离向量算法</h3><p><em>对每一个相邻路由器发送过来的RIP报文，进行以下步骤：</em></p>\n<ol>\n<li>对地址为X的相邻路由器发来的RIP报文，先修改此报文中的所有项目：把下一跳字段中的地址都改为X，并把所有的距离都加1，每一个项目都有三个数据：到目的网络N，距离为d，下一跳路由器为X。</li>\n<li>对修改后的RIP报文进行以下步骤：若原路由表没有目的网络N，则把该项目添加到路由表中，<em>否则</em>：若下一跳地址为X则把收到的项目替换原路由表中的项目，<em>否则</em>：若收到的项目中的距离d小于路由表中的距离，则进行更新，<em>否则</em>：什么也不做。</li>\n<li>若3分钟还没收到相邻路由器的更新路由表，则把此相邻路由器记为不可达的路由器，即把距离置为16。</li>\n<li>返回。</li>\n</ol>\n<p><em>eg:</em><br><img src=\"/img/计算机网络/距离向量算法.PNG\" alt=\"距离向量算法\"></p>\n<h3 id=\"RIP协议的报文格式\"><a href=\"#RIP协议的报文格式\" class=\"headerlink\" title=\"RIP协议的报文格式\"></a>RIP协议的报文格式</h3><p><img src=\"/img/计算机网络/RIP2的报文格式.png\" alt=\"RIP2的报文格式\"></p>\n<p>首部中的命令字段指出报文的意义，如1表示请求路由信息。</p>\n<p>路由部分由若干个路由信息组成，每个路由信息占20个字节，最多只能有25个路由信息，故RIP报文最大长度为：<strong>4+20*25=504</strong></p>\n<p>其中地址族标识符（地址类别）字段用来标志所使用的地址协议，如采用IP地址就将其置为2。路由标记填入自治系统号ASN，因为RIP有可能收到本自治系统以外的路由选择信息。</p>\n<p>RIP2鉴别功能：将原来写入第一个路由信息的位置用作鉴别，此时应将地址族标识符置为全1，而路由标记写入鉴别类型，剩下的16字节作为鉴别数据。</p>\n<p>RIP协议的特点：<strong>好消息传的快，坏消息传得慢</strong></p>\n<p><img src=\"/img/计算机网络/RIP协议的特点.png\" alt=\"RIP协议的特点\"></p>\n<p>当R1到网1的链路出现故障，则R1路由表相应的项目会变为1，16，直接（网络1，16跳，直接交付），此时可能需要30s才能把更新信息发送给R2，而此时R2传了1，2，R1（网络1，距离为2跳，下一跳为R1）给R1，R1就会以为到达网络1的距离为2+1=3，下一跳为R2，并把更新信息给R2，R2又会以为其到网络1的距离为4，下一跳为R1，这样的更新会持续下去直到距离达到16才会发现出错。</p>\n","categories":["计算机网络"],"tags":[]},{"title":"Hexo博客搭建","url":"https://grooters.github.io/2018/05/26/Hexo博客搭建/","content":"<h1 id=\"Hexo环境搭建\"><a href=\"#Hexo环境搭建\" class=\"headerlink\" title=\"Hexo环境搭建\"></a>Hexo环境搭建</h1><p><strong><li>安装Git Bash</li></strong></p>\n<p><strong><li>安装Node.Js</li></strong></p>\n<p><strong><li>安装hexo</li></strong><br><strong>cd到需要安装位置的目录，输入npm i -g hexo</strong></p>\n<p><strong><li>初始化hexo</li></strong><br><strong>在blog根目录下初始化blog，输入hexo init</strong></p>\n<p><strong><li>搭桥到Github</li></strong></p>\n<p><strong>在github上创建res，名称为<font color=\"black\">grooters.github.io</font></strong></p>\n<p><strong>在hexo根目录打开Git Bash上输入：</strong><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;grooter&quot;</span><br><span class=\"line\">git config --global user.email &quot;figurers@163.com&quot;</span><br></pre></td></tr></table></figure></p>\n<p><strong>创建ssh：</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;figurers@163.com&quot;</span><br></pre></td></tr></table></figure></p>\n<p>将用户目录下的id_rsa.pub文件内容复制到github上新建的ssh中去<br><br></p>\n<p><strong><li>本地Hexo配置</li></strong></p>\n<p><strong>修改blog目录下_config.yml文件中的deploy:</strong><br><br><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: git</span><br><span class=\"line\">  repo: git@github.com:Grooters/grooters.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a><strong>坑</strong></h1><blockquote>\n<p>Error: fatal: HttpRequestException encountered</p>\n</blockquote>\n<p>需要安装：<a href=\"https://github.com/Microsoft/Git-Credential-Manager-for-Windows/releases/tag/v1.14.0\" target=\"_blank\" rel=\"noopener\">GCMW-1.14.0.exe</a></p>\n<blockquote>\n<p>unable to auto-detect email address</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.email &quot;figurers@163.com&quot;</span><br><span class=\"line\">git config --global user.name &quot;grooters&quot;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Git bash闪退并生成mintty.exe.stackdump文件</p>\n</blockquote>\n<p><em>以下方法来自CSDN博主<a href=\"https://blog.csdn.net/xxwsxx/article/details/80926461\" target=\"_blank\" rel=\"noopener\">xxwsxx</a></em></p>\n<p>需要替换掉C:\\Windows\\System32\\drivers下的null.sys文件</p>\n<p><a href=\"ttps://pan.baidu.com/s/1UtcZizm-iFcVk4OKrnFJVg\" target=\"_blank\" rel=\"noopener\">null.sys</a>  </p>\n<p>密码：1q4d</p>\n<p>在C:/Window/System32/找到cmd并右键管理员模式运行，输入<strong>sc start null</strong>，若输出结果的<strong>STATE</strong>属性值为<strong>RUNNING</strong>，则问题解决。</p>\n<blockquote>\n<p>ERROR Deployer not found: git</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<h1 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//可通过localhost:4000访问博客</span><br><span class=\"line\">hexo server</span><br><span class=\"line\"></span><br><span class=\"line\">//清理博客目录下的文件</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"></span><br><span class=\"line\">//重建博客文件</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\"></span><br><span class=\"line\">//上传到Github</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure>\n<h1 id=\"fexoer主题的使用\"><a href=\"#fexoer主题的使用\" class=\"headerlink\" title=\"fexoer主题的使用\"></a>fexoer主题的使用</h1><p><a href=\"http://forsigner.com/2016/03/10/fexo-doc-zh-cn/\" target=\"_blank\" rel=\"noopener\">官方文档</a></p>\n<p><strong>更改主题：</strong></p>\n<p>在博客根目录下的_config.yml文件中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: fexoer</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"布局样式修改\"><a href=\"#布局样式修改\" class=\"headerlink\" title=\"布局样式修改\"></a>布局样式修改</h2><ol>\n<li>各页面的布局可在主题文件根目录中的layout文件夹对应的ejs文件更改</li>\n<li>主题的样式可以在主题文件根目录中的source文件夹中css文件夹的styles.css文件中更改</li>\n</ol>\n<h2 id=\"站内搜索\"><a href=\"#站内搜索\" class=\"headerlink\" title=\"站内搜索\"></a>站内搜索</h2><ol>\n<li>用主题写好的搜索引擎，详见文档</li>\n<li>使用<a href=\"https://swiftype.com/\" target=\"_blank\" rel=\"noopener\">swiftype</a>实现站内搜索：<br>在官网中注册账号添加站点，抓取数据，然后复制其提供的js代码到search.ejs文件中，将搜索框的id改为：st-default-search-input</li>\n</ol>\n<h2 id=\"Valine评论系统的使用\"><a href=\"#Valine评论系统的使用\" class=\"headerlink\" title=\"Valine评论系统的使用\"></a>Valine评论系统的使用</h2><p><em>在post.ejs的div中加入：</em></p>\n<p><a href=\"https://valine.js.org/quickstart.html\" target=\"_blank\" rel=\"noopener\">Valine</a></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=\"//unpkg.com/valine@latest/dist/Valine.min.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;div id=\"comment\" class=\"vcomment\" &gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    var notify = <span class=\"string\">'&lt;%= theme.valine.notify %&gt;'</span> == <span class=\"keyword\">true</span> ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    var verify = <span class=\"string\">'&lt;%= theme.valine.verify %&gt;'</span> == <span class=\"keyword\">true</span> ? <span class=\"keyword\">true</span> : <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    var GUEST_INFO = [<span class=\"string\">'nick'</span>,<span class=\"string\">'mail'</span>,<span class=\"string\">'link'</span>];</span><br><span class=\"line\">    var guest_info = <span class=\"string\">'&lt;%= theme.valine.guest_info %&gt;'</span>.split(<span class=\"string\">','</span>).filter(function(item)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> GUEST_INFO.indexOf(item) &gt; -<span class=\"number\">1</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    guest_info = guest_info.length == <span class=\"number\">0</span> ? GUEST_INFO :guest_info;</span><br><span class=\"line\">    window.valine = <span class=\"keyword\">new</span> Valine(&#123;</span><br><span class=\"line\">        el: <span class=\"string\">'.vcomment'</span>,</span><br><span class=\"line\">        notify: notify,</span><br><span class=\"line\">        verify: verify,</span><br><span class=\"line\">        appId: <span class=\"string\">\"&lt;%= theme.valine.appid %&gt;\"</span>,</span><br><span class=\"line\">        appKey: <span class=\"string\">\"&lt;%= theme.valine.appkey %&gt;\"</span>,</span><br><span class=\"line\">        avatar:<span class=\"string\">'&lt;%= theme.valine.avatar %&gt;'</span>,</span><br><span class=\"line\">        placeholder: <span class=\"string\">\"&lt;%= theme.valine.placeholder %&gt;\"</span>,</span><br><span class=\"line\">        guest_info:guest_info,</span><br><span class=\"line\">        pageSize:<span class=\"string\">'&lt;%= theme.valine.pageSize %&gt;'</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加不蒜子\"><a href=\"#添加不蒜子\" class=\"headerlink\" title=\"添加不蒜子\"></a>添加不蒜子</h2><p>在<strong>D:\\Blog\\themes\\fexoer\\layout</strong>目录下的post.yml文件中添加安装脚本js代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script <span class=\"keyword\">async</span> src=<span class=\"string\">\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>再修改<strong>D:\\Blog\\themes\\fexoer\\layout_partial</strong>目录下的article.ejs文件代码炜：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;header <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"article-header\"</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    ........</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;% <span class=\"keyword\">if</span> (theme.busuanzi)&#123; %&gt;</span><br><span class=\"line\">    &lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"fa fa-eye\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\">      &lt;span id=<span class=\"string\">\"busuanzi_container_page_pv\"</span>&gt;</span><br><span class=\"line\">         &amp;nbsp热度 &lt;span id=<span class=\"string\">\"busuanzi_value_page_pv\"</span>&gt;</span><br><span class=\"line\">         &lt;i <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"fa fa-spinner fa-spin\"</span>&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span>℃</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/span&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;% &#125; %&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">    ........</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;/</span>div&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/header&gt;</span></span><br></pre></td></tr></table></figure>\n","categories":["前端"],"tags":[]},{"title":"about","url":"https://grooters.github.io/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"https://grooters.github.io/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"https://grooters.github.io/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"https://grooters.github.io/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"https://grooters.github.io/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"https://grooters.github.io/tag/index.html","content":"","categories":[],"tags":[]}]